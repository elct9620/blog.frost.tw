<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>弦而時習之</title>
    <link>https://blog.frost.tw/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>蒼時弦也的個人網誌，專注在前端、後端以及遊戲開發，大多使用 Ruby 和 Ruby on Rails 以及 Golang、JS 和 C 語言。</description>
    <pubDate>Tue, 27 Mar 2018 13:35:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>部署你的第一個 Ruby on Rails 網站（三）</title>
      <link>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/</link>
      <guid>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/</guid>
      <pubDate>Tue, 27 Mar 2018 13:30:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;經過&lt;a href=&quot;https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/&quot;&gt;第一篇&lt;/a&gt;和&lt;a href=&quot;https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/&quot;&gt;第二篇&lt;/a&gt;的說明，我想大家現在應該都有辦法順利的透過 SSH 進入自己的伺服器。&lt;/p&gt;
&lt;p&gt;在第二篇的最後，我們針對 Ruby 環境預先做了準備，接下來就是安裝 Ruby 環境的時候了！&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>經過<a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">第一篇</a>和<a href="https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/">第二篇</a>的說明，我想大家現在應該都有辦法順利的透過 SSH 進入自己的伺服器。</p><p>在第二篇的最後，我們針對 Ruby 環境預先做了準備，接下來就是安裝 Ruby 環境的時候了！</p><a id="more"></a><h2 id="計畫"><a href="#計畫" class="headerlink" title="計畫"></a>計畫</h2><p>隨著專案的發展，我們通常都會需要更新 Ruby 版本。這次我們選擇使用的是 Passenger + Ruby  的解決方案，好處是可以透過設定檔指定 Ruby 版本。為了這個優點，我們可以透過自行編譯 Ruby 來管理多個版本的 Ruby。</p><p>如果覺得自行編譯麻煩的話，也可以選擇 RVM 或者 rbenv 這兩套常見的 Ruby 版本管理工具，不過在經驗上編譯 Ruby 環境其實非常的容易，所以也就不一定需要了！</p><blockquote><p>使用這種方法是需要管理的主機不多，或者是自己使用（需要放多個網站）的情況才會這樣做，當主機多的時候，採用 Chef / Ansible 這種部署工具，一台機器針對一個網站配置，更新版本時就採取直接安裝新的伺服器後轉移過去，反而會比較好管理。</p></blockquote><h2 id="編譯-Ruby"><a href="#編譯-Ruby" class="headerlink" title="編譯 Ruby"></a>編譯 Ruby</h2><p>首先，我們要確定是在自己的使用者下執行，而非 <code>root</code> 使用者。看一下輸入指令的地方是顯示類似 <code>elct9620@deploy-example</code> 而不是 <code>root@deploy-example</code> 就能夠分辨現在使用的帳號是哪一個。</p><p><code>@</code> 前面是「使用者」後面的部分叫做 Hostname（主機名稱）可以用來分辨是在哪一台伺服器上，所以在設定的時候好好取名是很重要的。</p><blockquote><p>不論是寫程式或設定伺服器，用容易理解的命名都是一個好習慣。</p></blockquote><p>這次的範例會編譯 Ruby 2.4 版本，我們要先到 Ruby 官方網站的<a href="https://www.ruby-lang.org/zh_tw/downloads/" target="_blank" rel="noopener">下載頁面</a>來取得原始碼的壓縮檔。</p><p><img src="quiver-image-url/486433672F090C92A5ED41A33B535964.png =1920x1080" alt="螢幕快照 2018-03-26 下午10.17.13.png"></p><p>如圖上顯示的一樣，目前最新的 Ruby 2.4.3 是我們想安裝的版本，所以對他點選右鍵後選擇「複製連結網址」就可以取得像是下面的下載位址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.3.tar.gz</div></pre></td></tr></table></figure><p>接下來我們到伺服器上用 <code>wget</code>（WWW Get）指令來下載檔案，除了 <code>curl</code> 這個之後會介紹的指令外，是在 Linux 上很常用來下載檔案的指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.3.tar.gz</div></pre></td></tr></table></figure><blockquote><p>如果發現沒有 <code>wget</code> 指令的話，可以利用上次介紹過的 <code>sudo yum install wget -y</code> 來安裝。</p></blockquote><p>下載完畢後，如果不確定操作是否正確，我們可以用 <code>ls</code> (List) 指令來看看現在這個目錄（資料夾）下面有沒有這個檔案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls</div></pre></td></tr></table></figure><p>結果會類似下面這樣</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[elct9620@deploy-example ~]$ ls</div><div class="line">ruby-2.4.3.tar.gz</div></pre></td></tr></table></figure><p>既然這是一個壓縮檔，我們理所當然的要下指令對他解壓縮了！</p><p>在 Linux 中，我們通常會把檔案做成一個 <code>tar</code> 格式的檔案，然後再搭配上一個壓縮的格式（例如 Gzip 或者 Bzip2）所以才會有叫做 <code>.tar.gz</code> 或者 <code>.tgz</code> 這樣的副檔名。</p><p>而 <code>tar</code> 也是 Linux 中的一個指令，可以用來壓縮或者解壓縮檔案。下面的指令同時做了 <code>-z</code> （用 Gzip 壓縮格式）<code>-x</code>（解壓縮）<code>-v</code>（顯示檔案內容）<code>-f</code>（指定檔案）來進行解壓縮，統合起來就是「用 Gzip 格式解壓縮 <code>ruby-2.4.3.tar.gz</code> 這個檔案，並顯示內容」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf ruby-2.4.3.tar.gz</div></pre></td></tr></table></figure><p>執行完畢後，再次用 <code>ls</code> 看一次，會發現多出了 <code>ruby-2.4.3</code> 這個資料夾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[elct9620@deploy-example ~]$ ls</div><div class="line">ruby-2.4.3  ruby-2.4.3.tar.gz</div></pre></td></tr></table></figure><p>為了編譯 Ruby 方便下指令，我們要先用 <code>cd</code>（Change Directory）指令，切換到 <code>ruby-2.4.3</code> 這個目錄下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ruby-2.4.3</div></pre></td></tr></table></figure><p>同時可能會發現原本輸入指令左方的 <code>~</code> 符號變成了 <code>ruby-2.4.3</code>，這是表示你目前所在的資料夾，透過這樣的方式就不怕迷失在 Linux 的資料夾中。</p><blockquote><p><code>~</code> 符號是一個代號，表示這個使用者的家目錄，一般 Linux 的使用者都會在 <code>/home</code> 資料夾下面有一個對應自己帳號的資料夾。</p></blockquote><p>預設的 Ruby 會安裝到 <code>/usr/local</code> 這個位置，但是如果我們希望能管理多個版本的 Ruby 就需要明確的指定位置。</p><p>我們可以透過執行 <code>configure</code> 這個檔案來對 Ruby 編譯時的行為做設定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/ruby-2.4.3</div></pre></td></tr></table></figure><p>不同的軟體會有不同的設定選項，如果有興趣的話可以去研究看除了指定資料夾之外還有哪些選擇。</p><blockquote><p>如果沒有跑出任何東西，麻煩回到第二篇（有修正過指令）目前 DigitalOcean 上面的 gcc 似乎只有舊版的 4 但是一樣可以使用。</p></blockquote><p>接下來，就是編譯 Ruby 了，因為 Ruby 採用了大部分 Linux 都會有的 <code>make</code>（類似 <code>rake</code> 可以幫我們自動執行各種指令） 所以我們就不需要另外的去安裝像是 <code>CMake</code> 或者 <code>Ninja</code> 之類的編譯工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure><p>這邊會比較花時間，完成之後我們可以用 <code>install</code> 動作請 <code>make</code> 幫我們放到正確的位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure><p>不過這樣操作實際上是會發生錯誤的，因為 <code>/usr/local</code> 實際上還是所屬 <code>root</code> 我們可以用 <code>sudo</code> 指令提升權限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo make install</div></pre></td></tr></table></figure><p>如此一來就能順利的在系統中把 Ruby 安裝進去了！</p><p>可以透過手動執行 <code>ruby</code> 這個執行檔來確認 <code>ruby</code> 是正確執行的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/ruby-2.4.3/bin/ruby -v</div></pre></td></tr></table></figure><p>如果能看到版本號，就是我們正確的安裝 Ruby 了。不過每次都要指定位置是很不方便的，我們可以透過改變 <code>PATH</code> 環境設定來簡化操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/ruby-2.4.3/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure><p>上面的 <code>export</code> 指令表示「從此之後都套用」後面我們將 <code>/usr/local/ruby-2.4.3/bin</code> 放在原本的 <code>PATH</code> 前面，表示優先從這個目錄開始找。</p><p>如此一來就能用 <code>ruby -v</code> 直接執行 Ruby 進行操作，不過當下次登入 SSH 因為沒有執行這段指令，就會無法使用這個功能。</p><p>如果大部分的情況都會採用 Ruby 2.4.3 的話，可以在 <code>/etc/profile.d</code> 這個資料夾放一個叫做 <code>ruby.sh</code> 的檔案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/profile.d/ruby.sh</div></pre></td></tr></table></figure><p>進入 Vim 後按下 <code>i</code> 進入編輯模式，輸入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=/usr/local/ruby-2.4.3/bin:$PATH</div></pre></td></tr></table></figure><p>在按下 <code>:wq</code> 進行存檔，如此一下下次預設就會採用 Ruby 2.4.3 做為預設的 Ruby 執行了。</p><blockquote><p>在 <code>/etc</code> 目錄下面的變更是對整個伺服器的修改，以後不管是誰打開都會預設使用 Ruby 2.4.3 這點需要注意。</p></blockquote><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇文章花了不少時間在處理編譯上，不過當掌握了編譯的方法後，不論是 Nginx 或者 PHP 還是其他的程式，都能夠用相同的方式編譯出來。</p><p>在遇到無法使用套件的情況下，會是非常有用的技巧。</p><p>下一篇會開始把 Passenger 和 Nginx 安裝起來，因為是透過 Passenger 提供的安裝工具，所以會比這一篇輕鬆很多。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 Turbolinks 時 Google Analytics 並沒有正確運作</title>
      <link>https://blog.frost.tw/posts/2018/03/24/Google-Analytics-not-correct-when-using-turbolinks/</link>
      <guid>https://blog.frost.tw/posts/2018/03/24/Google-Analytics-not-correct-when-using-turbolinks/</guid>
      <pubDate>Sat, 24 Mar 2018 02:28:21 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近因為在&lt;a href=&quot;https://5xruby.tw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;五倍紅寶石&lt;/a&gt;配合同事做官網的 SEO 優化，比較常見的行銷工具像是 Google Analytics 之類的就一起拿出來玩。&lt;/p&gt;
&lt;p&gt;實驗的對象首選當然是自己的網站，不過在調整的時候卻發現有一些情況有點異常。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近因為在<a href="https://5xruby.tw" target="_blank" rel="noopener">五倍紅寶石</a>配合同事做官網的 SEO 優化，比較常見的行銷工具像是 Google Analytics 之類的就一起拿出來玩。</p><p>實驗的對象首選當然是自己的網站，不過在調整的時候卻發現有一些情況有點異常。</p><a id="more"></a><p>當我使用 <a href="https://chrome.google.com/webstore/detail/google-analytics-debugger/jnkmfdileelhofjcijamephohjechhna?hl=zh-TW" target="_blank" rel="noopener">Google Analytics Debugger</a> 去看我的部落格（這個網站）的時候，換頁完全沒有任何事件被紀錄進去。</p><p>很明顯的，這是 Google Analytics 的 PageView 事件沒有被偵測到。而第一個應該要被檢查的，就是很多人在 Ruby on Rails 推出 Turbolinks 因為<strong>不會使用</strong>通常會搶先關掉的這個功能。</p><p>Turbolinks 本身是一個對 UX（使用者體驗）改善的套件，可以將網頁的切換變得比較平順。簡單來說，就是<strong>利用 Ajax 載入</strong>新頁面後，再替換掉改變的內容。</p><p>也就是說，實際上我們並沒有觸發真實的換頁行為。也就不會將 Google Analytics 的 JavaScript 重新讀取，自然就不存在紀錄頁面瀏覽事件（PageView）這件事情。</p><p>解決方案其實很簡單，我們只需要像處理最多人不太熟悉的 jQuery + Turbolinks 無法搭配運作的問題一樣，正確的設定頁面讀取事件即可。</p><p>也就是從普通的綁定 <code>DOMContentLoaded</code> 事件，改為</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery Version</span></div><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'turbolinks:load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Pure JavaScript Version</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'turbolinks:load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>因為 JavaScript 已經正確載入了，所以只需要重新把 Google Analytics 的行為重現出來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'turbolinks:load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ga(<span class="string">'create'</span>, <span class="string">'UA-XXXXXXX'</span>);</div><div class="line">  ga(<span class="string">'set'</span>, <span class="string">'location'</span>, location.pathname);</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>不過，假設還想加上像是 Facebook Pixel 之類的追蹤程式碼，每個都設定大概是找到頭暈。所以比較好的方式，其實是改用 Google Tag Manager 來處理。</p><p>先讓每次 Turbolinks 讀取後，都發送一個自訂事件給 Google Tag Manager 來統一觸發事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'turbolinks:load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> dataLayer !== <span class="string">"undefined"</span> &amp;&amp; dataLayer !== <span class="literal">null</span>) &#123;</div><div class="line">        dataLayer.push(&#123;</div><div class="line">            <span class="string">'event'</span>:<span class="string">'turbolinks:load'</span>,</div><div class="line">            <span class="string">'virtualUrl'</span>: event.data.url</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>接著在 Google Tag Manager 上面新增 Trigger 追蹤 <code>turbolinks:load</code>（這是自訂事件的名字）並把有需要紀錄頁面瀏覽的 Tag 加上這個 Trigger 即可。</p><p>另外現在回去看目前這個使用 Turbolinks 的網站版本，在換上去後轉換率有明顯的往下降，可能就是這個關係。</p><p><img src="https://blog.frost.tw/images/google-analytics-not-correct-when-using-turbolinks/ratio.png" alt="Google Analytics 分析資料"></p><p>最近會再關注一下轉換率有沒有提高，或者跳出率下降之類的。如果跳出率是下降，還是會蠻傷心的 XD</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/24/Google-Analytics-not-correct-when-using-turbolinks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>自由的 Ruby 類別（二）</title>
      <link>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/</link>
      <guid>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/</guid>
      <pubDate>Fri, 23 Mar 2018 09:32:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/&quot;&gt;上一篇文章&lt;/a&gt;已經討論過關於 Ruby 中的類別是怎樣運作的，這篇文章則會來討論如何拓展 Ruby 類別。&lt;/p&gt;
&lt;p&gt;大部分的人寫 Ruby 有很大的原因是因為 Rails 但是上面像是 &lt;code&gt;has_many&lt;/code&gt; 跟 &lt;code&gt;before_action&lt;/code&gt; 這些可以直接在類別上做的事情，很明顯不是 Ruby 內建的，到底是怎麼運作的呢？&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/">上一篇文章</a>已經討論過關於 Ruby 中的類別是怎樣運作的，這篇文章則會來討論如何拓展 Ruby 類別。</p><p>大部分的人寫 Ruby 有很大的原因是因為 Rails 但是上面像是 <code>has_many</code> 跟 <code>before_action</code> 這些可以直接在類別上做的事情，很明顯不是 Ruby 內建的，到底是怎麼運作的呢？</p><a id="more"></a><h2 id="Class-Method"><a href="#Class-Method" class="headerlink" title="Class Method"></a>Class Method</h2><p>我們先來看一段範例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">my_name_is</span><span class="params">(str)</span></span></div><div class="line">     puts str</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"> my_name_is <span class="string">'A'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>到這邊，大家可能已經猜到 <code>has_many</code> 這類 DSL 擴充是怎麼實做出來的。只是，背後的運作原理是什麼？</p><h2 id="Class-Eval"><a href="#Class-Eval" class="headerlink" title="Class Eval"></a>Class Eval</h2><p>上一篇文章我們有提到，下面兩段程式碼會是等價的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">A = Class.new <span class="keyword">do</span></div><div class="line"> <span class="comment"># ...</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 上下兩段都是相同意思</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">  <span class="comment"># ...</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>也因此推測出 <code>class A; end</code> 中間的那個區塊，其實是一個 Block。不過我們並沒有討論這個 Block 是怎麼被運行的。</p><p>在 Ruby 的 <code>Class</code> 類別說明上，針對 <code>Class.new</code> 有提到「If a block is given, it is passed the class object, and the block is evaluated in the context of this class using class_eval.」這一段文字。</p><p>簡單來說，就是中間這段 Block 是透過 <code>class_eval</code> 方法來執行的，所以我們可以再繼續推導出以下的行為。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A = Class.new <span class="keyword">do</span></div><div class="line"> <span class="keyword">attr_accessor</span> <span class="symbol">:name</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>相等於</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span> <span class="keyword">end</span></div><div class="line">A.class_eval &#123; <span class="keyword">attr_accessor</span> <span class="symbol">:name</span> &#125;</div></pre></td></tr></table></figure><h2 id="Instance-Method-of-Class"><a href="#Instance-Method-of-Class" class="headerlink" title="Instance Method of Class"></a>Instance Method of Class</h2><p>至於 <code>attr_accessor</code> 實際上是 <code>Class</code> 類別的實例方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class.instance_methods.<span class="keyword">include</span>?(<span class="symbol">:attr_accessor</span>)</div><div class="line"><span class="comment"># =&gt; false</span></div></pre></td></tr></table></figure><p>怎麼會沒有？實際上 <code>Class</code> 類別已經 <code>include</code> 了 <code>Module</code>，而 <code>attr_accessor</code> 其實是 <code>Module</code> 類別的實例方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Module.private_instance_methods.<span class="keyword">include</span>?(<span class="symbol">:attr_accessor</span>)</div><div class="line"><span class="comment"># =&gt; true</span></div></pre></td></tr></table></figure><p>其實我們在 <code>Class</code> 上用 <code>private_instance_methods</code> 也可以找到 <code>attr_accessor</code> 這個方法，不過這其實是我們思考上的漏洞。因為 <code>attr_accessor</code> 是私有方法，所以我們沒辦法直接在 <code>instance_methods</code> 取得。</p><h2 id="DSL-in-Class"><a href="#DSL-in-Class" class="headerlink" title="DSL in Class"></a>DSL in Class</h2><p>回到正題，關於 <code>has_many</code> 是如何定義的？</p><p>既然我們已經知道：</p><ul><li>所有類別都是 <code>Class</code> 的實例</li><li>定義類別呼叫的是父類別的實例方法</li></ul><p>這樣回到第一個範例的程式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">my_name_is</span><span class="params">(str)</span></span></div><div class="line">    puts str</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>實際上是在定義類別 <code>A</code> 的時候， 同時對叫做 <code>A</code> 的類別 <code>Class</code> 物件實例，動態的追加 <code>my_name_is</code> 這個方法。也因此能夠讓 <code>A</code> 類別在進行 <code>class_eval</code> 的時候，提供 <code>my_name_is</code> 這個方法。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>每一種語言都有其特別的地方，在討論 DSL 的時候 Ruby 也經常會被拿出來討論。主要就是因為 Ruby 擁有這樣的性質，讓我們能夠動態的去定義類別和物件上的行為，進而讓實現 DSL 變的相對的容易。</p><p>雖然是一些相對冷門的知識，不過在必要的時候善用這些技巧可以幫助你用更優雅的方式去寫程式。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>部署你的第一個 Ruby on Rails 網站（二）</title>
      <link>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/</link>
      <guid>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/</guid>
      <pubDate>Fri, 23 Mar 2018 01:15:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;延續&lt;a href=&quot;https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/&quot;&gt;上一篇&lt;/a&gt;文章的內容，我們需要先在伺服器上進行設定，讓伺服器可以正確的安裝 Ruby 環境。如此一來，我們才能夠將 Ruby on Rails 部署到伺服器上面。&lt;/p&gt;
&lt;p&gt;為了完成這些前置作業，我們還需要針對伺服器的設定進行完善的準備才行。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>延續<a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">上一篇</a>文章的內容，我們需要先在伺服器上進行設定，讓伺服器可以正確的安裝 Ruby 環境。如此一來，我們才能夠將 Ruby on Rails 部署到伺服器上面。</p><p>為了完成這些前置作業，我們還需要針對伺服器的設定進行完善的準備才行。</p><a id="more"></a><h2 id="無密碼使用-Sudo"><a href="#無密碼使用-Sudo" class="headerlink" title="無密碼使用 Sudo"></a>無密碼使用 Sudo</h2><p>在完成上一篇的操作後，大家可能會發現用自己的帳號登入伺服器後，使用 <code>sudo</code> 指令是需要輸入密碼的。但是我們再新增使用者的時候，並沒有對這個帳號設定密碼，也因此無法使用。</p><p>一般來說，我們會選擇：</p><ul><li>設定密碼</li><li>讓沒有密碼也可以做 <code>sudo</code></li></ul><p>如果想要設定密碼，我們可以先用 <code>root</code> 連線到伺服器，使用下面的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd elct9620</div></pre></td></tr></table></figure><p>透過 <code>passwd</code> (Password) 指令，針對 <code>elct9620</code> 這個使用者進行密碼設定，如此一來就可以使用密碼來進行 <code>sudo</code> 的動作。</p><p>如果想要使用無密碼的模式，我們可以讓所有屬於 <code>wheel</code> 這個群組的使用者賦予 <code>NOPASSWD</code> 的設定，讓所有指令都可以在不輸入密碼的狀態下使用。</p><p>我們會需要用 Vim 模式進入 <code>sudo</code> 設定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">visudo</div></pre></td></tr></table></figure><p>找下面這行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># %wheel  ALL=(ALL)       NOPASSWD: ALL</span></div></pre></td></tr></table></figure><p>對 <code>#</code> 按 <code>x</code>（Delete）鍵再連續按下 <code>:wq</code> 存檔，就可以把註解刪掉，讓 <code>NOPASSWD</code> 的設定被啟用。</p><p>接下來用自己的帳號 SSH 到伺服器，就可以利用 <code>sudo</code> 下達任何指令，而不需要輸入密碼。</p><blockquote><p>為什麼不直接在 <code>root</code> 狀態下管理，主要是因為使用 <code>sudo</code> 指令可以提醒我們現在做的操作會「影響系統」，同樣的道理也可以適用在關閉密碼確認這件事情上。如何方便的管理伺服器，又不失安全性是作為一名伺服器管理員需要仔細考慮的事情。</p></blockquote><h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>在 Linux 中，沒有任何 GUI（圖形介面）的情況下該如何安裝軟體呢？那就要透過 Linux 的套件管理程式，這跟我們平常使用的 <code>gem</code> 指令類似。如果是使用 Mac 的話也許會用過 Homebrew 來幫忙安裝開發環境，簡單說就是「幫忙安裝軟體」的工具。</p><p>在不同的 Linux 作業系統中，用來安裝套件的工具也有所差異，以下簡單列出幾種我知道的類型。</p><ul><li>RedHat / CentOS / Fedora - <code>yum</code></li><li>Debian / Ubuntu - <code>apt</code>(<code>apt-get</code>)</li><li>Arch Linux - <code>pacman</code></li></ul><p>不同的套件管理工具有不一樣的指令，類似於我們用 <code>gem</code> 和 <code>npm</code> 會有一些指令上的差距一樣，這系列文章使用的 CentOS 是採用 <code>yum</code> 來安裝。不過就使用上的容易程度來說，其實 <code>apt-get</code> 算是比較簡單的，不過這些安裝指令在網路上其實都能找到，即使忘記怎麼使用只要善用 Google 也還是能很快的瞭解怎麼使用。</p><p>為了要能夠在伺服器上運行 Ruby 我們除了可以透過 <code>yum</code> 安裝之外，也能夠自行下載 Ruby 的原始碼來編譯。不同的做法有不同的優缺點，以這次的計畫，我們希望能夠自行管理 Ruby 版本。所以採取自行編譯 Ruby 原始碼的方式來安裝環境，因此我們需要先有可以編譯 Ruby 環境的套件。</p><p>參考 <a href="https://github.com/rbenv/ruby-build/wiki" target="_blank" rel="noopener">rbenv/ruby-build</a> 上面的說明，我們可以透過下面的指令簡單地將編譯 Ruby 所需套件找出來。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc bzip2 openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel</div></pre></td></tr></table></figure><p>上述安裝的 <code>gcc</code> 套件是用來編譯的，而 <code>-devel</code> 結尾的套件是讓程式「編譯」的時候能夠找到原始碼資訊的對應資訊。</p><blockquote><p>一般安裝軟體的時候我們會希望儘可能節省空間，所以只會把 Binary（二進位可執行檔）的部分安裝進來。但是當我想要自行編譯某個程式的時候，就需要有一個參考去對應他的功能，而這些參考（ex. Header）就可以透過 <code>devel</code> 類型的套件來補足。</p></blockquote><p>當執行完成這個指令後，我們就算是準備好編譯 Ruby 了！</p><blockquote><p>如果你使用 AWS EC2 練習的話，上面的指令可能不會運作。因為 Amazon Linux 2 提供支援的 <code>gcc</code> 已經是 <code>gcc-7</code> 了！</p></blockquote><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>到目前為止，我們基本上算是將安裝伺服器的「前置動作」完成。下一篇文章就會正式的開始把 Ruby 和 Passenger 透過最簡單的方式進行手動編譯，將它安裝到我們的伺服器上。</p><p>如此一來，就算是擁有一個可以執行 Ruby 程式的伺服器了！</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>部署你的第一個 Ruby on Rails 網站（一）</title>
      <link>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/</link>
      <guid>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/</guid>
      <pubDate>Tue, 20 Mar 2018 12:44:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近在公司發現其實不少同事都還沒有實際部署過一台伺服器的經驗，在有人負責 DevOps 的情況下，也許真的不太需要。又或者因為還是初級工程師的關係，沒有那個權限可以去安裝一次伺服器。甚至其實一直都使用著 Heroku 或者 AWS CodeDeploy 等服務的便利性，而沒有嘗試自己安裝一次。&lt;/p&gt;
&lt;p&gt;不管是基於甚麼原因，總之先來安裝一次吧！&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近在公司發現其實不少同事都還沒有實際部署過一台伺服器的經驗，在有人負責 DevOps 的情況下，也許真的不太需要。又或者因為還是初級工程師的關係，沒有那個權限可以去安裝一次伺服器。甚至其實一直都使用著 Heroku 或者 AWS CodeDeploy 等服務的便利性，而沒有嘗試自己安裝一次。</p><p>不管是基於甚麼原因，總之先來安裝一次吧！</p><a id="more"></a><h2 id="VPS-主機"><a href="#VPS-主機" class="headerlink" title="VPS 主機"></a>VPS 主機</h2><p>在我學習架站的時候，除了是個窮學生之外，就是伺服器的成本其實相對的高。一個月最低的租用方案至少是 20 美元起跳，能用的資源也不高。</p><p>不過很幸運的是，隨著雲端相關的技術興起，我們現在可以用 5 美元左右就能租到一台適合的 VPS （Virtual Private Server） 主機，來放一些自己寫的小工具，或者個人網站。</p><p>下面推薦幾家台灣開發者比較常用的主機商：</p><ul><li><a href="https://vultr.com/" target="_blank" rel="noopener">Vultr</a></li><li><a href="https://linode.com" target="_blank" rel="noopener">Linode</a></li><li><a href="https://digitalocean.com/" target="_blank" rel="noopener">DigitalOcean</a></li></ul><p>除了 DigitalOcean 沒有東京的機房之外，選擇東京（Tokyo）機房再連線速度上會是最適合的。不過 DigitalOcean 的新加坡機房其實也不慢，如果需要比較多的功能 DigitalOcean 在這方面表現的就相對其他好上很多。</p><blockquote><p>效能表現上都有些微差異，不過者幾家在台灣連線過去的操作大多不會有卡頓的感覺。</p></blockquote><h2 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH Key"></a>SSH Key</h2><p>在把第一台伺服器開始之前，我們要先來談談 <code>SSH</code> 和 <code>SSH Key</code> 這兩個東西。簡單來說 <code>SSH</code> (Secure Shell) 是一種可以讓我們在遠端電腦上執行 Shell （打指令的地方）的工具，透過成對的 <code>SSH Key</code> 來進行加密傳輸。</p><p>目前的 VPS 主機商大多會支援讓我們預先把 Public Key （兩組鑰匙可以公開的那一組）登記到主機商那邊，以便在開啟新伺服器的時候能夠預先的安裝進去。</p><p>下面這個指令在 macOS 或是 Linux 上都可以執行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p>中間會有一些問題，一般來說只要按 Enter 按鍵繼續執行即可。</p><blockquote><p>如果你已經設定過 git 並且能夠上傳到 Github 的話，就代表你已經產生過小心不要覆蓋掉摟！</p></blockquote><p>我們會在下面的路徑得到兩個檔案：</p><ul><li>~/.ssh/id_rsa</li><li>~/.ssh/id_rsa.pub</li></ul><p>其中下面檔名為 <code>id_rsa.pub</code> 的檔案，就是公開的金鑰。在開始之前可以先把他設定到 VPS 主機商自己的帳號上，以利後續的動作。</p><blockquote><p>兩個都是純文字檔案，如果不清楚怎麼複製可以用 <code>cat ~/.ssh/id_rsa.pub</code> 顯示檔案內容後複製。</p></blockquote><h2 id="開設伺服器"><a href="#開設伺服器" class="headerlink" title="開設伺服器"></a>開設伺服器</h2><p>設定上來說參考這張截圖即可。</p><p><img src="https://blog.frost.tw/images/getting-started-deploy-your-ruby-on-rails-part-1/new_droplet.png" alt="DigitalOcean - Create Droplets.png"></p><p>這次我們要用的是 CentOS 這套作業系統，算是我最早接觸架設伺服器的時候所使用的作業系統。原型是 RedHat 這套商用作業系統，可以視為開源版本。</p><p>唯一要注意的是 SSH Key 的部分有確實的被新增進去，現在的伺服器為了安全會盡可能的使用 SSH Keys 來登入，而不是使用密碼。密碼有可能會被猜出來，但是 SSH Key 保存在你的電腦，也不容易直接推算出來，所以相對的安全不少。</p><blockquote><p>圖上的機房位置是選錯的，要記得選成 Singapore（新加坡）操作起來才會比較順暢。</p></blockquote><h2 id="進入伺服器"><a href="#進入伺服器" class="headerlink" title="進入伺服器"></a>進入伺服器</h2><p>當伺服器呈現 Ready 或者其它表示「開機完畢」的狀態時，我們就可以透過顯示在網頁上的 IP 位置來連上伺服器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@172.31.1.1</div></pre></td></tr></table></figure><blockquote><p>上面指令的 <code>172.31.1.1</code> 記得換成你的 IP 位置。</p></blockquote><p>上面推薦的 Vultr、Linode 和 DigitalOcean 預設帳號都會是 <code>root</code>（系統管理員）透過這個帳號，我們就可以進入伺服器進行所有操作。</p><h2 id="建立使用者"><a href="#建立使用者" class="headerlink" title="建立使用者"></a>建立使用者</h2><p>不過，直接使用 <code>root</code> 帳號來操作是非常危險的，所以我們會開設一個屬於自己的帳號，並且透過 <code>sudo</code> （Super User Do）這指令來表示「透過 <code>root</code> 的權力執行指令」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd elct9620 -G wheel</div></pre></td></tr></table></figure><p>上面的指令表示新增一個 <code>elct9620</code> 的使用者，並且加入 <code>wheel</code> 這個群組。</p><blockquote><p><code>wheel</code> 這個群組在 CentOS 7 通常會視為「有權限執行 <code>sudo</code> 指令」的使用者們</p></blockquote><h2 id="透過新使用者登入"><a href="#透過新使用者登入" class="headerlink" title="透過新使用者登入"></a>透過新使用者登入</h2><p>為了要可以透過新使用者登入，我們需要先對這個使用者設定 SSH Key 才行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su - elct9620</div></pre></td></tr></table></figure><p>因為是管理員，所以我們可以用 <code>su</code> (Switch User) 來切換到 <code>elct9620</code> 這個帳號。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.ssh</div></pre></td></tr></table></figure><p>接著透過 <code>mkdir</code>（Make Directory）指令對 <code>elct9620</code> 這個帳號產生儲存 SSH 資訊的資料夾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.ssh/authorized_keys</div></pre></td></tr></table></figure><p>這邊會透過 <code>vim</code> 來編輯檔案，因為操作對入門者有點困難，但是在管理伺服器上的時候卻很方便，所以建議大家至少熟悉可以插入內容。</p><p>按下 <code>i</code> 進入 Insert Mode 後，可以直接用 Ctrl + V 把前面我們複製過的 <code>id_rsa.pub</code> 貼上，之後按 ESC 離開 Insert Mode 再依序按下鍵盤的 <code>:wq</code> 進行 Write and Quit （存檔並離開）</p><p>最後，需要對檔案設定正確的權限（限定自己可以使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 700 ~/.ssh</div><div class="line">chmod 600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure><p>如此一來，我們就可以改成 <code>ssh elct9620@172.31.1.1</code> 來連上伺服器了！</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>到此為止，我們僅是能夠簡單的連上伺服器，並且以正確的使用者來進行操作。距離安裝伺服器還有一段距離，這系列的文章會盡可能的針對操作「詳細」的解釋。如果大家有注意到的話，會發現 Linux 的指令其實是把對應動作的單字重組，透過這樣的方式我們就可以「稍微容易」的記起常用的幾個操作。</p><p>下一篇文章我們會稍微對伺服器做一些簡單的設定，並且熟悉基本操作。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apartment 與 Globalize 隱藏在方便背後的陷阱</title>
      <link>https://blog.frost.tw/posts/2018/03/18/The-easy-way-not-best-way-learn-from-Apartment-and-Globalize/</link>
      <guid>https://blog.frost.tw/posts/2018/03/18/The-easy-way-not-best-way-learn-from-Apartment-and-Globalize/</guid>
      <pubDate>Sun, 18 Mar 2018 15:59:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;手邊有一個專案剛好是需要滿足「多網站」並且每個網站都能夠「多語言切換」這兩個條件，在這兩個解決方案中最好處理的就是 Apartment 和 Globalize 這兩個 Ruby Gem 了。&lt;/p&gt;
&lt;p&gt;不過，在某些情況卻變成了問題。幸好運氣不錯的是還在開發階段，還有辦法將這個問題透過替換 Gem 進行修正。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>手邊有一個專案剛好是需要滿足「多網站」並且每個網站都能夠「多語言切換」這兩個條件，在這兩個解決方案中最好處理的就是 Apartment 和 Globalize 這兩個 Ruby Gem 了。</p><p>不過，在某些情況卻變成了問題。幸好運氣不錯的是還在開發階段，還有辦法將這個問題透過替換 Gem 進行修正。</p><a id="more"></a><p>首先，我們先來大概了解 Apartment 和 Globalize 這兩個 Ruby Gem 是擔任怎樣的任務。</p><h2 id="Apartment"><a href="#Apartment" class="headerlink" title="Apartment"></a>Apartment</h2><p>Apartment 是一個 Multi-Tenancy (多租戶) 的套件，可以協助我們利用同樣的程式碼架設功能完全相同的多個網站。在一般的解決方案來說，就是自動切換連接的資料庫來達成這個效果。</p><p>另外，在 PostgreSQL 中則有 <a href="https://www.postgresql.org/docs/9.5/static/ddl-schemas.html" target="_blank" rel="noopener">Schema</a> 這個機制，可以讓我們在同一個資料庫做出類似 Namespace （命名空間）的效果。</p><p>透過 <code>SET SEARCH_PATH = &#39;site1, public&#39;</code> 的設定後，當我們嘗試 <code>SELECT * FROM users</code> 的時候，就會先去找 <code>site1.users</code> 再去找 <code>public.users</code> （預設）的資料表，這對開發多用戶類型的系統有相當大的優勢。</p><blockquote><p>不過這在大規模的網站（像是 Shopify 之類服務）在 Ruby on Rails 上就不會是個好選擇，會有效能和記憶體上的瓶頸。所以在設計上要考量應用的情境和規模。</p></blockquote><h2 id="Globalize"><a href="#Globalize" class="headerlink" title="Globalize"></a>Globalize</h2><p>Globalize 可以幫助我們對 Model 設定，讓特定幾個欄位的值能夠依照當下 <code>I18n.locale</code> 設定的數值來自動反映出不同語言的呈現。原理上來說其實也相當簡單，他會產生一個 <code>post_translations</code> 資料表，並且記錄語言和需要翻譯的欄位。</p><p>使用方法如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ApplicationRecord</span></div><div class="line">  translates <span class="symbol">:title</span>, <span class="symbol">:content</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>如此一來就能夠自動的呈現出對應的語言（如果有存到對應語言的資料）</p><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><p>會發生問題其實是稍微特殊的案例，因為這個專案需要針對每次的活動產生一個新網站，但是又需要支援多語言。原本想要支援多語言，其實我們可以單純用 Apartment 去開設不同語言的網站。</p><p>但是因為這個「機制」被開設活動網站所佔用，所以我們只好借用 Globalize 的功能來完成多語言的呈現。</p><p>一般的使用上並不會有問題，不過當我們碰到「共用」的資料表（不管在哪個網站都會用這張資料表），就會發生問題。</p><p>因為是多網站，所以需要有一張表儲存目前存在的網站：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Apartment.configure <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line">  config.excluded_models = <span class="string">%w[Site]</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>因為每個網站的名稱都需要有中文和英文版本，所以很自然的補上了翻譯的設定：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> &lt; ApplicationRecord</span></div><div class="line"> translates <span class="symbol">:name</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>還有將 Migration 資訊也設定後，嘗試運行 <code>rake db:migrate</code> <strong>表現上</strong>是正常的。不過這是在<strong>完全沒有 Site 資料</strong>的情況下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">up</span></span></div><div class="line">  Site.create_translation_table!(</div><div class="line">    &#123;</div><div class="line">      <span class="symbol">name:</span> <span class="symbol">:string</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="symbol">migrate_data:</span> <span class="literal">true</span></div><div class="line">  )</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>當我們在做 Migrate 的時候，是不希望遺失資料。所以會將 <code>migrate_data</code> 選項開啟，不過這也造成了第一個我們發現第一個問題——Globalize 生成的 <code>CREATE TABLE</code> 是錯誤的。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>從 Globalize 的<a href="https://github.com/globalize/globalize/blob/master/lib/globalize/active_record/migration.rb#L81" target="_blank" rel="noopener">原始碼</a>可以看到下面這段：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t.references table_name.sub(<span class="regexp">/^<span class="subst">#&#123;table_name_prefix&#125;</span>/</span>, <span class="string">''</span>).singularize, <span class="symbol">:null</span> =&gt; <span class="literal">false</span>, <span class="symbol">:index</span> =&gt; <span class="literal">false</span>, <span class="symbol">:type</span> =&gt; column_type(model.primary_key).to_sym</div></pre></td></tr></table></figure><p>他會依據對應的 Model 來取出 <code>table_name</code> 這個參數，但是 <code>table_name</code> 因為 Apartment 要確保他是切換在正確的網站上，所以會從 <code>sites</code> 變成了 <code>public.sites</code> 來避免出問題。</p><p>基於這樣的設計，原本應該是要叫做 <code>site_id</code> 的欄位名稱，就變成了 <code>public.site_id</code> 存在於資料庫上。當 Globalize 嘗試把原本在 <code>sites</code> 資料表上的 <code>name</code> 欄位複製到翻譯的資料表上時，運行的 SQL 查詢就會恢復正常。</p><p>因為 Apartment 是對資料表層級的調整，所以在這樣的狀態下，在 Ruby on Rails 中的 ActiveRecord 預期會有的 <code>site_id</code> 欄位變成了 <code>public.site_id</code> 就會發生「找不到欄位」的錯誤。</p><p>不過這個問題並沒有想像中的困難，從原始碼可以看到清除 <code>table_name_prefix</code> 的機制。我們可以善加利用這個特性，在執行 Migrate 的階段暫時性的設定 <code>table_name_prefix</code> 在 Model 上就能正常運行。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>不過，當 <code>Site</code> 是跨網站的資料表時，我們也預期 <code>Site::Translation</code> 這個由 Globalize 動態生成的 Model 也應該要是跨網站的（否則 Apartment 會因為沒有指定到共用資料表，而無法取得正確的翻譯資訊。）</p><p>所以我們理所當然的增加了這樣的設定：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Apartment.configure <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line">  config.excluded_models = <span class="string">%w[Site Site::Translation]</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>這時候我們再次執行 <code>rake db:migrate</code> 卻發現出現了「資料表已存在」的錯誤。仔細一看，又是 Globalize 生成錯誤的 <code>CREATE TABLE</code> 查詢。</p><blockquote><p>注意，這是在 Site 有存在資料的情況下，因為 Apartment 在已存在的 Schema 會採取跑 Migrate 的方式更新資料結構。</p></blockquote><p>來去追查原因，原來在產生翻譯資料表 <code>site_translations</code> 的時候，資料表名稱是透過一個叫做 <code>translations_table_name</code> 的方法所定義，而這個方法則源自於 Globalize 對 Model 的擴充。</p><p>從 Globalize <a href="https://github.com/globalize/globalize/blob/master/lib/globalize/active_record/class_methods.rb#L51" target="_blank" rel="noopener">原始碼</a>可以發現：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">translation_class</span></span></div><div class="line">  @translation_class <span class="params">||</span>= <span class="keyword">begin</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.const_defined?(<span class="symbol">:Translation</span>, <span class="literal">false</span>)</div><div class="line">      klass = <span class="keyword">self</span>.const_get(<span class="symbol">:Translation</span>, <span class="literal">false</span>)</div><div class="line">    <span class="keyword">else</span></div><div class="line">      klass = <span class="keyword">self</span>.const_set(<span class="symbol">:Translation</span>, Class.new(Globalize::ActiveRecord::Translation))</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    klass.belongs_to <span class="symbol">:globalized_model</span>,</div><div class="line">      <span class="symbol">class_name:</span> <span class="keyword">self</span>.name,</div><div class="line">      <span class="symbol">foreign_key:</span> translation_options[<span class="symbol">:foreign_key</span>],</div><div class="line">      <span class="symbol">inverse_of:</span> <span class="symbol">:translations</span>,</div><div class="line">      <span class="symbol">touch:</span> translation_options.fetch(<span class="symbol">:touch</span>, <span class="literal">false</span>)</div><div class="line">    klass</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">translations_table_name</span></span></div><div class="line">  translation_class.table_name</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>他會透過剛剛動態生成的 <code>Site::Translation</code> Model 來推斷該用什麼當做資料表的名稱。在正常的狀況下，我們會理所當然的認為是 <code>site_translations</code>。</p><p>不過，我們使用的是 Apartment 來產生多網站的效果，也就是說名稱會變成 <code>site1.site_translations</code> 但是因為我們剛剛又設定了這是一張「共用資料表」所以就被改為 <code>public.site_translations</code> 了。</p><p>到目前為止其實都沒有問題，不過 Apartment 為了讓維護資料表是簡單的，所以實際上每一個網站的資料表會是完全一樣（直接重複所有 Migrate 動作，即使沒用到）</p><p>假設我們有 10 筆 Site 資料，那們就會變成嘗試 <code>CREATE TABLE</code> 10 次 <code>public.site_translations</code> 這個資料表，也就理所當然地會出現「資料表已存在」的錯誤。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>身為 Ruby on Rails 開發者，我們通常習慣於採取「已知可行」的現有解決方案，透過社群的力量共同維護一份穩定的套件來對應各種不同的情況。也因此，我們經常性地將很多細節封裝起來，造成許多人並不了解其底層的運作原理。</p><p>這也是為什麼會踩到這個陷阱的原因，因為即使是兩個知名的 Ruby Gem 兩邊的團隊也不見得會預想到「有人會想這樣使用」也不會去採取對應的措施。</p><p>可以的話，盡可能的進行事前的評估和測試（雖然本文的案例其實有點極端），就可以避免不少方法。</p><blockquote><p>最後的解法是替換成使用 PostgreSQL JSON 欄位特性的 Gem 避開產生新資料表的問題，更換後的成本需要擔心的大概是 SQL 查詢受影響的程度。</p></blockquote>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/18/The-easy-way-not-best-way-learn-from-Apartment-and-Globalize/#disqus_thread</comments>
    </item>
    
    <item>
      <title>管理 Ruby on Rails 外部 Assets 的小技巧</title>
      <link>https://blog.frost.tw/posts/2018/03/18/A-tips-for-manage-ruby-on-rails-s-vendor-assets/</link>
      <guid>https://blog.frost.tw/posts/2018/03/18/A-tips-for-manage-ruby-on-rails-s-vendor-assets/</guid>
      <pubDate>Sun, 18 Mar 2018 08:53:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;在工作的時候經常會需要套用一些佈景主題，主要大多是因為客戶還在 MVP (最小可行產品) 的階段，只需要可以表現其商業價值運作的系統即可。不過，如果我們依照 Ruby on Rails 預設的方式把外部的佈景相關檔案分類後放到 &lt;code&gt;vendor/assets&lt;/code&gt; 目錄下，反而會變得難以管理。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在工作的時候經常會需要套用一些佈景主題，主要大多是因為客戶還在 MVP (最小可行產品) 的階段，只需要可以表現其商業價值運作的系統即可。不過，如果我們依照 Ruby on Rails 預設的方式把外部的佈景相關檔案分類後放到 <code>vendor/assets</code> 目錄下，反而會變得難以管理。</p><a id="more"></a><p>一般來說，我們在一些佈景主題網站上購買的佈景，如果狀況不錯的話一般都會有以下這些資料夾。</p><ul><li><code>css</code> （或 <code>stylesheets</code>）</li><li><code>js</code> (或 <code>javascripts</code>)</li><li><code>img</code> (或 <code>images</code>)</li></ul><p>不過，如果把這些目錄分別的放到 <code>vendor/assets</code> 下面的話，佈景主題要更新的時候會出現問題。而當我們需要支援多套佈景主題的時候，也會受到限制。</p><p>所以，相對應的處理方式是透過直接將完整的目錄放到 <code>vendor</code> 目錄下。</p><p>舉例來說，假設有一個佈景主題叫做 <code>material</code> 我們就放到 <code>vendor/material</code> 這個位置，裡面則包含了前面提到的三種目錄。</p><p>路徑就會變成像這樣：</p><ul><li><code>vendor/material/css</code></li><li><code>vendor/material/js</code></li><li><code>vendor/material/images</code></li></ul><p>在 Rails 5 之後，為了能夠支援 Webpack 來進行前端相關的編譯，會增加 <code>config/initializers/assets.rb</code> 這個檔案。</p><p>我們就可以透過這個檔案對這些目錄設定，讓 Ruby on Rails 上的 Assets Pipeline 可以正確地讀取到。</p><p>只要對 <code>config/initialize/assets.rb</code> 做一些設定。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add additional assets to the asset load path.</span></div><div class="line">Rails.application.config.assets.paths += [</div><div class="line">  Rails.root.join(<span class="string">'vendor'</span>, <span class="string">'material'</span>, <span class="string">'css'</span>),</div><div class="line">  Rails.root.join(<span class="string">'vendor'</span>, <span class="string">'material'</span>, <span class="string">'js'</span>),</div><div class="line">  Rails.root.join(<span class="string">'vendor'</span>, <span class="string">'material'</span>, <span class="string">'images'</span>)</div><div class="line">]</div></pre></td></tr></table></figure><p>這種類型的情況是用在網站只需要套用一種佈景主題，所以我們可以明確地把 CSS / JS 等路徑都完整的指定出來，如此一來在 <code>application.css</code> 和 <code>application.js</code> 就可以透過下面這樣的方式將它讀取進來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// application.js</span></div><div class="line"><span class="comment">//= require jquery.select2.js</span></div></pre></td></tr></table></figure><p>未來假設佈景主題需要更新，我們就可以透過刪除以及重新放置 <code>vendor/material</code> 目錄的方式來更動，而不容易和其他外部的 Assets 混在一起，而變得難以處理。</p><p>這算是一個蠻實用的小技巧，在開發網站的時候要如何讓原始碼乾淨以及相依的套件容易維護一直都是個值得討論的題目。之後也會不時的更新 Ruby on Rails 的小技巧，除了因為最近太久沒有寫網誌之外。就是發現如果想分享一些很有趣的技術文章，還需要先讓讀者能夠透過過去的文章資料，一步步的了解脈絡才行。</p><p>也因此，會先累積一部分偏向入門者的文章，來幫助讀者瞭解其他文章的背景是怎樣的狀況，才會採取這樣的行動或者做法。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/03/18/A-tips-for-manage-ruby-on-rails-s-vendor-assets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ruby 中該如何 Raise 一個錯誤</title>
      <link>https://blog.frost.tw/posts/2018/01/09/How-ruby-raise-an-error/</link>
      <guid>https://blog.frost.tw/posts/2018/01/09/How-ruby-raise-an-error/</guid>
      <pubDate>Tue, 09 Jan 2018 09:28:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;前幾天的晚上朋友在 Facebook 上問了一個問題。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;raise HTTPError, &lt;span class=&quot;string&quot;&gt;&#39;Not Found&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;raise HTTPError.new(&lt;span class=&quot;string&quot;&gt;&#39;Not Found&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;哪個比較快？也因為這樣，我們意外的發現 Ruby 對上面兩段程式碼的定義上其實是不太一樣的。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>前幾天的晚上朋友在 Facebook 上問了一個問題。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">raise HTTPError, <span class="string">'Not Found'</span></div></pre></td></tr></table></figure><p>和</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">raise HTTPError.new(<span class="string">'Not Found'</span>)</div></pre></td></tr></table></figure><p>哪個比較快？也因為這樣，我們意外的發現 Ruby 對上面兩段程式碼的定義上其實是不太一樣的。</p><a id="more"></a><p>在 Ruby 中 <code>raise</code> 一般情況下有以下幾種運作方式。</p><h2 id="預設情況"><a href="#預設情況" class="headerlink" title="預設情況"></a>預設情況</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Case 1</span></div><div class="line">raise <span class="comment"># =&gt; #&lt;RuntimeError&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Case 2</span></div><div class="line">raise <span class="string">'NotFound'</span> <span class="comment"># =&gt; #&lt;RuntimeError: "Not Found"&gt;</span></div></pre></td></tr></table></figure><h2 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Case 3</span></div><div class="line">raise HTTPError, <span class="string">'Not Found'</span></div><div class="line"></div><div class="line"><span class="comment"># Case 4</span></div><div class="line">raise HTTPError.new(<span class="string">'Not Found'</span>)</div></pre></td></tr></table></figure><p>不過，上面這兩段程式碼的差異在哪裡呢？從 Ruby 的原始碼可以看到 <code>.new</code> 的行為會多做一次檢查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> VALUE</span></div><div class="line"><span class="title">make_exception</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> VALUE *argv, <span class="keyword">int</span> isstr)</span></div><div class="line">&#123;</div><div class="line">    VALUE mesg, exc;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    mesg = Qnil;</div><div class="line">    <span class="keyword">switch</span> (argc) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        exc = argv[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span> (NIL_P(exc))</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// 檢查了是否為字串</span></div><div class="line">        <span class="keyword">if</span> (isstr) &#123;</div><div class="line">            mesg = rb_check_string_type(exc);</div><div class="line">            <span class="keyword">if</span> (!NIL_P(mesg)) &#123;</div><div class="line">                mesg = rb_exc_new3(rb_eRuntimeError, mesg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        n = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 繼續跟 raise HTTPError, 'Not Fonud' 一樣的行為</span></div><div class="line">        <span class="keyword">goto</span> exception_call;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        exc = argv[<span class="number">0</span>];</div><div class="line">        n = <span class="number">1</span>;</div><div class="line">      exception_call:</div><div class="line">        mesg = rb_check_funcall(exc, idException, n, argv+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (mesg == Qundef) &#123;</div><div class="line">            rb_raise(rb_eTypeError, <span class="string">"exception class/object expected"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        rb_check_arity(argc, <span class="number">0</span>, <span class="number">3</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!rb_obj_is_kind_of(mesg, rb_eException))</div><div class="line">            rb_raise(rb_eTypeError, <span class="string">"exception object expected"</span>);</div><div class="line">        <span class="keyword">if</span> (argc &gt; <span class="number">2</span>)</div><div class="line">            set_backtrace(mesg, argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> mesg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>從這個角度看，我們會發現差異其實只是「多一次檢查」的程度，甚至不太影響運行的效能。不過從 <a href="ruby-doc.com/docs/ProgrammingRuby/html/tut_exceptions.html">Programming Ruby</a> 這本書中的範例，卻發現了一個稍微意想不到的使用方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span><span class="params">(socket)</span></span></div><div class="line">  data = socket.read(<span class="number">512</span>)</div><div class="line">  <span class="keyword">if</span> data.<span class="literal">nil</span>?</div><div class="line">    raise RetryException.new(<span class="literal">true</span>), <span class="string">"transient read error"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="comment"># .. normal processing</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="keyword">begin</span></div><div class="line">  stuff = readData(socket)</div><div class="line">  <span class="comment"># .. process stuff</span></div><div class="line"><span class="keyword">rescue</span> RetryException =&gt; detail</div><div class="line">  <span class="keyword">retry</span> <span class="keyword">if</span> detail.okToRetry</div><div class="line">  raise</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>仔細一看，明明應該是 <code>@message</code> 的數值，被放入了非字串的數值，而且這個錯誤還提供了 <code>#okToRetry</code> 這樣的方法讓我們可以獲取到這個數值。</p><p>回到剛剛 Ruby 中 <code>make_exception</code> 的原始碼，在 2 ~ 3 個參數的情況下，回傳的 <code>mesg</code> 變數是透過呼叫一個透過 <code>idException</code> 指標定義的方法來產生的，而傳入的參數剛好是 <code>raise</code> 的第二個參數。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="number">2</span>:</div><div class="line"> <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">   exc = argv[<span class="number">0</span>];</div><div class="line">   n = <span class="number">1</span>;</div><div class="line"> exception_call:</div><div class="line">   mesg = rb_check_funcall(exc, idException, n, argv+<span class="number">1</span>); <span class="comment">// 呼叫 idException 指標對應的某個方法</span></div><div class="line">   <span class="keyword">if</span> (mesg == Qundef) &#123;</div><div class="line">       rb_raise(rb_eTypeError, <span class="string">"exception class/object expected"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">break</span>;</div></pre></td></tr></table></figure><blockquote><p><code>idException</code> 對應的其實是呼叫物件上的 <code>#exception</code> 方法，是所有 <code>Error</code> 類型物件必須存在的方法。</p></blockquote><p>也就是說，實際上我們可以讓我們的 <code>Error</code> 附帶一些額外資訊，在一些情況下處理錯誤的時候可以用來輔助我們。</p><p>不過，既然第一個參數已經被我們自訂的錯誤資訊替換了，那麼 Ruby 是怎麼設定錯誤訊息的？</p><p>實際上，在 <code>idException</code> 對應的 <code>#exception</code> 方法上，會複製現有的物件，件並且把錯誤訊息放進去。</p><p>在 <code>#exception</code> 的原始碼是這樣實作的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> VALUE</span></div><div class="line"><span class="title">exc_exception</span><span class="params">(<span class="keyword">int</span> argc, VALUE *argv, VALUE self)</span></div><div class="line">&#123;</div><div class="line">    VALUE exc;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argc == <span class="number">0</span>) <span class="keyword">return</span> self;</div><div class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span> &amp;&amp; self == argv[<span class="number">0</span>]) <span class="keyword">return</span> self;</div><div class="line">    exc = rb_obj_clone(self);</div><div class="line">    exc_initialize(argc, argv, exc);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exc;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> VALUE</span></div><div class="line"><span class="title">exc_initialize</span><span class="params">(<span class="keyword">int</span> argc, VALUE *argv, VALUE exc)</span></div><div class="line">&#123;</div><div class="line">    VALUE arg;</div><div class="line"></div><div class="line">    rb_scan_args(argc, argv, <span class="string">"01"</span>, &amp;arg);</div><div class="line">    rb_ivar_set(exc, id_mesg, arg);</div><div class="line">    rb_ivar_set(exc, id_bt, Qnil);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exc;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也就是說，我們實際上 <code>raise</code> 出來的例外，其實是被重新修改過的，不過這也讓我們在使用 Ruby 的錯誤上可以更加的彈性。</p><p>這也是為什麼像是 Rubocop 之類的軟體，會建議使用下面這種方式產生錯誤的原因。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">raise NotFoundError</div><div class="line"></div><div class="line">raise NotFoundError, <span class="string">'Current page is unavailable'</span></div></pre></td></tr></table></figure><blockquote><p>關於 <code>#exception</code> 的部分感謝五倍的同事在討論的時候提出來，才發現還有後續的處理將 <code>#message</code> 設定上去。</p></blockquote>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2018/01/09/How-ruby-raise-an-error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Stripe 的 Idempotency Key 設計機制</title>
      <link>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/</link>
      <guid>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/</guid>
      <pubDate>Mon, 30 Oct 2017 14:46:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;週末看到一篇 Stripe 工程師所寫的文章，是一篇關於 Idempotency Key （幂等鍵）的設計機制。因為是一篇非常棒的文章，而且裡面的概念除了可以應用在 API 設計之外，很多程式設計上需要解決的問題都可以透過這個概念來處理。&lt;/p&gt;
&lt;p&gt;原文非常的長而且很詳細，這篇文章只會做簡單的重點整理。&lt;/p&gt;
&lt;p&gt;有興趣的話可以打開&lt;a href=&quot;https://brandur.org/idempotency-keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;來讀，是一篇很有用的文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者是很厲害的工程師，部落格上的文章都是非常精實的技術文。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>週末看到一篇 Stripe 工程師所寫的文章，是一篇關於 Idempotency Key （幂等鍵）的設計機制。因為是一篇非常棒的文章，而且裡面的概念除了可以應用在 API 設計之外，很多程式設計上需要解決的問題都可以透過這個概念來處理。</p><p>原文非常的長而且很詳細，這篇文章只會做簡單的重點整理。</p><p>有興趣的話可以打開<a href="https://brandur.org/idempotency-keys" target="_blank" rel="noopener">原文</a>來讀，是一篇很有用的文章。</p><blockquote><p>作者是很厲害的工程師，部落格上的文章都是非常精實的技術文。</p></blockquote><a id="more"></a><p>在 API 的設計中，我們可能會遭遇到一些問題而讓操作失敗。像是<code>網路連線中斷</code>、<code>第三方服務異常</code>等等情況，此時就會需要客戶端進行重新嘗試的動作。</p><p>不過，如果是類似於 Stripe 這類金流服務，我們就不得不重視「重新呼叫」的問題，也就是「如果重複扣款」該怎麼處理，這就是 Idempotency Key 機制的由來。</p><blockquote><p>目前中文對「Idempotency Key 」是叫做幂等鍵，而 Stripe 表示這是他們自己發明的詞，所以後面都以原文稱呼。</p></blockquote><h2 id="Idempotency-Key-是什麼？"><a href="#Idempotency-Key-是什麼？" class="headerlink" title="Idempotency Key  是什麼？"></a>Idempotency Key  是什麼？</h2><p>所以 Idempotency Key 到底是什麼？簡單來說就是一種類似於 ID 的機制，用來區分某個 API 請求是同一個。</p><p>像是下面這個 API 請求，就會帶有 Idempotency Key 的 Header 來表示是哪個請求。</p><blockquote><p>POST /api/chargs<br>…<br>Idempotency-Key: 0ccb7813-e63d-4377-93c5-476cb93038f3<br>…<br>amount=100&amp;currency=TWD</p></blockquote><p>同時，也會透過驗證傳入的 <code>amount</code> 和 <code>currency</code> 等「參數」來確保同一個 API 請求的內容是完全相同的。</p><h2 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h2><p><a href="https://brandur.org/idempotency-keys" target="_blank" rel="noopener">原文</a>中用「火箭背包版 Uber」的範例專案來實作，在 Stripe 的 Github 上面可以找到原始碼。</p><p>這個 App 會在你發射火箭後向你收費，中間會有幾個步驟。</p><ul><li>產生駕駛紀錄</li><li>向 Stripe 呼叫收費 API</li><li>更新駕駛紀錄</li><li>透過 Mailgun 發送收據</li></ul><p>加入 Idempotency Key 機制之後，則會轉變成這樣。</p><ul><li>產生 Idempotency Key</li><li>產生駕駛紀錄</li><li>產生「駕駛紀錄產生」的操作記錄</li><li>向 Stripe 呼叫收費 API</li><li>更新駕駛紀錄</li><li>透過 Mailgun 發送收據</li><li>更新 Idempotency Keys</li></ul><p>看起來多了一些東西，但是這些的影響是怎樣的呢？</p><blockquote><p>原文有繪製成圖片，對照的時候會比較方便。</p></blockquote><h3 id="Idempotency-Key"><a href="#Idempotency-Key" class="headerlink" title="Idempotency Key"></a>Idempotency Key</h3><p>首先，我們需要一個 Idempotency Keys 表來紀錄最近的 API 操作。</p><table><thead><tr><th>Column</th><th>Type</th></tr></thead><tbody><tr><td><strong>idempotency_key</strong></td><td>TEXT (max length &lt;= 100)</td></tr><tr><td><strong>locked_at</strong></td><td>datetime</td></tr><tr><td></td></tr><tr><td><strong>request_method</strong></td><td>TEXT (max length &lt;= 100)</td></tr><tr><td><strong>request_params</strong></td><td>JSONB</td></tr><tr><td><strong>request_path</strong></td><td>TEXT (max length &lt;= 100)</td></tr><tr><td></td></tr><tr><td><strong>response_code</strong></td><td>INTEGER</td></tr><tr><td><strong>response_body</strong></td><td>JSONB</td></tr><tr><td><strong>recovery_point</strong></td><td>TEXT (max length &lt;= 100)</td></tr><tr><td><strong>user_id</strong></td><td>BIGINT</td></tr></tbody></table><blockquote><p>UNIQUE INDEX (idempotency_key, user_ud)</p></blockquote><p>PS. 上面只列了比較重要的欄位。</p><p>首先，我們要確定我們有一組 Key 他可能是 UUID 或者其他形式，因為是跟 <code>user_id</code> 綁定在一起的，所以實際上交給 Client 生成似乎也不影響 API 的操作。</p><p>接下來我們要儲存這次 API 操作的完整資訊，這是用來<strong>確認是相同 API 操作</strong>的保護機制。</p><p>最後是在這個 API 操作完成後，不論成功失敗都紀錄操作的結果。如果再次收到相同的 API 查詢時，我們可以回復完全樣的結果給這個呼叫者，達到快取的效果。</p><p>比較特別的是 <code>recovery_point</code> 這個欄位，為什麼會有這個欄位呢？</p><p>因為在前面我們可能會在 Stripe 扣款或者 Mailgun 發信時發生錯誤，此時就可以讓 API 從這一個操作步驟重新開始，而不會影響到原本已經成功地操作。</p><blockquote><p>原文裡面有提到資料庫的原子性，而這個就是為了讓我們的 API 也擁有原子性。</p></blockquote><h3 id="其他資料表"><a href="#其他資料表" class="headerlink" title="其他資料表"></a>其他資料表</h3><p>主角  Idempotency Keys 介紹完之後，還有像是騎乘資料表、操作紀錄等等，就不另外介紹。</p><p>只是需要注意的是，被操作的「騎乘紀錄」表中，會對應某一個  Idempotency Key 來提供查詢，畢竟不一定是每一次的 API 操作都是一次性成功的，此時就要透過這個  Idempotency Key 來找回正在操作的騎乘紀錄。</p><blockquote><p>反過來說，如果資料表上的  Idempotency Key 是有值得狀況下，就代表有其他人正在操作。也可以被視為一種「上鎖」的機制。</p></blockquote><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>原作提供了一個方法的實作，來輔助每一個原子操作。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">atomic_phase</span><span class="params">(key, &amp;block)</span></span></div><div class="line">  error = <span class="literal">false</span></div><div class="line">  <span class="keyword">begin</span></div><div class="line">    DB.transaction(<span class="symbol">isolation:</span> <span class="symbol">:serializable</span>) <span class="keyword">do</span></div><div class="line">      ret = block.call</div><div class="line">      <span class="comment"># 根據 block 傳回值產生回應</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">rescue</span></div><div class="line">     error = <span class="literal">true</span></div><div class="line">    <span class="comment"># 處理各種錯誤</span></div><div class="line">  <span class="keyword">ensure</span></div><div class="line">      <span class="keyword">if</span> error &amp;&amp; key.present?</div><div class="line">        <span class="keyword">begin</span></div><div class="line">          key.update(<span class="symbol">locked_at:</span> <span class="literal">nil</span>)</div><div class="line">          <span class="comment"># 操作失敗，解鎖</span></div><div class="line">        <span class="keyword">rescue</span></div><div class="line">          <span class="comment"># 無法解鎖（記錄到 Log 中）</span></div><div class="line">        <span class="keyword">end</span> </div><div class="line">      <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>原文中定義了三種回應：</p><ul><li>NoOp - 不做事（初次產生）</li><li>RecoveryPoint - 更新紀錄點（原子操作成功）</li><li>Response - 回應（API 操作完全成功）</li></ul><h3 id="Idempotency-Key-初始化"><a href="#Idempotency-Key-初始化" class="headerlink" title="Idempotency Key 初始化"></a>Idempotency Key 初始化</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">key = <span class="literal">nil</span></div><div class="line">atomic_phase(key) <span class="keyword">do</span></div><div class="line">  key = IdempotencyKey.find_by(<span class="symbol">user_id:</span> current_user.id, <span class="symbol">idempotency_key:</span> params[<span class="symbol">:key</span>])</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> key</div><div class="line">    <span class="comment"># 1. 檢查 params 是否一致</span></div><div class="line">    <span class="comment"># 2. 檢查上鎖時間是否超時（時間內回傳操作中錯誤）</span></div><div class="line">    <span class="comment"># 3. 操作如果未完成，更新上鎖時間</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="comment"># 產生新的 Idempotency Key</span></div><div class="line">    <span class="comment"># `locked_at` 是現在時間（因為是馬上開始操作，所以立刻上鎖）</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>透過上述的程式碼，我們可以產生出一把需要使用的 key 供我們使用。並且在每次 API 呼叫時，確保上一次的 API 操作不會被影響，而運行過久的時候又可以透過從客戶端的 API 重新請求延續原本的操作直到完成。</p><h3 id="後續操作"><a href="#後續操作" class="headerlink" title="後續操作"></a>後續操作</h3><p>有了初始的 Idempotency Key 之後，就可以繼續把後面的 API 行為完成。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">loop <span class="keyword">do</span></div><div class="line">  <span class="keyword">case</span> key.recovery_point</div><div class="line">  <span class="keyword">when</span> RECOVER_POINT_START</div><div class="line">    atomic_phase(key) <span class="keyword">do</span></div><div class="line">      <span class="comment"># ...</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">when</span> RECOVERY_POINT_RIDE_CREATED</div><div class="line">    atomic_phase(key) <span class="keyword">do</span></div><div class="line">      <span class="comment"># ...</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">when</span> RECOVERY_POINT_FINISHED</div><div class="line">    <span class="keyword">break</span></div><div class="line">  <span class="comment">#...</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="comment"># 未知的 RecoveryPoint 丟出錯誤</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 回傳結果</span></div></pre></td></tr></table></figure><p>如此一來，我們就可以將每一個 API 的細部操作都切割成一個「原子」並且建構一個可恢復並且繼續運行的 API 了。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這篇文章省略了不少細節，指把重點的部分拉出來討論，可以的話還是希望大家能去閱讀原文（雖然很長）</p><p>簡單來說，這個機制讓我們可以得到：</p><ul><li>不怕重複呼叫的 API 服務</li><li>呼叫失敗也可以恢復運作</li><li>能夠有效的定位 API 運作問題發生的時機點</li></ul><p>除此之外，文章最後還有提到一些像是「完成器」的技巧。</p><blockquote><p>完成器是因為有些用戶端達到重試最大次數後，就會放棄運行。此時這些「即將完成」的操作就會變得無法完成，所以由伺服器定時拉出來重現 API 操作讓這個 API 操作得以完全完成。</p></blockquote><p>另一方面，這個機制可以應用在很多地方。像是表單送出的時候，用來檢查是不是重複表單的送出等等，雖然是以 API 設計的方式呈現，但是背後的概念卻非常值得思考，我們如何讓程式能夠更加的健壯。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 PostgreSQL 中使用遞迴查詢來找尋父節點</title>
      <link>https://blog.frost.tw/posts/2017/10/23/Use-PostgreSQL-s-recursive-query-to-find-ancestors/</link>
      <guid>https://blog.frost.tw/posts/2017/10/23/Use-PostgreSQL-s-recursive-query-to-find-ancestors/</guid>
      <pubDate>Mon, 23 Oct 2017 10:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;老爸的公司在去年設計了一個紅利積點的消費回饋機制，裡面採用了樹狀的結構。用來改善傳統多層次傳銷造成的下線提供好處給上線，而下線卻需要去找更多下線來獲取回饋的異常機制。&lt;/p&gt;
&lt;p&gt;不過這個設計有一個問題，就是他比傳統的樹成長的速度還會再更快些。也就表示在 Rails 裡面現有用來解決樹狀結構的一些套件並不適合使用。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>老爸的公司在去年設計了一個紅利積點的消費回饋機制，裡面採用了樹狀的結構。用來改善傳統多層次傳銷造成的下線提供好處給上線，而下線卻需要去找更多下線來獲取回饋的異常機制。</p><p>不過這個設計有一個問題，就是他比傳統的樹成長的速度還會再更快些。也就表示在 Rails 裡面現有用來解決樹狀結構的一些套件並不適合使用。</p><a id="more"></a><p>建構一個樹狀結構，一般在資料庫中會這樣設計。</p><table><thead><tr><th>id</th><th>name</th><th>parent_id</th></tr></thead><tbody><tr><td>1</td><td>Jimmy</td><td></td></tr><tr><td>2</td><td>John</td><td>1</td></tr><tr><td>3</td><td>Alice</td><td>1</td></tr><tr><td>4</td><td>Alex</td><td>2</td></tr></tbody></table><p>在指查詢一代的情況下，可以直接使用 Rails 的 <code>belongs_to</code> 和 <code>has_many</code> 來解決。</p><p>但是如果想知道 <code>Alex</code> 的父代有哪些，就必須先找到 <code>John</code> 再繼續往回找。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ancestors</span><span class="params">(user, path = [])</span></span></div><div class="line">  <span class="keyword">return</span> path <span class="keyword">if</span> user.parent.<span class="literal">nil</span>?</div><div class="line">  path &lt;&lt; user.parent</div><div class="line">  ancestors(user.parent, path)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">ancestors(User.find_by(<span class="symbol">name:</span> <span class="string">'Alex'</span>))</div><div class="line"><span class="comment"># =&gt; [User&lt;<span class="doctag">@name</span>="John"&gt;, User&lt;<span class="doctag">@name</span>="Jimmy"&gt;]</span></div></pre></td></tr></table></figure><p>很明顯的，這會執行 N 次的 SQL 查詢，稍微有經驗就會注意到這樣是非常沒有效率的。</p><p>於是，就會出現幾種常見的解法。</p><ul><li>Adjacency List</li><li>Path Enumeration</li><li>Nested Sets</li><li>Closure Table</li></ul><p>關於上述這幾種解法的說明，可以參考 Percona 這<a href="https://www.slideshare.net/billkarwin/models-for-hierarchical-data" target="_blank" rel="noopener">這份簡報</a>。</p><h2 id="Closure-Table"><a href="#Closure-Table" class="headerlink" title="Closure Table"></a>Closure Table</h2><p>在 Rails 中，速度最快的是 Closure table 這個解法，可以使用 <code>closure_tree</code> gem 來實作，不過在文章一開始描述的情境，卻是一個噩夢。</p><ul><li>每個交易是一個節點</li><li>回饋會往上追溯（但不往下）</li><li>節點的世代增長會很快</li><li>樹可以無限成長</li></ul><p>而 Closure table 是空間換時間的方法，所以假設當發展到 300,00 代的時候，因為 Closure Tree 會把每一個節點跟所有父代做一次關聯來加速查詢，所以在第 300,00 代基本上是需要插入 <code>300,00 - 1</code> 條紀錄的。</p><p>所以，這個解法會在後期出現效能貧頸。</p><h2 id="Path-Enumeration"><a href="#Path-Enumeration" class="headerlink" title="Path Enumeration"></a>Path Enumeration</h2><p>在 PostgreSQL 內，有一個叫做 <code>ltree</code> 的 Extension 可以使用。</p><p>因為紅利回饋的往回追溯會有極限制，畢竟是基於交易的金額來計算可用的回饋，所以受到影響的父代是有限的。</p><p>在 Path Enumeration 的特性中，是利用建立「路徑」來記錄的。</p><table><thead><tr><th>id</th><th>name</th><th>path</th></tr></thead><tbody><tr><td>1</td><td>Jimmy</td><td></td></tr><tr><td>2</td><td>John</td><td>Jimmy</td></tr><tr><td>3</td><td>Alice</td><td>Jimmy</td></tr><tr><td>4</td><td>Alex</td><td>Jimmy.John</td></tr></tbody></table><p>也就是說，當 <code>Alex</code> 想知道有多少父代只需要從 <code>path</code> 這個 <code>ltree</code> 類型的欄位下查詢就可以了！</p><p>這個解法看起來一切完美，但是卻有一個問題。</p><blockquote><p>欄位的內容有上限，也就是說當發展到一定的世代到達極限後，就無法再繼續下去。</p></blockquote><p>這很適合用來儲存多層的文章分類，但是卻不適合無限成長的樹。</p><h3 id="限制世代數"><a href="#限制世代數" class="headerlink" title="限制世代數"></a>限制世代數</h3><p>不論是 Closure Table 或者 Path Enumeration 的情況，其實只要限制紀錄的世代數就可以解決這個問題。</p><blockquote><p>畢竟追訴的世代有上限，只要存需要的部分就好了！</p></blockquote><p>這個方法聽起來不錯，不過對 Path Enumeration 來說，當 Path 不完整的時候，查詢就會失去準確度（無法用標準的 Path 查詢去問路徑）</p><p>至於 Closure Table 看似這樣做是沒有問題的，但是一樣會失去關於深度的正確數值。</p><p>在考慮一些細節之後，發現這並不是恰當的方法。</p><h2 id="Adjacency-List"><a href="#Adjacency-List" class="headerlink" title="Adjacency List"></a>Adjacency List</h2><p>回到 Adjacency List 的方法上，在 Rails 中使用會產生類似下面的 SQL 查詢。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">4</span>;</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</div><div class="line">...</div></pre></td></tr></table></figure><p>一般來說我們應該用 <code>WHERE id IN(1, 2, 3)</code> 來查詢才對。</p><p>在這邊 PostgreSQL 提供了叫做 Recursive Query 的功能，官網的範例長這樣。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WITH RECURSIVE t(n) AS (</div><div class="line">    VALUES(1)</div><div class="line">  UNION ALL</div><div class="line">    <span class="keyword">SELECT</span> n+<span class="number">1</span> <span class="keyword">FROM</span> t</div><div class="line">    <span class="keyword">WHERE</span> n &lt; <span class="number">100</span></div><div class="line">)</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(n) <span class="keyword">FROM</span> t;</div></pre></td></tr></table></figure><p>然後就可以做出 1 + 2 + … + 100 的效果。</p><p>在 Ruby, PHP, JavaScript 等語言中，遞迴已經不容易理解，在 SQL 中實現這件事情，其實也並不容易。</p><p>先來理解一下範例的意思。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">WITH RECURSIVE 遞迴結果表(回傳欄位) AS (</div><div class="line">    初始值</div><div class="line">  UNION ALL</div><div class="line">    遞迴查詢</div><div class="line">)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 遞迴結果表;</div></pre></td></tr></table></figure><p>也就是說，官網範例的 SQL 是給了初始值 <code>1</code> 並且不斷的 <code>SELECT n + 1</code> 後重新呼叫自己，直到 <code>n &lt; 100</code> 才停止。</p><h3 id="建構-SQL-查詢"><a href="#建構-SQL-查詢" class="headerlink" title="建構 SQL 查詢"></a>建構 SQL 查詢</h3><p>接下來，以這張表來建構查詢。</p><table><thead><tr><th>id</th><th>name</th><th>parent_id</th></tr></thead><tbody><tr><td>1</td><td>Jimmy</td><td></td></tr><tr><td>2</td><td>John</td><td>1</td></tr><tr><td>3</td><td>Alice</td><td>1</td></tr><tr><td>4</td><td>Alex</td><td>2</td></tr></tbody></table><p>按照前面的原則，撰寫下面這張表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">WITH RECURSIVE ancestors(id, parent_id, name) AS (</div><div class="line">    <span class="keyword">SELECT</span> users.id, users.parent_id, users.name</div><div class="line">    <span class="keyword">FROM</span> <span class="keyword">users</span></div><div class="line">    <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">4</span></div><div class="line">  <span class="keyword">UNION</span> ALL</div><div class="line">    <span class="keyword">SELECT</span> users.id, users.parent_id, users.name</div><div class="line">    <span class="keyword">FROM</span> <span class="keyword">users</span></div><div class="line">    <span class="keyword">JOIN</span> ancestors <span class="keyword">ON</span> ancestors.parent_id = users.id</div><div class="line">)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ancestors;</div></pre></td></tr></table></figure><p>如此一來我們就會得到如下的結果</p><table><thead><tr><th>id</th><th>parent_id</th><th>name</th></tr></thead><tbody><tr><td>4</td><td>2</td><td>Alex</td></tr><tr><td>2</td><td>1</td><td>John</td></tr><tr><td>1</td><td></td><td>Jimmy</td></tr></tbody></table><p>首先，我們將 <code>id = 4</code> 的 Alex 選出來，作為第一筆資料。</p><blockquote><p>實務上，應該是將 John (<code>id = 2</code>) 直接帶入（父代預設不包含自己）</p></blockquote><p>接下來，我們的下一筆資料的 <code>users.id</code> 必須等於上一筆資料的 <code>users.parent_id</code> 才行。</p><p>這邊簡單的使用 <code>JOIN</code> 將 <code>ancestors</code> 跟現有的 <code>users</code> 連接起來。</p><blockquote><p><code>JOIN ancestors ON ancestors.parent_id = users.id</code> 可能會讓你有點疑惑。<br>這邊的 <code>ancestors</code> 是指「上一個找到的父代」也就是說上面這句 <code>JOIN</code> 查詢，是找下一個父代的查詢，用上一個的父代 <code>id</code> 去比對是意思正確的。</p></blockquote><p>至於效能上，目前在 800,00 rows 狀態下，用 <code>JOIN</code> 還是單純 <code>FROM users, ancestors</code> 是差不多的耗時跟解析 SQL 之後可能還需要多觀察是否有改進空間。</p><blockquote><p>相對於 Closure Table 還是慢上不少。</p></blockquote><h3 id="轉換成-Model"><a href="#轉換成-Model" class="headerlink" title="轉換成 Model"></a>轉換成 Model</h3><p>既然是使用 Rails 的專案，那麼就需要封裝成 Model 的方法才行。</p><p>在這之前，我們要先知道幾個前提。</p><ul><li><code>WITH RECURSIVE ancestors(...) AS (...)</code> 裡面給的欄位，是回傳的欄位。</li><li><code>UNION</code> 所 <code>SELECT</code> 的欄位必須一至，不可使用 <code>*</code> 符號。</li></ul><p>因為有以上的限制，我們的 Model 會呈現這樣的狀態。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ancestors</span><span class="params">(<span class="symbol">max_depth:</span> <span class="number">10</span>)</span></span></div><div class="line">    return_columns = User.column_names.join(<span class="string">', '</span>)</div><div class="line">    select_columns = column_names_for_recursive_query.join(<span class="string">', '</span>)</div><div class="line">    table_name = User.table_name</div><div class="line"></div><div class="line">    query = <span class="string">&lt;&lt;-SQL</span></div><div class="line">      WITH RECURSIVE ancestors(<span class="subst">#&#123;return_columns&#125;</span>, depth) AS (</div><div class="line">        SELECT <span class="subst">#&#123;select_columns&#125;</span>, 1</div><div class="line">        FROM <span class="subst">#&#123;table_name&#125;</span></div><div class="line">        WHERE <span class="subst">#&#123;table_name.id&#125;</span> = <span class="subst">#&#123;parent_id&#125;</span></div><div class="line">      UNION ALL</div><div class="line">        SELECT <span class="subst">#&#123;select_columns&#125;</span>, depth + 1</div><div class="line">        FROM <span class="subst">#&#123;table_name&#125;</span></div><div class="line">        JOIN ancestors ON ancestors.parent_id = <span class="subst">#&#123;table_name&#125;</span>.id</div><div class="line">        WHERE depth &lt; <span class="subst">#&#123;max_depth&#125;</span></div><div class="line">      )</div><div class="line">      SELECT * FROM ancestors ORDER BY depth</div><div class="line">    SQL</div><div class="line">    User.find_by_sql(query)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  private</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">column_names_for_recursive_query</span></span></div><div class="line">    @column_names <span class="params">||</span>= User.column_names.map <span class="params">|name|</span></div><div class="line">      [User.table_name, name].join(<span class="string">'.'</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>如此一來，我們就可以用 <code>User.last.ancestors</code> 取得對應的 Model 物件回傳。</p><p>不過，上面的查詢也還有不少限制，像是無法繼續加上 <code>order</code> <code>limit</code> 等其他透過 ORM 產生的 SQL 查詢。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>其實整體看下來，所謂樹狀的結構解法，是要看當時的情境。</p><p>以文章一開始的案例來看，選用 Adjacency List by SQL 的方式最為適合，理由如下。</p><ul><li>產生節點要快</li><li>世代只會不斷成長</li><li>樹狀結構的追溯有上限<ul><li>每個節點只會運行一次追溯</li></ul></li></ul><p>以這個案例來看，耗費在 <code>Recursive Query</code> 的成本每個節點只有一次，相比 Closure Table 會因為世代成長造成的消耗，或者 Path Enumeration 的儲存限制，這個成本是很低的。</p><blockquote><p>下一步是封裝成 Concern 方便取用，畢竟這類型的系統有時候很仰賴樹狀結構的查詢。</p></blockquote><p>另外，樹狀結構比較常拿去查詢子代，畢竟子代數量不確定的時候非常難以管理。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/10/23/Use-PostgreSQL-s-recursive-query-to-find-ancestors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>自由的 Ruby 類別（一）</title>
      <link>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/</link>
      <guid>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/</guid>
      <pubDate>Sun, 22 Oct 2017 15:15:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;以前還在讀書的時候，常常會思考所謂的「自由」是什麼，想著以後一定要過著自由的生活。不過現實就是到了社會，依舊還是有許多限制讓你無法自由自在。&lt;/p&gt;
&lt;p&gt;不過，在 Ruby 中的類別卻是非常自由的。&lt;/p&gt;
&lt;p&gt;有稍微接觸過 Ruby 的人應該都知道幾個特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物件導向語言&lt;/li&gt;
&lt;li&gt;一切都是物件&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>以前還在讀書的時候，常常會思考所謂的「自由」是什麼，想著以後一定要過著自由的生活。不過現實就是到了社會，依舊還是有許多限制讓你無法自由自在。</p><p>不過，在 Ruby 中的類別卻是非常自由的。</p><p>有稍微接觸過 Ruby 的人應該都知道幾個特性：</p><ul><li>物件導向語言</li><li>一切都是物件</li></ul><a id="more"></a><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>在 Ruby 裡面，所有的類別的類別都是 <code>Class</code> 這個類別。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object.<span class="keyword">class</span></div><div class="line"><span class="comment"># =&gt; Class</span></div><div class="line"></div><div class="line">Kernel.<span class="keyword">class</span></div><div class="line"><span class="comment"># =&gt; Module</span></div><div class="line">Module.<span class="keyword">class</span></div><div class="line"><span class="comment"># =&gt; Class</span></div></pre></td></tr></table></figure><p>即使是 <code>Module</code> (模組) 也是屬於類別的一種，也就是說萬物都源自於 <code>Class</code> 這個類別。</p><blockquote><p>至於 <code>Class.class</code> 還是會得到 <code>Class</code> 自己本身</p></blockquote><h2 id="Anonymous-Class"><a href="#Anonymous-Class" class="headerlink" title="Anonymous Class"></a>Anonymous Class</h2><p>至於一個類別是怎樣出生的呢？我們可以先從沒有名字的類別來看。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class.new</div><div class="line"><span class="comment"># =&gt; #&lt;Class:0x007f85fc30ea88&gt;</span></div></pre></td></tr></table></figure><p>現在我們得到了一個新的類別（物件）而且也可以對他進行一個產生實例的動作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">klass = Class.new</div><div class="line">klass.new</div><div class="line"># =&gt; &lt;#&lt;Class:0x007f85fc30ea88&gt;:0x007f85fc2efa98&gt;</div></pre></td></tr></table></figure><p>因為這種類別很可憐，他連名字都沒有，所以他的名字就是物件本身的 <code>#&lt;Class:0x007f85fc30ea88&gt;</code></p><p>那麼，該怎麼讓他們獲得名字呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Klass = Class.new</div><div class="line">Klass.new</div><div class="line"><span class="comment"># =&gt; #&lt;Klass:0x007f85fc2d7510&gt;</span></div></pre></td></tr></table></figure><p>實際上，所有類別的名字都是一個常數。<br>所以才會在撰寫類別名稱的時候，必須以大寫開頭（定義為常數）才能運作。</p><p>不過，類別的繼承跟方法該怎麼辦呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Klass = Class.new(Object) <span class="keyword">do</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(text)</span></span></div><div class="line">    puts text</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">Klass.new.echo <span class="string">'Hello World'</span></div><div class="line"><span class="comment"># =&gt; Hello World</span></div></pre></td></tr></table></figure><p>實際上就是把一個 Block 在初始化類別的時候傳進去，讓他做一些事情。</p><p>上面的類別定義等價於下面的程式碼：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(text)</span></span></div><div class="line">    puts text</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>所以，我們在這邊發現我們在 <code>class</code> 到 <code>end</code> 所寫的，可能是一個 Block。</p><h2 id="Class-Methods"><a href="#Class-Methods" class="headerlink" title="Class Methods"></a>Class Methods</h2><p>這個段落會討論的是 <code>Class</code> 類別的方法，有趣的是他剛好也是其他類別的類別方法。</p><p>物件導向中，我們知道有兩種方法的定義。</p><ul><li>類別方法 <code>Klass.instance</code></li><li>實例方法 <code>Klass.new.echo</code></li></ul><p>差別在於實例方法需要先把類別用 <code>.new</code> 初始化之後，才能存取到這些方法。</p><p>首先，我們可以先看看 <code>Class</code> 類別有哪些類別方法可以使用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class.methods</div><div class="line"><span class="comment"># =&gt; [:include, ...,:instance_exec, :__id__]</span></div></pre></td></tr></table></figure><p>省略了一些方法，不過看到了 <code>include</code> 這個熟悉的關鍵字。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span></span></div><div class="line">  <span class="keyword">include</span> Mod</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>沒錯，我們所看到的 <code>include</code> 就是我們在 <code>include</code> 某個模組的那一個。</p><p>所以，下面的這些動作其實是等價的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Klass = Class.new <span class="keyword">do</span></div><div class="line">  <span class="keyword">include</span> Mod</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span></span></div><div class="line">  <span class="keyword">include</span> Mod</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># class Klass; end</span></div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="comment"># Klass = Class.new</span></div><div class="line"></div><div class="line">Klass.<span class="keyword">include</span> Mod</div></pre></td></tr></table></figure><p>透過以上的探索，是不是發現大多數 Rubyist 都可能接觸過的 Rails 中，有很多這樣的應用方式呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></div><div class="line">  has_many <span class="symbol">:posts</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>從上面的例子來看 <code>has_many</code> 是一個類別方法，並且可能是屬於 <code>ApplicationRecord</code> 或者其上層的某一個物件。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在 Ruby 的世界中，所有的類別其實都是 <code>Class</code> 這個類別的實體表現而已。<br>而父類別的的類別方法，則可以作為在定義新類別時的 Block 中使用，用來拓展一個類別的多樣性。</p><p>下一篇文章會來討論 <code>has_many</code> 的實際應用是怎樣的。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 RubyKaigi 2017 年後的反思</title>
      <link>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/</link>
      <guid>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/</guid>
      <pubDate>Mon, 09 Oct 2017 08:24:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;在這幾個月，感覺到自己好像快要突破這一階段的瓶頸，所以做了一些調整試試看能不能順利的突破，同時也到了每年公司參與 RubyKaigi 的時期。&lt;/p&gt;
&lt;p&gt;要說的話，今年的 RubyKaigi 整體的方向對我來說很不一樣，因為有不少關於 RubyKaigi 底層的議程被提出來，這在台灣舉辦研討會需要照顧到不同客群的人總會需要有一些取捨。&lt;/p&gt;
&lt;p&gt;不過，對日本——Ruby 的發源地來說，因為有不同類型的研討會互補，反而可以在不同的研討會上，著重不同的情境來討論。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在這幾個月，感覺到自己好像快要突破這一階段的瓶頸，所以做了一些調整試試看能不能順利的突破，同時也到了每年公司參與 RubyKaigi 的時期。</p><p>要說的話，今年的 RubyKaigi 整體的方向對我來說很不一樣，因為有不少關於 RubyKaigi 底層的議程被提出來，這在台灣舉辦研討會需要照顧到不同客群的人總會需要有一些取捨。</p><p>不過，對日本——Ruby 的發源地來說，因為有不同類型的研討會互補，反而可以在不同的研討會上，著重不同的情境來討論。</p><a id="more"></a><p>今年舉辦的地點在廣島，附近比較著名的景點就是「嚴島神社」不過因為遭遇了颱風，我就沒有像同事一樣在轉移到福岡觀光前衝過去看。</p><blockquote><p>據說早中晚的風景都不同，也許哪天有空去那邊逛個一天會是不錯的選擇。</p></blockquote><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>第一天因為是週日，就和同事趁颱風還未接近的時候，先趕緊到海事博物館看了一下大和戰艦的介紹跟模型。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day1.jpg" alt=""></p><p>博物館本身有提供特殊的導覽裝置，可以講中文。並且會在對應的地點自動觸發解說，所以逛起來基本上沒什麼問題，唯一可惜的地方大概就是被颱風催促需要在風雨接近之前趕回旅館。</p><p>晚上風雨非常大，不過運氣很好的是旅館旁邊有一間小店的炒麵非常好吃，就用短跑衝刺的方式跑過去吃。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day1-2.jpg" alt=""></p><p>不過回旅館的時候大家因為風太大差點跑不回去，不過雨傘在這時候其實也完全發揮不了作用就是了！</p><p>颱風其實走得很快，晚上大約十點多就離開暴風半徑。在這段時間，我們把原本 RubyKaigi 慣例的 Pre-Party 取消報名，畢竟冒著風雨過去太危險，反而在旅館跟同事開始喝起酒來。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day1-3.jpg" alt=""></p><p>去年已經稍微習慣這樣的節奏，也開始學怎麼喝酒，所以今年也是很淡定的喝了不少。</p><blockquote><p>RubyKaigi 基本上就是 3 + 1 天左右全身 24 小時都有酒精的活動。</p></blockquote><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>今年是先參加 RubyKaigi 再進行觀光，所以第二天（下飛機那天大家買完防颱的食物就休息了）馬上就是 RubyKaigi。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day2.jpg" alt=""></p><p>紀念品很有趣，每年 RubyKaigi 的紀念品都是自取的。早知道就帶三份，紀念、自用跟送禮之類的，好像很不錯。</p><blockquote><p>不知道為什麼第一天的議程我完全失去記憶了，今年其實有不少雷的議程，然後好像都剛好聽到⋯⋯</p></blockquote><p>晚上的官方 Party 也出現了去年沒看過的木桶裝清酒⋯⋯</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day2-1.jpg" alt=""></p><p>不過這個其實蠻刺激的，另外就是今年似乎因為講日文的人比較多（大概是平日的關係）比去年還難以去跟其他人聊天，即使在目前的案子訓練下已經比較習慣用英文對談。</p><p>因為廣島其實沒有太多的景點，所以一結束後我們馬上會到福岡，只能把握時間趕緊吃一下當地美食。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day2-2.jpg" alt=""></p><p>廣島燒，雖然對外國人來說無法分辨跟大阪燒的差異，總之我們就叫他廣島燒吧。</p><blockquote><p>可惜份量蠻大的，當晚上的宵夜還是分攤來吃比較適合。</p></blockquote><p>今年也剛好碰到日本球隊比賽的結果，廣島這邊的隊伍因為好幾年（沒記錯是八年）沒有得到冠軍，所以正在狂歡。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day2-3.jpg" alt=""></p><p>這張照片是我們在旁邊圍觀的畫面（前面是商店街）不過後面馬上就發生同事被醉漢襲擊的事件，原本以為是同事的日本友人，但是下一秒就被淋了滿身酒。</p><p>接下來就是五個男生呈現一個隨時可以逃跑的隊形，選沒有人的小路逃回旅館的狀態。</p><blockquote><p>日本人狂起來好可怕喔（抖</p></blockquote><p>比較特別的是，今年有一個贊助商是做珠寶的，只是因為網站用 Ruby 開發就贊助（真希望台灣也有這種的贊助商）神秘的攤位禮品則是這個。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day2-4.jpg" alt=""></p><p>真正的紅寶石，其實不大而且據說要老闆高興才會給，這樣說起來我還蠻幸運的（因為老闆英文似乎比我還好，讓我卡住了 XD）</p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>因為 RubyKaigi 大家都很努力喝酒，所以其實清醒的時間並不多（問題發言）</p><p>不過這場演講大概是我三天裡面最清醒的一場。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day3.jpg" alt=""></p><p>「<a href="http://rubykaigi.org/2017/presentations/shioyama.html" target="_blank" rel="noopener">The Ruby Module Builder Pattern</a>」是在討論 Ruby 裡面的 Module 可以怎樣使用，是一場非常有用的應用技術演講。</p><p>講者的公司是日本 Steam 的金流代理商，另外講者自己的網誌也是很多很技術文章可以讀。</p><blockquote><p>而且我剛好在寫關於 Module 的文章，這場演講算是提醒大家在使用上有一個盲點的演講，整體上不困難，但是很有用。</p></blockquote><p>今年沒有提供午餐（去年的餐盒超好吃）所以放生大家到附近的餐廳去吃，前一天是跟團吃到一直想吃的燒肉，今天則是西餐廳。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day3-1.jpg" alt=""></p><p>因為時間限制，第一天有經驗後就放棄下午第一場的演講。這間餐廳雖然不是日式的食物，但是都非常好吃而且精緻，所以其實把附近同事的餐點也都拍了一遍。</p><p>今天有安排 Lightning Talk 有不少精采的技術分享，雖然主要都是圍繞在今年對 Ruby 效能的主題有關。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day3-2.jpg" alt=""></p><p>有趣的是像是 Niconico 和 Pixiv 其實都有使用 Ruby 讓人覺得格外的親切。</p><blockquote><p>對一個寫 Ruby 的宅宅來說很輕切⋯⋯</p></blockquote><p>晚上的贊助商 Party 據說是超稀有級，因為去年沒有。而負責人據說是酒神等級，選的酒都非常厲害。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day3-3.jpg" alt=""></p><p>一整排的清酒，不管喝哪種都算是非常好喝。不過因為後勁很強，我大概在第三杯（小杯）的時候就開始覺得有暈，只能慢慢喝。</p><blockquote><p>大家到日本的時候如果要跟日本人喝酒，請小心我們預設值是不一樣的，不要喝太拼。</p></blockquote><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><p>經過兩天的議程，今天終於到了 RubyKaigi 的最後一天，也是強者同事 Henry 上台分享 <a href="https://tamashii.io" target="_blank" rel="noopener">Tamashii</a> 專案的日子。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day4.jpg" alt=""></p><p>這個專案原本是 PyCon 結合 Raspberry Pi 所開發的研討會報到系統，不過後來因為棄坑就被我們公司接手，並且用 Ruby 重新開發。</p><blockquote><p>目前主要是我跟 Henry 兩個人在維護，我加入的時候剛好是 Rails 在 ActionCable 支援比較完善的時期，不過 Ruby 的 WebSocket Client 並不成熟，所以就跟 Henry 做了不少改良，成為目前的狀態。運氣好的話，之後大概會發展成 IoT 的套件組吧。</p></blockquote><p>中午跑去吃台灣要排隊才能吃到的一蘭。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day4-1.jpg" alt=""></p><p>跟吃過的日本拉麵比起來，一蘭的湯頭很好入口，算是很容易喝完的類型。後面因為同事發現貓咪咖啡廳，就翹掉議程跑進去了 XD</p><p>最後一天的晚上是 Pixiv 所贊助的 Party 在 SOGO 頂樓，進去的時候覺得超誇張。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day4-2.jpg" alt=""></p><p>一個頂樓小吃區包場的概念，在台灣也不容易看到這樣的形式，有些東西果然要在日本才能看到啊⋯⋯</p><p>晚上跟同事到廣島的商店街逛了一下，順便買點衣服就回去旅館休息，等明天搭車轉乘。</p><blockquote><p>其實原本沒有要買，不過因為前面提到的球隊贏球，衣服大概是 2000 JPY -&gt; 500 JPY 這種瘋狂的折扣，就默默拿出錢包了⋯⋯</p></blockquote><h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><p>上午除了衝去宮島的同事之外，基本上就是大家悠哉起床後等中午搭 JR 到福岡。</p><p>下午先到友社 Nulab 拜訪，竟然是把整棟公寓租下來改裝，讓我們超羨慕（不過在台灣大概不可能）</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day5.jpg" alt=""></p><p>最上面那一層是休息區，有迷你桌球桌跟射飛鏢這些設備，希望有一天公司也可以升級到這樣。</p><p>傍晚的時間就是先在附近探路一下，看看後面幾天有沒有適合玩的地方。</p><blockquote><p>不過很可惜的是福岡旅館附近都是百貨公司之類的，很適合敗家呢！</p></blockquote><p>晚上由日本分社的社長大偉哥準備的聚餐，大家一起先怒吃一波。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day5-1.jpg" alt=""></p><p>在日本基本上很難不吃到生魚片，在台灣因為我很怕腥味基本上是沒有吃海鮮。今年在日本碰到的，基本上都沒有腥味（不愧是日本）不然這餐其實很難把它吃完⋯⋯</p><blockquote><p>這間應該算是居酒屋，總而言之後面都是在喝酒。大偉哥也向我們展示了在日本住八年之後怎麼跟日本人喝酒，公司一半的人都一度陣亡。<br>這邊再次跟大家強調，我們不是專業的日本人，喝酒請自制⋯⋯</p></blockquote><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><p>這一天開始就是自由活動的行程，中午先跟了一團迴轉壽司。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day6.jpg" alt=""></p><p>雖然坐在等待區的時候才被發現有個不吃海鮮的人混入，不過因為前幾天根本就是宿醉狀態其實沒有打算吃很多。再加上我對日本的生魚片很有信心就淡定進去了。</p><blockquote><p>因為福岡也是冠軍（另一區，之後要跟廣島打），連壽司店都有特殊的牛舌壽司出現（不過好吃的是其他的，忘記拍了⋯⋯）</p></blockquote><p>下午則是去附近一間專賣老遊戲的店逛逛，運氣蠻不好的是前幾天才搬店，不過還好都在附近的區域。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day6-1.jpg" alt=""></p><p>裡面太多遊戲都是我沒看過的，而 Game Boy / GBA / NES 時代我則是沒有機會玩到這些遊戲，裡面最有感覺的大概就是這款。大學因為同學的關係有玩 GTA 5 這款則是 GTA 一代。</p><p>逛完之後就慢慢往旅館方向前進，意外的發現⋯⋯</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day6-2.jpg" alt=""></p><p>原來日本也有少林寺呢 XD</p><blockquote><p>而且裡面的神像是昆沙門天，沒記錯是戰神⋯⋯</p></blockquote><p>傍晚的時候到遊戲中心晃晃，因為老闆想找看看有沒有他想打的機台（日本也幾乎沒有了⋯⋯）</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day6-3.jpg" alt=""></p><p>在旁邊發現了鋼彈駕駛艙，就進去體驗了一下。</p><blockquote><p>不過日本目前大多數機台都最好要綁定卡片，非日本人去玩都蠻可惜的。</p></blockquote><p>晚上原本想吃福岡比較有名的「水炊」但是因為比較好的餐廳訂不到位置，只好改成吃串燒。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day6-4.jpg" alt=""></p><p>九州一代的食物真的相對便宜，我們吃完均分之後還發現大概在 2500 日幣以內，一般這種單點通常會點爆。</p><p>晚上則是回旅館休息，因為我們得到情報隔天有賣場要釋出 Switch 啊！</p><h2 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h2><p>大概五點多我們就起床準備，到福岡車車站的ヨドバシ去排隊。運氣很好的是以為日本人應該會夜排，結果前面大概不到二十人。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day7.jpg" alt=""></p><p>於是順利入手了一台 Switch 呢！目測覺得大概有 100 ~ 200 台釋出，覺得應該也算是一次性釋出的情況中少見的。</p><blockquote><p>釋出理由？球隊冠軍啊，當然要慶祝一下！另外沒有人大概是消息沒有傳開，我在 Twitter 上面幾乎沒有看到有人發推。</p></blockquote><p>下午就躲回旅館打 MHXX 了，以及睡死。早起排隊超累的，附近又是百貨公司對於不常逛街買東西的人來說其實沒什麼吸引力。</p><p>晚上又揪一團燒肉，我對在日本吃燒肉似乎很執著啊 XD</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day7-1.jpg" alt=""></p><p>不過還是要看燒肉的等級，在日本吃普通燒肉大概除了是日本口味之外，跟在台灣吃好像差不多⋯⋯</p><h2 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h2><p>扣掉到日本的當天，這是最後一天了！</p><p>早上好像跑去再開幾次鋼彈的樣子，總之沒什麼印象。中午則是去吃「華味鳥」的拉麵，原本是想去吃他們水炊，但是就是很難吃到。</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day8.jpg" alt=""></p><p>不過他們的湯頭似乎是跟水炊一樣的，吃起來超讚。旁邊會有飯糰，讓我們放進去拌勻來吃，我超喜歡這點。因為我一直覺得以拉麵湯頭的濃度，配飯應該會超好吃。</p><p>下午因為要等飛機，所以只能在附近晃晃。最後變成跑去遊戲中心夾娃娃（日幣剩很多⋯⋯）</p><p><img src="/images/the-rubykaigi-2017-let-me-reflection/day8-1.jpg" alt=""></p><p>雖然經過三十次以上的失敗，但是終於發現我比較擅長的類型勉強夾到一個。</p><blockquote><p>不知道為什麼其他同事都會突然神手一次就中⋯⋯</p></blockquote><p>之後就是接近半夜回台灣，才發現機場捷運十一點半就是最後一班（差點睡機場呢！）不過總覺得機場附近不好找住宿的地方，機場捷運再加開幾班也許會比較方便一點。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>前面講了一堆在日本這幾天怎麼玩，幾乎沒講到為什麼是「反思」的一年。</p><p>一開始有提到，因為感覺可以再進一步，所以有在調整一些狀態。也因為這樣，我想這次我第一次這麼認真的玩，寫這篇文章的時候才發現，雖然沒有去逛什麼景點，不過整體上來說算是很好的放鬆一次。</p><p>也因為該放鬆的放鬆玩了，我覺得我可以好好的收心起來專注在技術上。另一方面是今年的 RubyKaigi 讓我慢慢瞭解了一些方向，很多時候我們使用 Ruby 或者其他比較高階的語言，很少會去考慮底層的問題。</p><p>雖然大多數時候不需要考慮，但是如果想要更了解這個語言、在網站/軟體開發上更進一步。那就必須更加熟悉語言、框架的特性，還有嘗試去參與這些語言背後設計的過程。</p><p>所以，就像是看到一個方向。覺得自己可以進一步的時候，其實是有感覺但是不知道該往哪邊走。但是聽完今年的議程後會發現，很多以前受限於能力的事情在目前的狀態是可以「嘗試的」也就意味著當我熟悉這些原本還不夠能力去做的事情的時候，大概就是我再更進一步的時候。</p><p>雖然還有一個問題就是，就跟遊戲的技能樹一樣，越高階會出現越多選項分歧。但是必須專注在少數幾個項目發展才行，雖然有很多有趣的項目可以選擇，但是受限於時間跟體力等等因素，最後還是得慢慢收束到某幾個領域。</p><p>最後，就是要戒一下挖坑的習慣，因為前面超放鬆所以一不小心又挖了一大堆坑⋯⋯</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用 Redux 跟 GraphQL 玩 Rails 5.1</title>
      <link>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/</link>
      <guid>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/</guid>
      <pubDate>Mon, 01 May 2017 15:09:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;上週五在處理網址續費的時候，發現幫老爸公司管理的網址已經多到一個程度。所以就決定把手邊可以轉移的服務都往 Gandi 丟過去。畢竟粗略估算可以達到 Grid B 的費率（實際上只有九五折）不過考量到有 API 能夠管理，以及一些自動化的手段，雖然相對還是稍微貴了一點，但是省去後續不少麻煩確實是有利的。&lt;/p&gt;
&lt;p&gt;也因為這樣，就打算以串 Gandi 的 API 來練手一下，原本是想做完管理 Domain 的部分，不過沒想到在實作一些技術面上的東西花了不少時間，只做完簡單的價格查詢。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>上週五在處理網址續費的時候，發現幫老爸公司管理的網址已經多到一個程度。所以就決定把手邊可以轉移的服務都往 Gandi 丟過去。畢竟粗略估算可以達到 Grid B 的費率（實際上只有九五折）不過考量到有 API 能夠管理，以及一些自動化的手段，雖然相對還是稍微貴了一點，但是省去後續不少麻煩確實是有利的。</p><p>也因為這樣，就打算以串 Gandi 的 API 來練手一下，原本是想做完管理 Domain 的部分，不過沒想到在實作一些技術面上的東西花了不少時間，只做完簡單的價格查詢。</p><a id="more"></a><p>根據我的習慣，我通常會在新專案使用新的技術，這次是使用 Rails 5.1 支援 Webpack 的功能搭配上 Redux 和 GraphQL 來應用。我學 React 的時間是在 Redux 出來之前，所以一直都使用手刻 Flux 架構的方式去寫。</p><p>而 GraphQL 之前因為沒有成熟的 Ruby Gem 也一直沒有去碰，最近除了有相容 Rails 之外，也出現了透過 ActiveRecord 的 Association Reflect 去解決 GraphQL 會出現 N+1 問題的 Gem 讓我總算是下定決心去嘗試看看。</p><p>這個專案我自己的規劃是這樣的：</p><ul><li>Dashboard<ul><li>Domain Manager<ul><li>Auto Renew</li><li>DNS Zone<ul><li>CloudFlare Intergate</li></ul></li><li>DNSSEC</li></ul></li><li>SSL Manager<ul><li>Auto Renew</li><li>Auto Deploy</li></ul></li></ul></li><li><p>API</p><ul><li>GraphQL (Front-end)</li><li>RESTFul API (3rd-party)</li></ul><p>大致上定位是基於 Gandi 給的 API 做自動化的管理，以及在一些服務上的部署可以有效率的處理（會整合 DevOps 之類的）</p></li></ul><hr><p>不過既然要買網址，所以就需要先了解 Gandi 上的收費以及可以購買的網址。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'gandi'</span></div></pre></td></tr></table></figure><p>運氣不錯，已經有人將原本的 XMLRPC API 封裝成一個 Gem 可以用很簡單的方式來操作。</p><blockquote><p>如果像我一樣使用 Ruby 2.4 因為 XMLRPC 已經從 Core 移除，所要自行追加 <code>gem &#39;xmlrpc&#39;</code> 來補齊功能。</p></blockquote><p>這個 Gem 的使用方法大致上如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">api = Gandi::Session.new(ENV[<span class="string">'GANDI_API_TOKEN'</span>])</div><div class="line">api.domain.list <span class="comment"># 顯示帳號下所有的 Domain</span></div></pre></td></tr></table></figure><p>不過對於 Rails 來說其實不容易使用，既然是第三方的 API 就先封裝成一個 Service 物件比較容易處理。<br>至於建立 API Client 實例的動作也可以封裝一下方便使用。</p><figure class="highlight ruby"><figcaption><span>config/initializers/gandi.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># frozen_string_literal: true</span></div><div class="line"></div><div class="line"><span class="comment"># :nodoc:</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Gandi</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">api</span></span></div><div class="line">    options = &#123;&#125;</div><div class="line">    options[<span class="symbol">:env</span>] = <span class="symbol">:test</span> <span class="keyword">unless</span> Rails.env.production?</div><div class="line">    @api <span class="params">||</span>= Gandi::Session.new(Settings.gandi.token, options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>我習慣會使用 <code>SettingsLogic</code> 這個 Gem 來管理設定，這邊也可以將 <code>Settings.gandi.token</code> 替換成 <code>ENV[&#39;GANDI_API_TOKEN&#39;]</code>  之類的。</p><blockquote><p>因為 Gandi 有提供測試環境，所以在非 Production 時一律採用測試環境。</p></blockquote><p>接下來就是封裝 Gandi 的價格查詢（<code>Catalog</code>）成為一個 Service 供系統使用（可能是歐洲服務商的關係，API 相當慢，在本地端足存一份副本會好很多。）</p><figure class="highlight ruby"><figcaption><span>app/services/domain/price_services.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># frozen_string_literal: true</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Domain</span></span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PriceService</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(currency = <span class="symbol">:EUR</span>, grid = <span class="symbol">:A</span>)</span></span></div><div class="line">        @currency = currency</div><div class="line">        @grid = grid</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(query)</span></span></div><div class="line">        query = &#123;<span class="symbol">product:</span> query.merge(<span class="symbol">type:</span> <span class="symbol">:domain</span>)&#125;</div><div class="line">        Gandi.api.catalog.list(query, @currency, @grid)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span></span></div><div class="line">        query(&#123;&#125;)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>基本上就是對原本的 Gandi 做簡單的封裝，現在透過 <code>Domain::PriceService.new.all</code> 就可以輕鬆存取到需要的價格資訊。<br>不過因為要匯入到本地的資料庫，回傳的資料結構並不是我所期望的狀況，所以就再做了一層封裝。</p><figure class="highlight ruby"><figcaption><span>app/services/domain/price_services.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># frozen_string_literal: true</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Domain</span></span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PriceService</span></span></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Result</span> &lt; Array</span></div><div class="line">            <span class="function"><span class="keyword">def</span> <span class="title">to_domain</span></span></div><div class="line">                map &#123; <span class="params">|item|</span> build_domain(item) &#125;</div><div class="line">            <span class="keyword">end</span></div><div class="line"></div><div class="line">            private</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">def</span> <span class="title">build_domain</span><span class="params">(item)</span></span></div><div class="line">                CatalogDomain.new(</div><div class="line">                    <span class="symbol">description:</span> item.product.description,</div><div class="line">                    <span class="symbol">action:</span> item.action.name.parameterize(<span class="symbol">separator:</span> <span class="string">'_'</span>),</div><div class="line">                    <span class="symbol">phase:</span> item.action&amp;.params&amp;.tld_phase,</div><div class="line">                    <span class="symbol">price:</span> convert_to_price(item),</div><div class="line">                    <span class="symbol">grid:</span> item.unit_price.first.grid</div><div class="line">                )</div><div class="line">            <span class="keyword">end</span></div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">def</span> <span class="title">convert_to_price</span><span class="params">(item)</span></span></div><div class="line">                Money.from_amout(</div><div class="line">                    item.unit_price.first.price,</div><div class="line">                    item.unit_price.first.currency</div><div class="line">                )</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        <span class="comment"># 略</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(query)</span></span></div><div class="line">            <span class="comment"># ...</span></div><div class="line">            Result.new(Gandi.api.catalog.list(query, @currency, @grid))</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>如此一來，我就可以用 <code>Domain::PriceService.new.all.to_domain</code> 轉成對應的 Model 方便匯入的動作。</p><ul><li>Gandi 這個 Gem 已經用 Hashie 封裝過，所以可以透過類似物件的方式存取屬性</li><li>因為主要是使用的是台幣，但是也希望儲存不同幣種的價格所以使用了 <code>Money</code> Gem 的功能</li></ul><p>至於 Model 的部分就不多論敘，不過因為域名的資料現在有約 4000 筆，所以需要借助 <code>activerecord-import</code> 這個 Gem 做一次性的匯入，即使透過 Rails 的 Batch 功能也沒有辦法高效率的做匯入。</p><p>不過，在 Gandi 回傳的資料會有以下情況。</p><ul><li><code>action</code> 的差異：新增、轉入、續約等等</li><li><code>phase</code> 的差異：已上線、日升期等等（域名術語，日升期這類是給商標註冊者購買或者預先用高價保留域名用的）</li></ul><p>所以如果再沒有對這些欄位增加限制的話，就會碰到匯入時重複的問題而發生錯誤。</p><p>所以在寫 Migration 的時候要補上下面的索引來增加限制。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add_index [<span class="symbol">:description</span>, <span class="symbol">:action</span>, <span class="symbol">:phase</span>, <span class="symbol">:currency</span>, <span class="symbol">:grid</span>],</div><div class="line">          <span class="symbol">name:</span> <span class="symbol">:catalog_domain_constriant</span>,</div><div class="line">          <span class="symbol">unique:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>要這樣做的理由，是因為 <code>activerecord-import</code> 支援 <code>ON CONFLICT</code> 的 SQL 語法，在 PostgreSQL 上可以在碰到重複的資料改為對特定欄位更新，而不是插入一筆資料。</p><p>於是就可以撰寫一個 Rake Task 來處理定期同步價格的任務。</p><figure class="highlight ruby"><figcaption><span>lib/tasks/domain.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># frozen_string_literal: true</span></div><div class="line"></div><div class="line">namespace <span class="symbol">:domain</span> <span class="keyword">do</span></div><div class="line">  desc <span class="string">'Load domain prices from Gandi'</span></div><div class="line">  task <span class="symbol">:refresh</span>, [<span class="symbol">:currency</span>, <span class="symbol">:grid</span>] =&gt; [<span class="symbol">:environment</span>] <span class="keyword">do</span> <span class="params">|_, args|</span></div><div class="line">    currency = args[<span class="symbol">:currency</span>] <span class="params">||</span> <span class="symbol">:EUR</span></div><div class="line">    grid = args[<span class="symbol">:grid</span>] <span class="params">||</span> <span class="symbol">:A</span></div><div class="line">    domains = Domain::PriceService.new(currency, grid).all.to_domain</div><div class="line">    CatalogDomain.import domains, <span class="symbol">on_duplicate_key_update:</span> &#123;</div><div class="line">      <span class="symbol">conflict_target:</span> [<span class="symbol">:description</span>, <span class="symbol">:action</span>, <span class="symbol">:phase</span>, <span class="symbol">:grid</span>, <span class="symbol">:currency</span>],</div><div class="line">      <span class="symbol">columns:</span> [<span class="symbol">:price</span>]</div><div class="line">    &#125;</div><div class="line">    puts <span class="string">"Total <span class="subst">#&#123;domains.size&#125;</span> rows in <span class="subst">#&#123;currency&#125;</span> loaded."</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>透過 <code>on_duplicate_key_update</code> 的設定，就可以在碰到相同的資料時只更新價格，如此一來就可以利用 CronJob 來每天同步當日最新的價格資訊。</p><p>到此為止，就「域名資料」的部分就算是已經處理完畢了。</p><p>接下來對 GraphQL 設定，依照教學配置好之後，要先讓 GraphQL 可以支援顯示我們需要的資料。</p><figure class="highlight ruby"><figcaption><span>app/graphql/types/query_type.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># frozen_string_literal: true</span></div><div class="line"></div><div class="line">Types::QueryType = GraphQL::ObjectType.define <span class="keyword">do</span></div><div class="line">  name <span class="string">'Query'</span></div><div class="line"></div><div class="line">  field <span class="symbol">:domains</span> <span class="keyword">do</span></div><div class="line">    type types[Types::CatalogDomainType]</div><div class="line">    argument <span class="symbol">:tld</span>, types.String</div><div class="line">    resolve -&gt;(obj, args, ctx) &#123;</div><div class="line">      <span class="keyword">if</span> args[<span class="symbol">:tld</span>]</div><div class="line">        CatalogDomain.where(<span class="string">'description LIKE ?'</span>, <span class="string">"%<span class="subst">#&#123;args[<span class="symbol">:tld</span>]&#125;</span>%"</span>)</div><div class="line">      <span class="keyword">else</span></div><div class="line">        CatalogDomain.all</div><div class="line">      <span class="keyword">end</span></div><div class="line">    &#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>這邊先簡單的支援查詢域名的功能，先不討論透過幣種或者價格來查詢，先讓使用者可以查詢現有可以註冊的域名有哪些類型即可。</p><blockquote><p>至於 <code>CatalogDomainType</code> 只是單純的設定欄位而已，這邊就跳過不多做討論。</p></blockquote><p>另外似乎是因為資料蠻多的關係，連生成 JSON 都有點慢，所以這邊額外設定了 <code>oj</code> 這個 Gem 來加速（大約是十倍快）</p><figure class="highlight ruby"><figcaption><span>config/initializers/oj.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># frozen_string_literal: true</span></div><div class="line"></div><div class="line">Oj::Rails.set_encoder</div><div class="line">Oj::Rails.set_decoder</div><div class="line">Oj::Rails.optimize(Array, BigDecimal, Hash, Range, Regexp, Time)</div></pre></td></tr></table></figure><p>到這邊，我們的 Backend 就全部完成處置，接下來就是要讓前端可以使用這些資料來呈現。</p><p>首先到原本的 Layout 上面追加 Webpack 的 JS 檔案。<br>（預設還是傳統的方式，所以要手動加上由 Webpack 生成的版本）</p><figure class="highlight erb"><figcaption><span>app/views/layout/application.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 略 ---&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> javascript_pack_tag    <span class="string">'application'</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 略 ---&gt;</span></div></pre></td></tr></table></figure><p>接下來開啟 Rails 的 Webpack 伺服器（<code>./bin/webpack-dev-server</code>）之前使用 beta1 的時候還有 Watcher 的選項，不過正式版似乎去掉了，不過用 dev-server 效果基本上是相同的。</p><blockquote><p>要注意的是，強烈不建議 Webpack 跟原本的 Sprocket 混用，除了自己會搞混之外，原有的 ExecJS 也挺容易出錯的，統一寫在 <code>app/javascript/packs</code> 會是不錯的選擇。</p></blockquote><p>接下來安裝一下需要的套件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn add react redux react-redux react-dom redux-observable rxjs prop-types immutable redux-thunk</div></pre></td></tr></table></figure><blockquote><p>關於 UI 互動上，我偏向 RxJS 的解法，所以採用的是 <code>redux-observable</code> 的方式，至於 <code>redux-thunk</code> 因為不熟，大多教學都會裝一下，所以這邊單純跟風。</p></blockquote><p>首先，先來處理 Reducer 的部分，這邊直接利用 Immutable 的 <code>fromJS</code> 直接把資料轉換。不過筆數這麼多的情況下，其實是不建議這樣做的，不過暫時還沒有找到恰當的處理方式，所以就先這樣做。</p><figure class="highlight js"><figcaption><span>app/javascript/packs/reducers/domain.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; List, fromJS &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  QUERY_DOMAIN,</div><div class="line">  RECEIVED_DOMAIN,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'../constriants'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initState = <span class="built_in">Map</span>(&#123;</div><div class="line">  <span class="attr">fetching</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">domains</span>: List([]),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> domainReducer = <span class="function">(<span class="params">state = initState, action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> START_REQUEST: &#123;</div><div class="line">      <span class="keyword">return</span> state.set(<span class="string">'fetching'</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> FINISHED_REQUEST: &#123;</div><div class="line">      <span class="keyword">return</span> state.set(<span class="string">'fetching'</span>, <span class="literal">false</span>)</div><div class="line">                  .set(<span class="string">'data'</span>, fromJS(action.response.data.domains));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">default</span>: &#123;</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> domainReducer;</div></pre></td></tr></table></figure><p>關於 <code>constriants</code> 就不多做說明，從以前的習慣就是會開一個目錄（或者檔案）把全部的 Action Type 統一塞在裡面管理，雖然說直接寫字串沒什麼問題，但是難免出錯，這種統一管理的方式倒是可以避免一些人為疏失。</p><p>接下來對 Action 做處理。</p><figure class="highlight js"><figcaption><span>app/javascript/packs/action/domain.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ajax &#125; <span class="keyword">from</span> <span class="string">'rxjs/observable/dom/ajax'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  QUERY_DOMAIN,</div><div class="line">  RECEIVED_DOMAIN,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'../constriants'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ENDPOINT = <span class="string">'/graphql'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> queryDomain = <span class="function"><span class="params">query</span> =&gt;</span> (</div><div class="line">  &#123;</div><div class="line">    <span class="attr">type</span>: QUERY_DOMAIN,</div><div class="line">    <span class="attr">payload</span>: <span class="built_in">JSON</span>.stringify(&#123; query &#125;),</div><div class="line">  &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> receivedDomain = <span class="function"><span class="params">response</span> =&gt;</span> (</div><div class="line">  &#123;</div><div class="line">    <span class="attr">type</span>: RECEIVED_DOMAIN,</div><div class="line">    response,</div><div class="line">  &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> queryDomainEpic = <span class="function"><span class="params">action$</span> =&gt;</span> (</div><div class="line">  action$.ofType(QUERY_DOMAIN)</div><div class="line">         .debounceTime(<span class="number">1000</span>)</div><div class="line">         .mergeMap(<span class="function"><span class="params">action</span> =&gt;</span></div><div class="line">           ajax(&#123; <span class="attr">url</span>: ENDPOINT, <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">headers</span>: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;, <span class="attr">body</span>: action.payload &#125;)</div><div class="line">           .map(<span class="function"><span class="params">result</span> =&gt;</span> receivedDomain(result.response)),</div><div class="line">         )</div><div class="line">);</div></pre></td></tr></table></figure><p>基本上跟一般的 Redux 沒有太大的差別，比較特別的是以 <code>Epic</code> 結尾的這個動作，這個就是 <code>redux-observable</code> 所提供的特殊 Action 行為，可以把它視為 Action 的管理者。</p><p>裡面的實作則是透過 RxJS 所實現的，簡單說就是碰到 <code>QUERY_DOMAIN</code> 類型的動作，先等待 1000ms 確認沒有其他操作後，用「最後一次」的操作繼續，並且合併另一個動作（Ajax 查詢）繼續進行。</p><p>此時的 <code>QUERY_DOMAIN</code> 被觸發後，會再等待被合併的 Ajax 查詢完成後才一起回傳。而這個 Ajax 查詢則是我們要做的 GraphQL 查詢。</p><p>接下來把焦點放到查詢畫面的元件上，這邊我們只討論做 Dispatch 的這個動作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">  <span class="keyword">this</span>.props.dispatch(startRequest(<span class="string">'&#123;domains &#123; description, price, currency &#125;&#125;'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">onSearchChange() &#123;</div><div class="line">  <span class="keyword">const</span> tld = <span class="keyword">this</span>.text.input.value;</div><div class="line">  <span class="keyword">this</span>.setState(&#123; <span class="attr">search</span>: tld &#125;);</div><div class="line">  <span class="keyword">this</span>.props.dispatch(</div><div class="line">    startRequest(<span class="string">`&#123;domains(tld: "<span class="subst">$&#123;tld&#125;</span>") &#123; description, price, currency &#125;&#125;`</span>),</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>實際上也是很淺顯易懂的，在前面的 Action 中我們是採取直接將整個 GraphQL 傳入的方式，所以在觸發動作時也是直接將查詢寫到裡面。</p><blockquote><p>還不熟悉 Redux 綁定輸入框的方式，因為有點晚了所以直接用 <code>ref</code> 的做法做綁定。</p></blockquote><p>到這邊眼尖讀者可能會發現，我們並沒有去呼叫 <code>queryDomainEpic</code> 但是似乎卻自己運作起來了，這部分是 <code>redux-observable</code> 的特性，也就是說我們將呼叫實際動作的任務交給 <code>Epic</code> 來管理。</p><p>最後要統整一下所有的 <code>Epic</code> 整合到 Redux 裡面（跟 Reducers 類似）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const epics = combineEpics(queryDomainEpic);</div><div class="line">const epicMiddleware = createEpicMiddleware(epics);</div><div class="line"></div><div class="line">const store = createStore(</div><div class="line">    applyMiddleware(epicMiddleware),</div><div class="line">    reducers</div><div class="line">);</div></pre></td></tr></table></figure><p>接下來就會正常運作了！</p><hr><p>其實這樣的進度大約花了快一天左右的時間，雖然中間有跑去設定 <code>pry</code> 跟打遊戲之類的，不過整體上來說要反覆的把 Redux 練熟之外，還要掌握 GraphQL 的應用，也是要花上不少時間在上面的。</p><p>不過學技術就是這樣，當原本的技術熟悉到一個程度後，做起來當然是非常熟練的。不過如果不願意花時間在新技術上，就會一直沒辦法便的熟練，雖然目前有遊戲跟很多坑的關係，其實也不太能練新技術。但是有機會的話，還是會想在各種專案上做一些嘗試，來看看自己到底能做到怎麼樣的效果。</p><p>這篇文章大多是省略了查文件就可以做到的部分，所以看起來挺簡單的。不過要查完文件後再踩雷之後做出來，倒也是一件不太容易的事情。不過 Rails 5.1 提供了 Webpack 環境以及一些好用的 Gem 倒是大大改善不少在這部分所浪費掉的時間。</p><p>雖然沒有如預期的完成到最基本可以購買域名，但是整體上來說倒是累積了不少經驗。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rails 的 Auto Reload 機制所產生的錯誤</title>
      <link>https://blog.frost.tw/posts/2017/03/06/The-Rails-auto-reload-trap/</link>
      <guid>https://blog.frost.tw/posts/2017/03/06/The-Rails-auto-reload-trap/</guid>
      <pubDate>Mon, 06 Mar 2017 15:09:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近公司的專案使用到了 &lt;a href=&quot;https://github.com/makandra/active_type&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ActiveType&lt;/a&gt; 這套 Gem 用來輔助在專案逐漸複雜下 Model 會出現的問題。這是由 &lt;a href=&quot;https://leanpub.com/growing-rails&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Growing Rails Application in Practice&lt;/a&gt; 這本書的作者在書中介紹中的技巧，不過卻意外的讓我們遇到了關於 Auto Reload 機制所產生的問題。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近公司的專案使用到了 <a href="https://github.com/makandra/active_type" target="_blank" rel="noopener">ActiveType</a> 這套 Gem 用來輔助在專案逐漸複雜下 Model 會出現的問題。這是由 <a href="https://leanpub.com/growing-rails" target="_blank" rel="noopener">Growing Rails Application in Practice</a> 這本書的作者在書中介紹中的技巧，不過卻意外的讓我們遇到了關於 Auto Reload 機制所產生的問題。</p><a id="more"></a><p>在開始之前，我們先看看同事 Eric 的小劇場。</p><p>這是一個天氣開始轉涼的日子，在這寒冬之中專案的成員已經進行了一個上午的討論。正針對一套關於紀錄使用者與平台間帳務的系統坐出討論。</p><p>在經過一個上午的消耗後，我們各自恢復開發的進度。</p><p>此時 Eric 在他的 Rails Concole 輸入了 <code>reload!</code> 這行指令，嘗試將最近一次的變更重新讀取進來。</p><p>沒想到，Factory Girl 卻向 Eric 這樣說道「Eric 啊！你的 <code>User (#123456789)</code> 並不是 <code>User (#987654321)</code> 啊！」</p><p>Eric 心頭一驚，不過他早就遭遇過幾次這樣的問題，很快地就用 <code>FactoryGirl.reload</code> 解決了。</p><p>不過這時，AASM 又再次像 Eric 抱怨「Eric 啊！你的 <code>0:Fixnum</code> 並不能被 <code>to_sym</code>，是不是搞錯什麼了？」</p><p>不得不說，一向好運的 Eric 竟然連續兩次被抱怨，這真是非常異常的情況，團隊成員都開始警戒了起來。</p><p>於是，我們開始探討關於 <code>reload!</code> 到底在背地裡偷偷做了什麼，竟然讓 Eric 的運氣都不管用了！</p><h3 id="Auto-Reload-機制"><a href="#Auto-Reload-機制" class="headerlink" title="Auto Reload 機制"></a>Auto Reload 機制</h3><p>使用 Rails 應該都對這個機制不陌生，他能夠讓我們再修改 Model、Controller 時自動的更新物件，讓伺服器在不重啟的前提下能夠即時的更新內容。</p><p>在 Rails 中，會先透過 <code>Object#remove_const</code> 將這個 Class 清除，並且透過 Autoload 機制在找不到對應的 Constant 時自動讀取對應的檔案，藉此完成一個完整的 Reload 循環。</p><h3 id="Class-即物件"><a href="#Class-即物件" class="headerlink" title="Class 即物件"></a>Class 即物件</h3><p>大多數的 Ruby 開發者都知道，在 Ruby 的世界中是由物件組成的。即使是 Class 本身也是一個物件。也因此，是允許我們如此定義一個 Class 出來。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">klass = Class.new <span class="keyword">do</span></div><div class="line"> <span class="comment"># 其他定義</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>而每一個 Instance 都會擁有一個屬於自己的 <code>object_id</code> 也因此可以透過這個方式來比較兩個 Class 是否相同（不過 Ruby 的實作是透過其他方式）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">puts A.object_id === B.object_id</div></pre></td></tr></table></figure><h3 id="Factory-Girl-的情況"><a href="#Factory-Girl-的情況" class="headerlink" title="Factory Girl 的情況"></a>Factory Girl 的情況</h3><p>透過前面的介紹，我們可以簡單的得知 Rails 在做 Reload 的時候會有以下的步驟。</p><ul><li>執行 Reload （可能會做一些前置準備）</li><li>使用 <code>Object#remove_const</code> 進行清理物件</li><li>透過 Autoload 機制讀取物件</li></ul><p>那麼，為什麼 Factory Girl 會覺得 Reload 前的 <code>User</code> 和 Reload 後的 <code>User</code> 不同呢？</p><p>因為 Factory Girl 在定義時會將這個 Class 儲存到某個變數中，當作參考，以利後來檢查。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 原始 Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">@klass = A</div><div class="line"></div><div class="line">A.new.is_a?(@klass) <span class="comment"># =&gt; true</span></div><div class="line"></div><div class="line"><span class="comment"># Reload 動作</span></div><div class="line"></div><div class="line">Object.send(<span class="symbol">:remove_const</span>, <span class="symbol">:A</span>) <span class="comment"># =&gt; const A is undefined</span></div><div class="line"></div><div class="line"><span class="comment"># 重新定義 A Class</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">A.new.is_a?(@klass) <span class="comment"># =&gt; false</span></div><div class="line"></div><div class="line"><span class="comment"># 比對 <span class="doctag">@klass</span> 和 A</span></div><div class="line">puts @klass.object_id == A.object_id <span class="comment"># =&gt; false</span></div></pre></td></tr></table></figure><p>由此可見，當我們呼叫 <code>Object#remove_const</code> 時，<code>A</code> 在 Ruby 終究被釋放出來，因此能夠讓我們「重新」賦值到 <code>A</code> 這個 Constant 上面，而執行 <code>class A; end</code> 和 <code>Class.new</code> 此時會被視為相同的行為，因此 <code>A</code> 所對應的物件就改變了！</p><p>但是 <code>@klass</code> 還保留著原有的 <code>A</code> Class 物件參照，因此會被當作是不同的 Class。</p><p>所以，解決的方案就是透過 <code>FactoryGirl.reload</code> 讓所有 Factory Girl 的檔案重新載入一次，將新的 Class 參照儲存進去。</p><h3 id="AASM-的情況"><a href="#AASM-的情況" class="headerlink" title="AASM 的情況"></a>AASM 的情況</h3><p>在 Rails 4.1 新增了 <code>enum</code> 功能大大增加了方便性，而 AASM 也可以利用 <code>enum</code> 欄位來做狀態機的處理。那麼，為什麼會出現「<code>0:Fixnum</code> 無法 <code>to_sym</code>」的這種情況呢？</p><p>大多數時候我們都是用 <code>Integer</code> 欄位來儲存，所以第一時間會用 <code>Model.defined_enums</code> 來檢查，果然我們的 <code>enum</code> 消失了！</p><p>首先，先來看看下面的的 Model 關係。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></div><div class="line">  has_many <span class="symbol">:virtual_orders</span>, <span class="symbol">class_name:</span> VirtualOrder</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> &lt; ApplicationRecord</span></div><div class="line">  belongs_to <span class="symbol">:user</span></div><div class="line"></div><div class="line">  enum <span class="symbol">status:</span> &#123;</div><div class="line">    <span class="symbol">pending:</span> <span class="number">0</span>,</div><div class="line">    <span class="symbol">activate:</span> <span class="number">1</span>,</div><div class="line">    <span class="symbol">completed:</span> <span class="number">2</span>,</div><div class="line">    <span class="symbol">canceled:</span> <span class="number">3</span></div><div class="line">  &#125;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtualOrder</span> &lt; ActiveType::Record[<span class="title">Order</span>]</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>這些行為關係到 Autoload 的動作，因此讀取順序會像下面這樣進行。</p><ul><li><code>Order</code> -&gt; 發現 <code>User</code> 需要讀取</li><li><code>User</code> -&gt; 因為發現了 <code>class_name</code> 後面有 Constant 提早讀取 <code>VirtualOrder</code> 物件</li><li><code>VirtualOrder</code> -&gt; 找不到 <code>defined_enums</code> 因為 Order 還沒執行到 <code>enum</code></li><li><code>Order</code> -&gt; 執行 <code>enum</code></li></ul><p>因此，只要對 <code>User</code> 稍微修正。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></div><div class="line">  has_many <span class="symbol">:virtual_orders</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 或者下面的做法</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></div><div class="line">  has_many <span class="symbol">:virtual_orders</span>, <span class="symbol">class_name:</span> <span class="string">"VirtualOrder"</span>.freeze</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>如此一來，在 Rails 執行 <code>has_many</code> 的時間點就會比 <code>autoload</code> 觸發的時間更晚，就不會讓這個問題發生。</p><p>在 Ruby 中發現 Constant 後會馬上檢查，而 Rails 會先捕捉這些錯誤做 Autoload 的處理。而 <code>has_many</code> 這些如果傳入的是字串，則會在建立關聯時才呼叫。反兒給了 <code>Order</code> 物件完全初始化的機會。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>在這次的案例中，可以知道兩個情況需要小心。</p><ol><li>使用變數儲存能被 Autoload 的 Class 的情況</li><li>互相呼叫能被 Autoload 的 Class 時的先後關係</li></ol><p>關於第一點的情況，還有另外一個關於 <code>config/initializers</code> 設定檔的有趣情況，如果有機會的話還會再做分享。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/03/06/The-Rails-auto-reload-trap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>可維護的 CSS</title>
      <link>https://blog.frost.tw/posts/2017/03/05/Talk-about-maintainable-css/</link>
      <guid>https://blog.frost.tw/posts/2017/03/05/Talk-about-maintainable-css/</guid>
      <pubDate>Sat, 04 Mar 2017 16:47:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;這週的 CSS Weekly 以及幾個前端相關的電子報都提到了叫做 &lt;a href=&quot;http://maintainablecss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maintainable CSS&lt;/a&gt; 的專案，乍看之下還以為是討論可維護 CSS 專案的文章，沒想到是一種 CSS 框架。&lt;/p&gt;
&lt;p&gt;幾年前 Responsive Web Design 和 Single Web Application 開始熱門起來的時候，大家也注意到網站使用的 CSS 逐漸複雜。所以開始有像是 OOCSS、SMACSS、BEM 等等理論出現，綜合來看這些技巧對於維護網站的樣式上都是很有幫助的。&lt;/p&gt;
&lt;p&gt;會寫這篇文章是因為 Maintainable CSS 在很多地方上跟我自己使用的方式類似，而我目前採用的則是 SMACSS 跟 BEM 的混合版本，所以就打算來分享一下自己的經驗和技巧。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>這週的 CSS Weekly 以及幾個前端相關的電子報都提到了叫做 <a href="http://maintainablecss.com/" target="_blank" rel="noopener">Maintainable CSS</a> 的專案，乍看之下還以為是討論可維護 CSS 專案的文章，沒想到是一種 CSS 框架。</p><p>幾年前 Responsive Web Design 和 Single Web Application 開始熱門起來的時候，大家也注意到網站使用的 CSS 逐漸複雜。所以開始有像是 OOCSS、SMACSS、BEM 等等理論出現，綜合來看這些技巧對於維護網站的樣式上都是很有幫助的。</p><p>會寫這篇文章是因為 Maintainable CSS 在很多地方上跟我自己使用的方式類似，而我目前採用的則是 SMACSS 跟 BEM 的混合版本，所以就打算來分享一下自己的經驗和技巧。</p><a id="more"></a><h2 id="語意化"><a href="#語意化" class="headerlink" title="語意化"></a>語意化</h2><p>Maintainable CSS 第一個章節在討論使用「語意化」的情境，也就是該怎麼對元素的樣式做命名這件事情。</p><p>像是 <code>.col-md-12</code> 被分類在非語意化的類型，而 <code>.product</code> 則屬於語意化。就我自己的習慣，其實是偏向於語意化的，雖然說 <code>.col-md-12</code> 必須改寫成 <code>.column-medium-12</code> 或者 <code>.column-pad-12</code> 之類的形式，會要多打不少字，但是從結果上來看，原始碼的可讀性就會增加非常多。</p><p>關於「語意化」的應用實例，可以參考 <a href="http://semantic-ui.com/" target="_blank" rel="noopener">Semantic UI</a> 的應用，這套 CSS Framework 就是以語意化為前提所設計，可以從中學習到非常多語意化的範例。</p><p>至於是否要堅持完全的語意化，我個人是認為不需要的。畢竟很多情境都不是絕對的，如果太過於堅持這些地方的話，反而會變成干擾排版的障礙，在可容許的範圍內有一些例外狀況是沒有關係的。</p><h2 id="重用性"><a href="#重用性" class="headerlink" title="重用性"></a>重用性</h2><p>第二個章節在討論重用性，不過我自己其實沒有很注重這部分，反而沒有太多的經驗可以分享。不過裡面提到了 SCSS 的 <code>mixin</code> 機制，確實是在重用性上非常有利的輔助。不過這部分是減少原始碼的使用，而個人認為真正的重用是對一些常用屬性的拆分，像是下面這樣的例子。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.centered</span> &#123;</div><div class="line">  &amp;<span class="selector-class">.text</span> &#123;</div><div class="line">   <span class="attribute">text-align</span>: center;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;<span class="selector-class">.block</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red centered text block is-fixed-size width-80"</span>&gt;</span></div><div class="line">  Important Message!</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>不過在 <code>mixin</code> 的應用技巧上，如果純熟使用的話也能減少不少多餘的步驟，像是下面這樣。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> button-skin(<span class="variable">$color</span>) &#123;</div><div class="line">  @<span class="keyword">extend</span> %button;</div><div class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.profile__link--button</span> &#123;</div><div class="line">  @<span class="keyword">include</span> button-skin(<span class="variable">$pattle-primary</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>透過包裝 <code>mixin</code> 讓一些常用的樣式設定可以用很簡單的方式被套用。我自己最常用的是 Media Query 的情境，使用起來類似下面這樣。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.article__quote</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line"></div><div class="line">  @<span class="keyword">include</span> at-screen(<span class="variable">$pad</span>) &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @<span class="keyword">include</span> at-screen(<span class="variable">$pc</span>) &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>順帶一提，上面這種切 Breakpoint 的做法不一定是最好的，推薦閱讀 <a href="https://medium.freecodecamp.com/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862?gi=2f6c0c5f72ef" target="_blank" rel="noopener">The 100% correct way to do CSS breakpoints</a> 這篇文章，看看怎樣切割 Breakpoint 會更恰當。</p></blockquote><h2 id="ID-的使用"><a href="#ID-的使用" class="headerlink" title="ID 的使用"></a>ID 的使用</h2><p>關於這部分，如果使用像是 SMACSS 或者 BEM 之類的，其實就很少會碰到需要用 ID 選擇器的情境。一般我都用在切割 Namespace 或者例外處理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"home"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"profile"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile__avatar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile__information"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"about"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"profile"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile__avatar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile__information"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure><p>像是上述的情況，就可以利用下面的方式在 <code>#home</code> 的時候取消掉 <code>.profile__information</code> 的顯示，這部分用在套版上帶入通用的 Widget 時就很方便。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#home</span> &#123;</div><div class="line">  <span class="selector-class">.profile__information</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>使用 BEM 的好處是，在大部分的情況下 SCSS 都只會有一個層級。一般建議的 SCSS 層級是在 3 層以內，利用這個方式可以大大的減少層級的使用，並用來針對像是 <code>::after</code> <code>:hover</code> 這些情境使用。</p></blockquote><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>Maintainable CSS 到最後才討論這個問題，不過 SMACSS 最初會先講這個通西。主要是因為對於架構的區分會影響到後續的設計，如果架構規劃不完整的話，之後其實是很難區分的。</p><p>我自己目前使用的是 SMACSS 的精簡版本，畢竟大多數專案用不到這樣的情況。</p><ul><li>/stylesheet<ul><li>application.scss</li><li>_variables.scss</li><li>_base.scss</li><li>/layouts<ul><li>_home.scss</li><li>_about.scss</li></ul></li><li>/modules<ul><li>_header.scss</li><li>_footer.scss</li><li>_profile.scss</li></ul></li><li>/mixins<ul><li>_breakpoint.scss</li></ul></li><li>/vendors<ul><li>_normalize.scss</li></ul></li></ul></li></ul><p><code>application.scss</code> 其實只是集合 CSS 檔案的用途，裡面是不寫任何樣式的（同時也做排序安排正確的讀取順序）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// application.css</span></div><div class="line"></div><div class="line">@<span class="keyword">import</span> <span class="string">'variables'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Vendors</span></div><div class="line">@<span class="keyword">import</span> <span class="string">'vendors/normalize'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Mixins</span></div><div class="line">@<span class="keyword">import</span> <span class="string">'mixins/breakpoint'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Default Skin</span></div><div class="line">@<span class="keyword">import</span> <span class="string">'base'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Modules</span></div><div class="line">@<span class="keyword">import</span> <span class="string">'modules/header'</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">'modules/footer'</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">'modules/profile'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Layouts</span></div><div class="line">@<span class="keyword">import</span> <span class="string">'layouts/home'</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">'layouts/about'</span>;</div></pre></td></tr></table></figure><p>先引用變數，再套用第三方的樣式到專案中。接著讓 Mixin 可以被後續的樣式使用，然後透過 <code>_base.scss</code> 先將預設的樣式（連結、表單這類）定義好，之後從模組開始定義，最後才是套用個別頁面的樣式。</p><p>其中把 Layout 放最後的好處就是 <code>id</code> 的使用，一般針對個別頁面設定 <code>id</code> 是相對容易的，也就是說覆蓋模組樣式微調去搭配排版的做法，也就可以相對容易地做到。</p><h2 id="命名-模組"><a href="#命名-模組" class="headerlink" title="命名/模組"></a>命名/模組</h2><p>Maintainable CSS 分開討論，不過因為 BEM 的特性比較適合一起討論這件事情。</p><p>對 BEM 來看，所有的外觀都應該要自成一個模組。但是因為我在這之中使用了 SMACSS 的理論，所以其實是有著「通用模組」跟「頁面模組」的差異，不過實際上兩者並沒有太大的差別就是了。</p><p>一個模組會由 <code>Block</code> <code>Element</code> <code>Modifier</code> 三個部分所結合而成，命名規則就是 <code>.block__element--modifier</code> 這樣的形式，不過大家應該也會注意到缺少了表示 <code>State</code> (狀態) 的規則，關於這部分對 BEM 來說大多數都是透過 Modifier 來表示的，不過我個人比較喜歡利用獨立的樣式來表示，類似下面的方式。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.profile</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.profile__details</span> &#123;</div><div class="line">  &amp;<span class="selector-class">.is-expanded</span> &#123;</div><div class="line">    <span class="attribute">max-height</span>: auto;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;<span class="selector-class">.is-collapsed</span> &#123;</div><div class="line">    <span class="attribute">max-height</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而 Modifier 則用於額外情境的樣式設定，像是上面舉例的 <code>.profile__link--button</code> 的形式，針對原有外觀「改變」的做法才使用 Modifier 的方式。</p><blockquote><p>至於是否要用 <code>is-</code> 開頭，則看情況而定。（像是 SCSSLint 選用 BEM 命名風格，這種寫法就會被抱怨 XD）</p></blockquote><h2 id="風格變化"><a href="#風格變化" class="headerlink" title="風格變化"></a>風格變化</h2><p>Maintainable CSS 是透過 <code>.profile</code> 跟 <code>.profile2</code> 的方式來區分，如果是 BEM 的話其實採用 Modifier 就可以了。如果是全站樣式的變更，那就是針對架構上追加 <code>/themes</code> 目錄，然後針對不同風格做微調。</p><hr><p>技巧上大致就是這些，透過這些技巧其實可以看出一些有趣的地方。</p><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>寫過 Vue/React 和用 Webpack 的話，應該都碰過一個 Component 裡面會把 HTML / JavaScript / CSS 一起寫進去的作法。其實我個人是不太喜歡這樣的做法，至少專案複雜起來這樣要管理對我的習慣其實反而不方便。</p><p>不過假設有需要（例如專案某個 Module 要抽出來當做多專案功用的元件）就可以直接從 <code>/modules</code> 下面把對應的模組拉出來，當作獨立的元件組到 Vue/React 裡面。</p><p>如果是這樣的情境，將 CSS 抽離專案管理我認為這才是合理的，不然大多數時候統一管理還是會比較節省力氣（不過也許對第一次接觸前端就學 Vue.js 的人來說反而相反也說不定）</p><h3 id="UIKit"><a href="#UIKit" class="headerlink" title="UIKit"></a>UIKit</h3><p>國外的設計師後來其實也對這個情況改變設計習慣，以前在學校或者公司目前大多數的做法都是設計師把每一個頁面都設計好，在轉成前端的時候才做整理跟區分元件。</p><p>不過這樣就會有一個嚴重的缺點，那就是可重用性會變很低，除非是非常有經驗的設計師。不然大多數時候即使是相似的元件，也會在不同頁面上有細微的差異造成需要整個調整樣式。</p><p>也因此，如果專案允許的話，加入 Wireframe 的規劃並且在企劃期（後端討論技術細節以及跟客戶確認功能時）就做好 UIKit 的安排。改變設計流程為 Wireframe -&gt; UIKit -&gt; Mockup 就能夠有效的改善整體的開發。</p><p>專案基本上能獲得這樣的優點：</p><ol><li>同時產出 Styleguide （前端套版有統一依據）</li><li>設計師調整版型速度加快（重排 UIKit 就可以）</li><li>前端工作量減少（跟套 Bootstrap 差不多）</li><li>調整樣式更容易</li></ol><p>不過看似簡單實際上做起來卻很困難，有一種折衷的練習方式就是以 Bootstrap 當基底設計 UIKit 來做，設計模組大多是重設 Bootstrap 樣式，改變習慣時這個做法會比較沒有壓力一點。</p><blockquote><p>不過說真的，用 Bootstrap 當基底卻有大量 Bootstrap 味道的網站樣式真是太多了，每次看到都倒抽一口氣。</p></blockquote><hr><p>開始上班後下班就很想耍廢，再加上時間也沒有多到可以一直學新技術，反而文章寫的變少。之後會盡力再多學點東西，然後分享出來給大家圍觀 XD</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2017/03/05/Talk-about-maintainable-css/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Afte PHPConf 2016</title>
      <link>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/</link>
      <guid>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/</guid>
      <pubDate>Sun, 30 Oct 2016 08:41:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;PHPConf 是退伍後參加的第三個研討會。雖然現在已經沒有什麼在寫 PHP 了，不過寫了好幾年的語言還是會想關注一下最近的狀況。&lt;/p&gt;
&lt;p&gt;今年其實沒有聽到很多議程，只聽了三場議程而已。&lt;br&gt;大部分的時間都用在跟講師聊天，不過另一方面也感受到這幾年很多活動都已經不是以前認識的人去參加。這大概就是對我們這群人來說，一個研討會的內容能帶給我們的東西已經不夠了。&lt;/p&gt;
&lt;p&gt;雖然以前會覺得自己還能夠一直參加，不過實際上當研討會分享的東西大多能靠自己學會跟吸收的時候，就沒有那麼重要。有機會的話，去做分享也是繼續參與的一個階段，能力可及的話我也會盡可能多做分享。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>PHPConf 是退伍後參加的第三個研討會。雖然現在已經沒有什麼在寫 PHP 了，不過寫了好幾年的語言還是會想關注一下最近的狀況。</p><p>今年其實沒有聽到很多議程，只聽了三場議程而已。<br>大部分的時間都用在跟講師聊天，不過另一方面也感受到這幾年很多活動都已經不是以前認識的人去參加。這大概就是對我們這群人來說，一個研討會的內容能帶給我們的東西已經不夠了。</p><p>雖然以前會覺得自己還能夠一直參加，不過實際上當研討會分享的東西大多能靠自己學會跟吸收的時候，就沒有那麼重要。有機會的話，去做分享也是繼續參與的一個階段，能力可及的話我也會盡可能多做分享。</p><a id="more"></a><h3 id="Lately-in-PHP-Unit"><a href="#Lately-in-PHP-Unit" class="headerlink" title="Lately in PHP(Unit)"></a>Lately in PHP(Unit)</h3><p>這場演講是 PHPUnit 之父在介紹 PHP 的新特性跟 PHPUnit 的改進，雖然因為精神很不好（下班都在趕自己的專案）沒有聽得很集中，不過也是瞭解到不少在 PHP7 的新特性。其實原本還蠻期待會分享一些 PHPUnit 使用上的技巧，不過看起來這部分只能在第二天加碼的 Workshop 才能學到了！</p><h3 id="Rebuild-flyingV-with-Laravel"><a href="#Rebuild-flyingV-with-Laravel" class="headerlink" title="Rebuild flyingV with Laravel"></a>Rebuild flyingV with Laravel</h3><p>強者我朋友的概念，幾年前看朋友剛退伍找工作，現在都變成 flyingV 的技術長了！演講提到不少 flyingV 在改版的過程，以及部署上自動化的做法跟應用。以現在開發工具眾多而且大多完善的情況下，部署反而成為了新的重點。</p><h3 id="敏捷估算模型-變化當下最佳化策略"><a href="#敏捷估算模型-變化當下最佳化策略" class="headerlink" title="敏捷估算模型-變化當下最佳化策略"></a>敏捷估算模型-變化當下最佳化策略</h3><p>雖然在網路上有聊過，不過這是第一次見到 91 哥本人。演講內容很有感，不過「敏捷開發」該怎麼導入跟應用，我還是抱有不少的疑問。雖然在畢業專題中有嘗試應用，但是一直都覺得還能再做改善。還好在慶功宴（今年算是貢獻度少少的工作人員）跟 91 哥聊了一下，發現 Scrum 想要導入也是有條件限制的。</p><p>尤其是 Scrum 需要有完善的條件才能順利運作，反而是另一個方向「看板方法」反而適合我跟朋友們的遊戲團隊運作。就溝通交流上，其實我們團隊的條件足夠了，但是我們卡在開發的過程上。而「看板方法」則是改善流程的方法，反而可以協助我們排除在業餘時間開發遊戲的問題。</p><h3 id="慶功宴"><a href="#慶功宴" class="headerlink" title="慶功宴"></a>慶功宴</h3><p>慶功宴算是年會為了體貼現場工作人員無法參與議程的遺憾，大多都會安排講師跟工作人員一起用餐，讓工作人員也有機會向講師提問或者閒聊。<br>我也就借這次機會跟幾位講師閒聊，順便學到新技能「我把人生都用在技術上了，我們可以聊技術嗎？」然後順利的跟講師們聊技術，這樣就不用因為大家都不知道好聊什麼而無法聊下去了 XD</p><p>想到以前 SITCON 剛辦前幾屆的時候，大家也是這樣聊技術。後來也越來越少，讓我這種技術宅覺得痛苦（苦笑）</p><p>總之，今年就這樣簡單的結束了 PHPConf 的一天。我是從研討會開始大量出現的時期開始參與的，到了現在反倒覺得以前那種各個研討會互相接力辦在一年的不同時間點，而且大家都很踴躍參加的感覺越來越弱。也許是因為我已經不是從會眾的角度去看這些事情了，不過還是希望每個研討會都能有大家的熱情在，一起享受技術。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 RubyKaigi 2016 後的新視野</title>
      <link>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/</link>
      <guid>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/</guid>
      <pubDate>Sat, 17 Sep 2016 11:31:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;八月份退伍後，馬上就加入了&lt;a href=&quot;https://5xruby.tw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;五倍紅寶石&lt;/a&gt;。而隨之而來的，剛好是在九月份為期九天的員工旅遊，一個非常充實的員工旅遊。&lt;/p&gt;
&lt;p&gt;實際上，我們只有三天左右在日本遊玩。原本的行程會穿插著與日本 Ruby 社群的交流，以及三天的 RubyKaigi 行程。&lt;/p&gt;
&lt;p&gt;這次的旅遊算是增長了不少見識，讓我想到高中快畢業時第一次知道了 COSCUP 之後瘋狂地參加各種語言的研討會，幾乎一年每個月都在跑研討會。印象沒錯的話，大概是 2013 年才參與到 RubyConf 也因為參加了 RubyConf 的活動，退伍前後蠻多工作機會都是來自 Ruby 圈的，算是整個程式經歷中給我幫助最多的社群了吧。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>八月份退伍後，馬上就加入了<a href="https://5xruby.tw" target="_blank" rel="noopener">五倍紅寶石</a>。而隨之而來的，剛好是在九月份為期九天的員工旅遊，一個非常充實的員工旅遊。</p><p>實際上，我們只有三天左右在日本遊玩。原本的行程會穿插著與日本 Ruby 社群的交流，以及三天的 RubyKaigi 行程。</p><p>這次的旅遊算是增長了不少見識，讓我想到高中快畢業時第一次知道了 COSCUP 之後瘋狂地參加各種語言的研討會，幾乎一年每個月都在跑研討會。印象沒錯的話，大概是 2013 年才參與到 RubyConf 也因為參加了 RubyConf 的活動，退伍前後蠻多工作機會都是來自 Ruby 圈的，算是整個程式經歷中給我幫助最多的社群了吧。</p><a id="more"></a><p>以前高中老師要我們回去自己找英文名，我選了一個叫做「Wade」的名字。意思是「走出去」因為當我從國中到高中，我感受到離開一個小農村到底是怎樣的不同。所以希望自己不要害怕去面對新事物，也讓我能在大學時期跑了很多研討會，學了很多東西，以及認識不少前輩。</p><p>這一次，參與 RubyKaigi 算是我第一次出國。畢竟就我的家庭狀況，也沒什麼機會出國，所以算是一次非常特別的經驗。</p><blockquote><p>第五天前都是在講旅遊的狀況，沒有興趣可以跳到第五天開始看。</p></blockquote><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>剛好遇上飛機誤點，雖然是預定下午一點多到日本關西空港，但是延後了一小時左右。不過第一天處理完各種狀況（還有新手會出問題等等）到飯店就已經是傍晚了！</p><p>身為一個動漫迷，雖然對「銀河英雄傳」不熟，不過在老闆們的推薦下就先到附近的商店街逛逛，先吃了一碗拉麵（真的比台灣好吃）就到名為「<a href="http://cafeseeadler.com/" target="_blank" rel="noopener">海鷲</a>」的咖啡廳。</p><p>事實上，除了退伍前後有稍微喝過一點台灣啤酒之外，幾乎沒有喝酒的經驗。主要是因為以前家人因為喝酒出車禍，所以其他家人就非常反對喝酒這件事情。</p><p>這次到海鷲算是我真正的第一次喝酒，原本以為很快就醉，不過似乎只要喝得慢一點其實也不會醉得那麼快。</p><p>另外就是店內非常有心，除了菜單都是用銀河英雄的梗之外，連老闆身上穿的 T-Shirt 都有所屬陣營的徽章，杯子的選用也都是參考作品的設定。</p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>因為沒有跟其他同事一起去玩環球影城（不太習慣玩這種）就跑了另外一條路線，大阪動漫宅路線。上午基本上就是先跟其中一位老闆到四天王寺附近逛逛，然後開始一路往飯店的方向走，因為中間會經過宅宅區，所以就安排這樣的路線。</p><p>中午則是在通天閣附近，先挑戰一下串炸。雖然很不喜歡海鮮，不過還是嘗試吃了一點，不過海鮮的腥味還是讓我不太適應，不過勉強是能吃下去。原本想上去通天閣，不過因為要等就直接繼續往回走。</p><p>中間一路逛了不少 3C 用品店，還有一些動漫、遊戲店。雖然有聽過 Animate 不過我在第一天晚上就自己跑去買了 CD 就沒有進去（後來才知道還有樓上，以及寫這篇文章時發現買的血界戰線 CD 買錯了，這片是廣播劇。要買 OST 那片才對，不會日文哭哭⋯⋯）</p><p>接近傍晚的時候則是到了從昭和時代就開始營業的「<a href="http://marufukucoffeeten.com/" target="_blank" rel="noopener">丸福咖啡</a>」除了沒有禁菸區之外，整間咖啡店都是古色古香的。而茶跟甜點也都蠻不錯的，個人覺得 CP 值很高⋯⋯</p><blockquote><p>而且我第一次喝到不會有苦味的紅茶，台灣的咖啡廳我每次點都會有苦味（無奈</p></blockquote><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>因為今天有交流的行程，所以早上就跑去挑戰女僕咖啡。不過有點可惜的是似乎是因為平日，女僕有點少 XD</p><p>後面趕行程就衝到京都女子大學，而且因為有點迷路所以跟老闆衝刺上山（其實有公車）之後就是我們公司的同事和對方交互做分享。</p><p>而這是我第一次覺得不會日文在日本溝通會有障礙的時候，如果想跟日本人交流真的很需要日文能力。</p><p>晚上則是到神戶一代參加地區性的 Ruby 聚會，沒想到碰到嫁過來的台灣人。這邊大多是業界人士，所以相對於學生還比較容易交流。</p><p>晚上再衝一波神戶大橋，去看 Fate/Zero 被打壞的大橋。</p><blockquote><p>這邊因為很晚了，大家都沒力。但是身為宅宅的老闆跟同事加上我都滿血，被同事拍下了四人同步前進的照片（可惜找不到）</p></blockquote><h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><p>到日本不知道為什麼我的時差好像十二小時一樣，所以到第四天其實已經有點精神錯亂了！</p><p>這天是上午先移動到京都旅館，然後到嵐山逛逛。中途遇到下雨，不過這種山林的感覺真的很不錯，非常適合來散散心。</p><p><img src="/images/the-new-vision-after-rubykaigi2016/day4.jpg" alt="嵐山風景"></p><p>而晚上回到飯店其實大家都還沒吃晚餐，就揪了一波燒肉團。這一天原本因為入伍前在學校做畢業專題吃太多的胃，又被燒肉喚醒了吃了不少東西（到現在還是會想起燒肉然後覺得餓⋯⋯）</p><h3 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h3><p>早上因為老闆們有行程，我就不能跟著亂晃。所以就決定跟同事去姬路城逛逛，雖然只有進去天守閣裡面看看。不過拿城堡的設計去看 UX 還蠻有趣的。像是城牆的設計、門檻、城被攻陷為什麼只能自殺等等，都可以用 UX 的角度去探討。</p><p>晚上因為有前夜祭（RubyKaigi 酒會 Loop 的概念）所以就先跟想回去的同事一起回到京都，然後跟老闆們匯合後去參加酒會。</p><p>不過這天其實沒有喝酒，我只是喝點果汁然後聊聊天。這一天大概是我遇到最多台灣的的一次，有去參加 RubyKaigi 的台灣人基本上都在這邊出現了。</p><p>雖然在台灣其實已經算是習慣去搭訕別人，不過在日本要嘗試搭訕外國人還是有點心理障礙，這一天就這樣默默的結束。</p><h3 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h3><p>RubyKaigi 的第一天，其實前面幾天我大多兩三點（日本時間）才睡，因為我在準備簡報。這是我入伍後第一次的演講跟，在入伍前就幾乎沒有時間演講了，重新上台就是在國外，算是格外的緊張。雖然老闆跟同事都有幫我測試過幾次的演講，但是實際上台還是會緊張。</p><p><img src="/images/the-new-vision-after-rubykaigi2016/day5.jpg" alt="RubyKaigi 2016 演講前"></p><p>尤其是上台前，前一場還在聽演講的 Matz (Ruby 之父) 還在演講廳坐著，雖然在我講完之後已經離開了，不過還真的被老闆說中會來看看（抖抖）</p><p>另外 RubyKaigi 作為一個 Ruby 重要的研討會，其實很相信講者自己會出現。不過該準備的轉接頭等等都算是有準備好，給人的感覺就是主辦一臉「反正一切都會好好運作起來」的樣子。跟在台灣我們辦研討會總是擔心這擔心那的感覺差蠻多的。</p><p>不過連 Type-C 的轉接頭（全規格）都準備好，也有簡易的導播機制，其實也是很專業。</p><p>晚上是官方的 Party 因為是講者免費入場，今天算是最多人去的 Party 吧。不過被嘲諷跟我同年紀的同事都跟人聊起來了，我還在跟同事在牆角取暖（誤）所以只好乖乖去場地中亂晃找人閒聊，雖然沒有很順利不過總算是習慣跟外國人聊天。</p><blockquote><p>其實回台灣之後手上拿到的名片比想像中的多，雖然有一部分是靠老闆吸怪⋯⋯</p></blockquote><h3 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h3><p>今天開始我聽議程都是聽到一半就睡了，導致錯過很多精彩的內容。</p><p>今天啟發我的是一個介紹 DSL 在 Ruby 裡面運用的議程（<a href="http://rubykaigi.org/2016/presentations/hsbt.html" target="_blank" rel="noopener">How DSL works on Ruby</a>）裡面介紹了不少應用方式，以及像是 Capistrano 是基於 Rake 所設計的。</p><p>這也催生了我的新專案「<a href="https://rubygems.org/gems/magica" target="_blank" rel="noopener">Magica</a>」因為演講完之後我馬上開始新的 ADV Game Framework 的開發，但是寫 CMakes 寫到覺得崩潰，懷疑人生的意義。</p><p>所以就只好做一個可以「很簡單設定好 Makefile」的工具，然後再來寫我的遊戲框架了。</p><blockquote><p>以前會覺得有些大神工具都是自己一條龍刻出來的很強，沒想到我也開始跨入那個領域了啊⋯⋯</p></blockquote><p>晚上依舊是酒會，這一天我發現了一種很好喝的酒。就是梅酒，雖然我的等級只能喝加過蘇打水的，不過也是因為很不錯就喝了三杯。而日本其實會有二次會，今天的二次會是到卡拉 OK 歡唱，雖然不會唱歌不過喝完梅酒加上啤酒的力量也是在那邊跟著搖頭晃腦起來⋯⋯</p><blockquote><p>第一次覺得有醉的感覺，但是被嫌棄還不夠醉</p></blockquote><p>不過想在 RubyKaigi 玩得盡興，果然還是要偶爾跑去練戀唱歌才行呢。這天我跟幾個比較年輕的同事就被丟包在那邊，但是我們都是不太唱歌的那種（崩潰）</p><blockquote><p>其實還有遇到一個自己在做遊戲的外國人，雖然在日本工作。而且還有來聽我的演講，整個覺得感動～～</p></blockquote><h3 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h3><p>這一天比較有印象的其實是一個遊戲開發者分享他在各種語言轉換，開發遊戲的經驗跟心路歷程。其實只跟 Ruby 扯上一點點關係，但是其實是很有趣的議程。</p><p>至於其他議程，雖然我大多有進去聽。但是都一樣還是一半就睡著的狀態，畢竟這幾天連日本人自己都玩得很 High 能醒著算是很厲害的（睡醒發現旁邊也都在睡⋯⋯）</p><p>雖然還有一場官方的 After Party 但是因為手上的日幣有點多（這幾天餐費都沒花到）所以就跟同事到 Bic Camera 這些 3C 用品店挑戰一下，我就狠下心來把耳機升級了一輪。從原本 SENNHEISER M2 IEI 這款中階耳機，換到 ATH CSK1100 這款鐵三角的低音耳機。當時在 Bic Camera 用 God Eater 一代 OP - Over the Clouds 去試聽，感覺真的超棒的。</p><p>不過其實也才日幣 24000 左右，根據我餘額的狀況，還能再買一樣東西。最後一樣被鐵三角的耳擴吸引，入手一台 AT-PHA50BT 藍芽耳擴。雖然網路上評價普通，不過就隨身攜帶性以及可以作為藍牙耳機的替代品，CP 值其實很高。</p><blockquote><p>不過，買了就回不去了⋯⋯雖然還聽不出 128k / 320k 的差異，但是耳機的差距就很明顯了。</p></blockquote><p>晚上又是一輪燒肉，雖然說是燒肉不過比較像是單點牛排的形式。嘗試了近江牛跟日本國產牛兩種牛肉的差異，不知道是價位只差一倍，師傅手藝又太好其實吃不太出來差別。</p><blockquote><p>至於神戶牛其實可以點，但是 1.5w 日幣 100g 的價位，現在還吃不下去⋯⋯</p></blockquote><h3 id="第九天"><a href="#第九天" class="headerlink" title="第九天"></a>第九天</h3><p>原本想去京都御苑，不過大家經過這八天的摧殘完全起不來。所以就改成睡飽後直接去機場，然後來一場免稅店大戰。</p><p>這時候身上大概還有剩下一點日幣，原本是想要買點甜點或者紀念品回去的。不過逛這麼多天我都沒有買，就是因為我其實很糾結做工（被打）不過都要回去了，總得想辦法花掉。</p><p>於是我跑去買了這種東西</p><p><img src="/images/the-new-vision-after-rubykaigi2016/day9.jpg" alt="茶具組"></p><p>腦波真的要弱，就會比別人弱超多的。我直接湊齊了茶具、茶葉跟有點買錯的茶點。不過日本茶真的蠻好喝的，買茶葉的時候還很貼近附上不同茶葉要使用的溫度。</p><p>之後就是回台灣，在飛機上度過一個舒適的午睡時光（笑）</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>這次去日本其實看到了很多文化上不同的點，還有他們在廣告設計、建築設計上的考量跟台灣有什麼不同。以及在日本工作的外國人（日文超熟練）是怎樣的狀況，以及來自世界各地的 Ruby 高手又是怎麼樣的。</p><p>其實學到了很多，不過這篇文章沒有馬上寫下來算是漏掉不少細節。</p><p>最重要的是，我又找回那種「我想做點什麼」的動力，一種接觸強者後的感動。<br>接下來大概會一邊寫著 Ruby 跟 Rails 一邊往把 mruby 應用在遊戲的方向前進吧，雖然不知道幾年後我的小夥伴們是否還有那個鬥志去開發遊戲，但是在這之前我會先把必備的能力都準備好。</p><blockquote><p>順便提一下，因為我是個記不起人名的傢伙。老闆在介紹「高橋征義」給我的時候，我一直覺得名字很熟悉。等到一天後我才發現我第一本 Ruby 的書就是他寫的，現場的書商還有賣新版的 ⋯⋯</p></blockquote><p>最後推廣一下 Ruby 這個語言，在 RubyKaigi 我深切的感受到 Ruby 社群是很親和的概念。就像 Ruby 世界有兩套常用 Test 工具一樣，如果你喜歡 DSL 就用 Rspec 反之喜歡物件導向，就用 Minitest。沒有人會因為你用了哪一套而對你有意見，即使你自己開發一套，大家也會用「喔！好像不錯，來試試看！」的方式去看待你的作品。</p><p>而 Ruby 除了像是 <code>is_admin?</code> 這種貼心的 Syntax 跟一些語言上的慣例外，也都是很自由的，想怎麼發揮都可以。</p><p>像是我今年演講的主題，其實是運用 Ruby 的 DSL 特性搭配上 JavaScript 的 Functional Programming 性質去實作出 GLSL 的產生器。</p><p>所以，不試試看 Ruby 嗎？</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 Gitlab CI 整合 SonarQube</title>
      <link>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/</link>
      <guid>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/</guid>
      <pubDate>Sun, 12 Jun 2016 07:12:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;之前都在偷懶沒有寫網誌，剛好這次端午連假比較長。&lt;br&gt;所以想做測試跟實驗的部分都做完了，就來寫一篇關於 Gitlab CI 整合的經驗分享。&lt;/p&gt;
&lt;p&gt;文章中大致上會涵蓋這些部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab CI 基本使用&lt;/li&gt;
&lt;li&gt;Rancher建置環境&lt;/li&gt;
&lt;li&gt;SonarQube 基本使用&lt;/li&gt;
&lt;li&gt;Gitlab CI 整合環境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章會以我在建構 CI 環境的過程中來講解，一些安裝跟配置的部分會直接跳過。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>之前都在偷懶沒有寫網誌，剛好這次端午連假比較長。<br>所以想做測試跟實驗的部分都做完了，就來寫一篇關於 Gitlab CI 整合的經驗分享。</p><p>文章中大致上會涵蓋這些部分：</p><ul><li>Gitlab CI 基本使用</li><li>Rancher建置環境</li><li>SonarQube 基本使用</li><li>Gitlab CI 整合環境</li></ul><p>文章會以我在建構 CI 環境的過程中來講解，一些安裝跟配置的部分會直接跳過。</p><a id="more"></a><h3 id="硬體環境"><a href="#硬體環境" class="headerlink" title="硬體環境"></a>硬體環境</h3><p>因為我主要是幫老爸公司建構這個環境的，所以這些配置是基於一個很小的開發團隊（不足十人）的情況去設置的，如果團隊比較大或者有其他需求，不一定會適用。</p><p>這個環境會出現兩台機器，不過實際上使用的只有一台。</p><ul><li>Synology DS1512+</li><li>Server 等級 :: i7-3820 3.6GHz / 8G RAM</li></ul><p>目前裡面只有使用這兩台 Server 下面那台是自行組的，放在一個小機櫃這樣 XD</p><blockquote><p>內部網路環境用的是 1Gbps 的 Switch 這樣</p></blockquote><p>伺服器因為組了也有三四年，裡面用的是單顆 SSD 原本是 96GB 的前陣子換成 256GB 的 SSD，不過為了避免容量爆炸所以透過 NAS 設定了 ISCSI 給 Server 用，容量是 1TB 這樣。</p><blockquote><p>不過體驗到了 Docker Pull 的慢速，所以 ISCSI 只用在 Container 本身的資料保存。</p></blockquote><h3 id="軟體環境"><a href="#軟體環境" class="headerlink" title="軟體環境"></a>軟體環境</h3><p>伺服器上用的是 Ubuntu 14.04 版本，裡面只安裝以下三個套件。</p><ul><li>Nginx - 做反向代理</li><li>Docker</li><li>Rancher - Container 管理</li></ul><p>所有的服務都是透過 Docker 架設，對外的 Web 介面則用 Nginx 導出。</p><blockquote><p>Production 不能這樣玩，像是 Database 會有效能貧頸等等問題。</p></blockquote><h3 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h3><p>一張圖解釋 XD</p><p><img src="/images/working-gitlab-ci-with-sonarqube/rancher.png" alt="Rancher 配置"></p><p>Fluentd 是拿來玩的，至於配置的話都是使用 <code>docker-compose.yml</code> 上傳設定來處理的。</p><figure class="highlight yaml"><figcaption><span>gitlab.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="attr">postgresql:</span></div><div class="line"><span class="attr">  restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">  image:</span> <span class="string">sameersbn/postgresql:9.4-18</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_USER=gitlab</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_PASS=[hidden]</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_NAME=gitlabhq_production</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_EXTENSION=pg_trgm</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/gitlab/postgresql:/var/lib/postgresql</span></div><div class="line"><span class="attr">gitlab:</span></div><div class="line"><span class="attr">  restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">  image:</span> <span class="string">sameersbn/gitlab:8.6.4</span></div><div class="line"><span class="attr">  links:</span></div><div class="line"><span class="attr">    - redis:</span><span class="string">redisio</span></div><div class="line"><span class="attr">    - postgresql:</span><span class="string">postgresql</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"10080:80"</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"10022:22"</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DEBUG=false</span></div><div class="line"><span class="bullet">    -</span> <span class="string">TZ=Asia/Taipei</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_TIMEZONE=Taipei</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_SECRETS_DB_KEY_BASE=[hidden]</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_HOST=localhost</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_PORT=10080</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_SSH_PORT=10022</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_RELATIVE_URL_ROOT=</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_NOTIFY_ON_BROKEN_BUILDS=true</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_NOTIFY_PUSHER=false</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_EMAIL=notifications@moho.com.tw</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_EMAIL_REPLY_TO=noreply@moho.com.tw</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_INCOMING_EMAIL_ADDRESS=gitlab@moho.com.tw</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_BACKUP_SCHEDULE=daily</span></div><div class="line"><span class="bullet">    -</span> <span class="string">GITLAB_BACKUP_TIME=01:00</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_ENABLED=true</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_DOMAIN=moho.com.tw</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_HOST=192.168.100.230</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_PORT=587</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_USER=gitlab</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_PASS=[hidden]</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_STARTTLS=true</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SMTP_AUTHENTICATION=login</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_ENABLED=true</span></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_HOST=192.168.100.230</span></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_PORT=993</span></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_USER=gitlab</span></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_PASS=[hidden]</span></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_SSL=true</span></div><div class="line"><span class="bullet">    -</span> <span class="string">IMAP_STARTTLS=false</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/gitlab/gitlab:/home/git/data</span></div><div class="line"><span class="attr">redis:</span></div><div class="line"><span class="attr">  restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">  image:</span> <span class="string">sameersbn/redis:latest</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/gitlab/redis:/var/lib/redis</span></div></pre></td></tr></table></figure><p>基本上沒什麼特別，就是照 Docker Image 的範例修改環境變數跟設定而已。</p><blockquote><p>用 Rancher 的好處是之後升級可以用 Upgrade 修改 Image 的版本 Tag 就能夠升級了～</p></blockquote><p>SonarQube 的部分也一樣</p><figure class="highlight yaml"><figcaption><span>sonarqube.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">postgresql:</span></div><div class="line"><span class="attr">  restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">  image:</span> <span class="string">sameersbn/postgresql:9.4-18</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_USER=sonar</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_PASS=[hidden]</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_NAME=sonar</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_EXTENSION=pg_trgm</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/sonarqube/postgresql:/var/lib/postgresql</span></div><div class="line"><span class="attr">sonarqube:</span></div><div class="line"><span class="attr">  restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">  image:</span> <span class="string">sonarqube</span></div><div class="line"><span class="attr">  links:</span></div><div class="line"><span class="attr">    - postgresql:</span><span class="string">postgresql</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"10081:9000"</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SONARQUBE_JDBC_URL=jdbc:postgresql://postgresql:5432/sonar</span></div><div class="line"><span class="bullet">    -</span> <span class="string">SONARQUBE_JDBC_PASSWORD=[hidden]</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/sonarqube/extensions:/opt/sonarqube/extensions</span></div></pre></td></tr></table></figure><p>這樣一來就能跑起來了，至於像是 Nginx 的反向代理我就不另外敘述摟～～</p><h3 id="Gitlab-CI-入門"><a href="#Gitlab-CI-入門" class="headerlink" title="Gitlab CI 入門"></a>Gitlab CI 入門</h3><p>安裝部分就參考官方的<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener">文件</a>來安裝，基本上不難。<br>之後就是把它 Register 到 Gitlab 上面，有趣的是他可以登記到多個 Gitlab 而不限一個，我自己是開一個 Container 去跑，然後給權限讓他能在 Host 上面開新的 Container (Runner) 這樣。</p><p>那麼，先來講幾個關鍵的點吧 XD</p><h4 id="NAT-問題"><a href="#NAT-問題" class="headerlink" title="NAT 問題"></a>NAT 問題</h4><p>因為路由器設定的問題，所以在 Runner 去 Clone 專案的時候會有些障礙。</p><p>假設我的 Gitlab Host 是 <code>gitlab.xxx.com.tw</code> 那麼網路設定大概是這樣。</p><p>LAN —-&gt; NAT —–&gt; WAN</p><p>不過 LAN 裡面又有不同的機器，而老爸公司用的是固定 IP （五組）所以我就透過 IP 去分要導去哪台。</p><p>59.x.x.49 —&gt; NAS<br>59.x.x.50 —&gt; Server</p><p>這是透過 Public IP 設定的，但是在 Server 裡面會變成</p><p>LAN IP —-&gt; NAT —–&gt; Server</p><p>結果 NAT 就不覺得 Server 裡面是走 59.x.x.50 進來的（崩潰）</p><p>所以只好對 Gitlab Runner 動手腳 XD</p><blockquote><p>Gitlab CI 的 Runner 有一個全域的設定檔，我們給他改造一下</p></blockquote><figure class="highlight"><figcaption><span>/etc/gitlab-runner/config.tmol</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[[runners]]</div><div class="line">  name = "ruby-2.1-docker"</div><div class="line">  url = "https://CI/"</div><div class="line">  token = "TOKEN"</div><div class="line">  limit = 0</div><div class="line">  executor = "docker"</div><div class="line">  builds_dir = ""</div><div class="line">  shell = ""</div><div class="line">  environment = ["ENV=value", "LC_ALL=en_US.UTF-8"]</div><div class="line">  disable_verbose = false</div></pre></td></tr></table></figure><p>上面是設定為 Docker 模式的 Runner，我們現在要讓 Host 的 <code>gitlab.xxx.com.tw</code> 直接用 Host IP 而不是 Public IP 讓他跳過 NAT 的解析。</p><figure class="highlight"><figcaption><span>/etc/gitlab-runner/config.tmol</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[runners.docker]</div><div class="line">  // 略</div><div class="line">  extra_hosts = ["gitlab.xxx.com.tw:127.10.0.1"]</div></pre></td></tr></table></figure><p>在 <code>runners.docker</code> 的部分，可以直接告訴他 <code>/etc/hosts</code> 要新增哪幾筆資料。</p><h4 id="設定檔"><a href="#設定檔" class="headerlink" title="設定檔"></a>設定檔</h4><p>接下來就是學 <code>.gitlab-ci.yml</code> 怎麼寫了，如果用過 Travis CI 之類的服務應該都是可以駕輕就熟拉 XD</p><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">before_script:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">GRADLE_USER_HOME=`pwd`/.gradle</span></div><div class="line"><span class="bullet">  -</span> <span class="string">mkdir</span> <span class="bullet">-p</span> <span class="string">$GRADLE_USER_HOME</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.daemon=true"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.parallel=true"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.configureondemand=true"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"></div><div class="line"><span class="attr">cache:</span></div><div class="line"><span class="attr">  paths:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">.gradle/caches</span></div><div class="line"><span class="bullet">    -</span> <span class="string">.gradle/wrapper</span></div><div class="line"></div><div class="line"><span class="attr">junit:</span></div><div class="line"><span class="attr">  image:</span> <span class="string">elct9620/gitlab-android-junit</span></div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">./gradlew</span> <span class="string">test</span></div><div class="line"></div><div class="line"><span class="attr">sonar:</span></div><div class="line"><span class="attr">  image:</span> <span class="string">elct9620/gitlab-sonar-scanner</span></div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"/bin/true"</span></div></pre></td></tr></table></figure><p>先看一下我目前用的 Gitlab CI 設定檔。</p><p>基本上分為兩種</p><ul><li>Job</li><li>Config</li></ul><p>如果是關鍵字，就會被分類成 Config 像是 <code>cache</code> <code>before_script</code> 這種，如果寫在 Job 外面就是 Global 的，寫在裡面就只對某個 Job 生效。</p><blockquote><p>因為這是 Java 專案，所以我讓所有的 Task 都支援 Gradle 的設定（SonarQube 怎麼上 Cache 還沒找到⋯⋯）</p></blockquote><p>至於該怎麼寫，大致上就是這樣的格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attr">job:</span></div><div class="line"><span class="attr">  config:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">xxx</span></div><div class="line"><span class="bullet">    -</span> <span class="string">xxx</span></div></pre></td></tr></table></figure><p>例如我要用 ruby-2.3 然後跑 rspec 並且快取 <code>cache</code> 目錄</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rspec:</span> <span class="comment"># 新增 RSpec 任務</span></div><div class="line"><span class="attr">  image:</span> <span class="attr">ruby:2.3</span> <span class="comment"># 設定 Docker Image 沒有則用預設值</span></div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rspec</span> <span class="comment"># 執行指令</span></div><div class="line"><span class="attr">  cache:</span></div><div class="line"><span class="attr">    paths:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">cache</span> <span class="comment"># 快取目錄</span></div></pre></td></tr></table></figure><p>這邊基本上不難，但是要注意幾點</p><ul><li>Working Directory 是在 Gitlab 設定的目錄</li><li>Script 跟 Entrypoint 不相容，他是真實一段 Shell Script 注入你的 Script</li><li>Cache 只在 Working Directory 中可以運作</li></ul><blockquote><p>關於 Cache 官方的 Issue 上面有人說如果是 <code>/root</code> 的形式，可以運作。但是 <code>/root/gradle</code> 就不行。</p></blockquote><hr><p>其他部分看文件就好了，最基本的使用其實就這樣 XD<br>然後放到專案的根目錄下就會自動被 Gitlab 偵測然後自動運行。</p><blockquote><p>關於 Pipline 等等就等之後有機會再跟大家分享拉 XD</p></blockquote><h3 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h3><p>前面已經裝好了，其實不需要再多做設定。<br>這邊簡單分享一下自製 Docker Image 的心得這樣。</p><p>因為只是單純的需要 Docker 環境，所以只要使用官方的 <code>java:8-jre-alpine</code> 版本就可以了！</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jre-alpine</div><div class="line"><span class="keyword">MAINTAINER</span> 蒼時弦也 docker@frost.tw</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> SONAR_SCANNER_VERSION <span class="number">2.6</span>.<span class="number">1</span></div><div class="line"><span class="keyword">ENV</span> SONAR_SCANNER_HOME /opt/sonar-scanner-$&#123;SONAR_SCANNER_VERSION&#125;</div><div class="line"><span class="keyword">ENV</span> SONAR_SCANNER_PACKAGE sonar-scanner-$&#123;SONAR_SCANNER_VERSION&#125;.zip</div><div class="line"><span class="keyword">ENV</span> HOME $&#123;SONAR_SCANNER_HOME&#125;</div><div class="line"></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apk update \</span></div><div class="line">  &amp;&amp; apk add bash wget ca-certificates unzip \</div><div class="line">  &amp;&amp; wget https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/<span class="variable">$&#123;SONAR_SCANNER_PACKAGE&#125;</span> \</div><div class="line">  &amp;&amp; unzip <span class="variable">$&#123;SONAR_SCANNER_PACKAGE&#125;</span> \</div><div class="line">  &amp;&amp; rm <span class="variable">$&#123;SONAR_SCANNER_PACKAGE&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> addgroup sonar \</span></div><div class="line">  &amp;&amp; adduser -D -s /usr/sbin/nologin -h <span class="variable">$&#123;SONAR_SCANNER_HOME&#125;</span> -G sonar sonar \</div><div class="line">  &amp;&amp; chown -R sonar:sonar <span class="variable">$&#123;SONAR_SCANNER_HOME&#125;</span> \</div><div class="line">  &amp;&amp; mkdir -p /data \</div><div class="line">  &amp;&amp; chown -R sonar:sonar /data</div><div class="line"></div><div class="line"><span class="keyword">USER</span> sonar</div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /data</span></div><div class="line"></div><div class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></div><div class="line"></div><div class="line"><span class="keyword">ADD</span><span class="bash"> entrypoint.sh /entrypoint.sh</span></div><div class="line"></div><div class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/entrypoint.sh"</span>]</span></div></pre></td></tr></table></figure><p>基本上就只是把 Sonar Scanner 抓下來，然後放到指定的目錄。<br>不過真正困難的點就在額外的設定 <code>entrypoint.sh</code> 了！</p><p>如果是一般使用，直接將 <code>ENTRYPOINT</code> 設定成 Sonar Scanner 就可以。<br>但是會暴露在外部網路的環境，一定需要使用者驗證。</p><blockquote><p>Sonar Qube 如果開啟 <code>Force Authentication</code> 就一定要用帳號密碼或者 Token 才能透過 API 上傳需要分析的程式碼。</p></blockquote><p>所以我弄了一個 Shell Script 當 Entrypoint 來解決這個問題</p><figure class="highlight shell"><figcaption><span>entrypoint.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">set -e</div><div class="line"></div><div class="line">VERSION=$&#123;CI_BUILD_TAG:-"$&#123;CI_BUILD_REF_NAME&#125;"&#125;</div><div class="line"></div><div class="line">OPTS="-Dsonar.projectVersion=$&#123;VERSION&#125; -Dsonar.gitlab.project_id=$&#123;CI_PROJECT_ID&#125; -Dsonar.gitlab.commit_sha=$&#123;CI_BUILD_REF&#125; -Dsonar.gitlab.ref_name=$&#123;CI_BUILD_REF_NAME&#125; -Dsonar.issuesReport.console.enable=true"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> TODO: Improve entrypoint to support gitlab-runner</span></div><div class="line">cd $&#123;CI_PROJECT_DIR&#125;</div><div class="line">if [[ ! -z $SONAR_TOKEN ]]; then</div><div class="line"><span class="meta">  $</span><span class="bash">&#123;SONAR_SCANNER_HOME&#125;/bin/sonar-scanner -Dsonar.login=<span class="variable">$&#123;SONAR_TOKEN&#125;</span> <span class="variable">$&#123;OPTS&#125;</span></span></div><div class="line">else</div><div class="line"><span class="meta">  $</span><span class="bash">&#123;SONAR_SCANNER_HOME&#125;/bin/sonar-scanner <span class="variable">$&#123;OPTS&#125;</span></span></div><div class="line">fi</div></pre></td></tr></table></figure><p>基本上很簡單，利用 Scanner 的 <code>-D</code> 補足缺少的參數，跟自動填入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VERSION=$&#123;CI_BUILD_TAG:-"$&#123;CI_BUILD_REF_NAME&#125;"&#125;</div></pre></td></tr></table></figure><p>因為會需要給版本，但是照我的習慣會忘記是哪個版本，不如就自動用 Tag / Branch Name 來當版本 XD</p><blockquote><p>但是似乎會被蓋掉拉，所以有實用性有待商榷（但是這是必填項目）</p></blockquote><p>剩下的 <code>OPTS</code> 則是跟 Gitlab 整合的部分，目前還沒有成功。</p><blockquote><p>正常運作的話會自動到 Gitlab 當次 Commit 留言說有 Bad Semll 之類的 XD</p></blockquote><p>最後是 Token 了，因為不可能直接把 Token 寫在 <code>.gitlab-ci.yml</code> 當環境變數放進去，所以我是在 Gitlab 的專案設定中寫進去。</p><p>也許你會想說這樣做：</p><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sonar:</span></div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="bullet">-Dsonar.logn=$&#123;SONAR_TOKEN&#125;</span></div></pre></td></tr></table></figure><p>但是前面有提到，因為是 Gitlab 自己的 Shell Script 所以不太可能這樣做。<br>所以就只好給個 Shell Script 來自己處理這個問題摟～ XD</p><blockquote><p>寫這篇文章時想到我好像可以設定 $PATH 然後直接跑 <code>sonar-scanner -Dsonar.login</code> 就好了！？</p></blockquote><p>最後，在專案目錄設定一下 Sonar 的設定檔，扣掉 Token 不適合放到 VCS 之外，其他都可以安心寫在裡面。</p><figure class="highlight plain"><figcaption><span>sonar-project.properties </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sonar.host.url=http://sonarqube.xxx.com.tw</div><div class="line"># must be unique in a given SonarQube instance</div><div class="line">sonar.projectKey=storemap:Android</div><div class="line"># this is the name displayed in the SonarQube UI</div><div class="line">sonar.projectName=StoreMap Android</div><div class="line"></div><div class="line"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.</div><div class="line"># Since SonarQube 4.2, this property is optional if sonar.modules is set.</div><div class="line"># If not set, SonarQube starts looking for source code from the directory containing</div><div class="line"># the sonar-project.properties file.</div><div class="line">sonar.sources=app/src</div><div class="line"></div><div class="line"># Encoding of the source code. Default is default system encoding</div><div class="line">#sonar.sourceEncoding=UTF-8</div></pre></td></tr></table></figure><p>預設的 <code>sonar.host.url</code> 是 <code>http://localhost:9000</code> 為了要正確上傳，記得加上這行設定到對應的網址上。</p><h3 id="Android-SDK-amp-JUnit"><a href="#Android-SDK-amp-JUnit" class="headerlink" title="Android SDK &amp; JUnit"></a>Android SDK &amp; JUnit</h3><p>網路上 Google 了一下，都沒有滿意的 SDK （誤）所以只好自己包一份 XD</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jdk</div><div class="line"><span class="keyword">MAINTAINER</span> 蒼時弦也 docker@frost.tw</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> ANDROID_SDK_VERSION r24.<span class="number">4.1</span></div><div class="line"><span class="keyword">ENV</span> ANDROID_SDK_SOURCE https://dl.google.com/android/android-sdk_$&#123;ANDROID_SDK_VERSION&#125;-linux.tgz</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash">  apt-get update \</span></div><div class="line">  &amp;&amp; apt-get install -y ca-certificates lib32stdc++6 lib32z1 lib32z1-dev \</div><div class="line">  &amp;&amp; mkdir -p /opt</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> curl -L <span class="variable">$&#123;ANDROID_SDK_SOURCE&#125;</span> | tar zxv -C /opt</span></div><div class="line"></div><div class="line"><span class="keyword">ENV</span> ANDROID_HOME /opt/android-sdk-linux</div><div class="line"></div><div class="line"><span class="keyword">ENV</span> PATH $PATH:$ANDROID_HOME/tools</div><div class="line"><span class="keyword">ENV</span> PATH $PATH:$ANDROID_HOME/platform-tools</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter tools \</span></div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter platform-tools \</div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter extra-android-support \</div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter extra-android-m2repository \</div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter extra-google-google_play_services \</div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter extra-google-m2repository</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter android-23 \</span></div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter build-tools-23.0.2 \</div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter build-tools-23.0.1 \</div><div class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"y"</span> | android update sdk -u -a --filter build-tools-23.0.0</div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash">  mkdir ~/.gradle \</span></div><div class="line">true&amp;&amp; <span class="built_in">echo</span> <span class="string">"org.gradle.daemon=true"</span> &gt;&gt; ~/.gradle/gradle.properties \</div><div class="line">true&amp;&amp; <span class="built_in">echo</span> <span class="string">"org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"</span> &gt;&gt; ~/.gradle/gradle.properties \</div><div class="line">true&amp;&amp; <span class="built_in">echo</span> <span class="string">"org.gradle.parallel=true"</span> &gt;&gt; ~/.gradle/gradle.properties \</div><div class="line">true&amp;&amp; <span class="built_in">echo</span> <span class="string">"org.gradle.configureondemand=true"</span> &gt;&gt; ~/.gradle/gradle.properties</div></pre></td></tr></table></figure><p>原本是想用 <code>alpine</code> 的版本，不過在跑的時候會碰到因為缺少 <code>lib32stdc++</code> 跟 <code>lib32z1</code> 這兩個套件而無法正常運作。<br>但是 Alpine 似乎沒有 <code>lib32z1</code> 只有 <code>zlib-dev</code> 可以用，總之因為出問題就只好放棄了 XD</p><p>目前用 API v23 開發，沒有要向下相容的需求就只先把 23 版的部分放進去。<br>至於上面一對 Support 部分裡面還包含了 Android Uint Test 的部分，所以都是得乖乖放進去（也包含了 Firebase 套件⋯⋯）</p><p>最後針對 Gradle 做一些額外設定，像是開啟 Parallel 之類的可以讓 Gradle 跑得比較快些。</p><hr><p>剩下的 Cache 就參考前面我的 Gitlab 設定檔摟</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">before_script:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">GRADLE_USER_HOME=`pwd`/.gradle</span></div><div class="line"><span class="bullet">  -</span> <span class="string">mkdir</span> <span class="bullet">-p</span> <span class="string">$GRADLE_USER_HOME</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.daemon=true"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.parallel=true"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">"org.gradle.configureondemand=true"</span> <span class="string">&gt;&gt;</span> <span class="string">$GRADLE_USER_HOME/gradle.properties</span></div><div class="line"></div><div class="line"><span class="attr">cache:</span></div><div class="line"><span class="attr">  paths:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">.gradle/caches</span></div><div class="line"><span class="bullet">    -</span> <span class="string">.gradle/wrapper</span></div><div class="line"></div><div class="line"><span class="attr">junit:</span></div><div class="line"><span class="attr">  image:</span> <span class="string">elct9620/gitlab-android-junit</span></div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">./gradlew</span> <span class="string">test</span></div></pre></td></tr></table></figure><p>這邊比較特別的是我將 Gradle 的目錄改到目前 Gitlab 運行的目錄。<br>前面有提到因為 Cache 只對當前目錄（專案目錄）有效果，所以必須這樣設定才能正確的快取到。</p><p>不過原本做的設定也會一併消失，所以要在寫入一次設定。</p><blockquote><p>Image 會叫 <code>gitlab-android-junit</code> 是因為我沒想到 Gradle 會裝好 JUnit 的關係，之後應該是會改名拉 XD</p></blockquote><hr><p>開始寫文章的時候離準備收假只剩下一個多小時，可能不是很詳細，請大家見諒。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/#disqus_thread</comments>
    </item>
    
    <item>
      <title>從入伍後讀的一些書</title>
      <link>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/</link>
      <guid>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/</guid>
      <pubDate>Tue, 12 Apr 2016 06:22:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;入伍之後一直擔心自己的技術會退步，所以其實有好幾個月的時間都很焦慮。&lt;br&gt;不過運氣不錯的是，所處的單位算是不錯的，現在的區隊長管理方式也讓我有不少時間可以充分利用。&lt;/p&gt;
&lt;p&gt;這邊就簡單介紹一下到目前約八個月多所讀的書，大部分時間都是利用睡前跟午睡時間去讀的，一次大約十到二十分鐘，反而因為軍隊規律的生活變成每天讀書的習慣，意外讀了不少。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>入伍之後一直擔心自己的技術會退步，所以其實有好幾個月的時間都很焦慮。<br>不過運氣不錯的是，所處的單位算是不錯的，現在的區隊長管理方式也讓我有不少時間可以充分利用。</p><p>這邊就簡單介紹一下到目前約八個月多所讀的書，大部分時間都是利用睡前跟午睡時間去讀的，一次大約十到二十分鐘，反而因為軍隊規律的生活變成每天讀書的習慣，意外讀了不少。</p><a id="more"></a><p>前期都是讀實體書比較多，因為當時還沒開放使用智慧型手機。<br>目前大多用手機讀，不過就被限制在資訊相關領域的，前期比較多是在設計領域的書。</p><p>其實有幾本書名也沒有印象了，所以就簡單介紹一下。</p><h3 id="GUI-Design"><a href="#GUI-Design" class="headerlink" title="GUI Design"></a>GUI Design</h3><p>這本書是很早期看的書，厚厚的一本，裡面類似型錄一樣紀錄了不少介面設計的作品。<br>其實我覺得對設計師來說，多看作品的益處是很大的，而且也有助於靈感的尋找。</p><h3 id="設計的心理學"><a href="#設計的心理學" class="headerlink" title="設計的心理學"></a>設計的心理學</h3><p>這也是一本很有趣的書，從從心理學的角度去看設計。<br>其實這也跟最近常常在討論的 UX 有不少關係，像是門把的設計在人的習慣中會辨識為哪種操作方式。<br>有些設計讓你猜不出用途，是為了阻止一般人去使用之類的。</p><hr><p>中間有讀了一些書，不過其實沒什麼印象。<br>一部分是簡單的小書（50 幾頁左右）後面基本上就是電子書的部分了！</p><h3 id="Implementing-Laravel"><a href="#Implementing-Laravel" class="headerlink" title="Implementing Laravel"></a>Implementing Laravel</h3><p>裡面介紹了一些 Laravel 在實作上使用的一些技巧與 Design Pattern 不過現在去回想除了一些設計模式還有印象外，對書的內容只剩下「原來可以用如此巧妙的方式寫 PHP 框架」的感嘆了⋯⋯</p><h3 id="Microservices-in-Go"><a href="#Microservices-in-Go" class="headerlink" title="Microservices in Go"></a>Microservices in Go</h3><p>一本我買了幾年作者都還沒寫完的書，也不清楚什麼時候會寫完。<br>不過倒是給了想利用 Golang 開發 Microservice 的人不錯的參考範例，畢竟就我自己的經驗框架很多，但是實務上的分享卻不多呢！</p><p>順帶一提，架構設計上大概是這樣的：</p><ul><li>application<ul><li>serviceA<ul><li>model</li><li>controller</li></ul></li><li>serviceB<ul><li>model</li><li>controller</li></ul></li><li>view</li></ul></li></ul><p>不過後來看了 Heroku 的 Go-kit 之後，又有不同的見解。<br>這樣的設計主要是抽象化跟分離的設計，每個服務之間都封裝好如何操作，實際上呼叫只需要知道 API 就足夠了。</p><blockquote><p>我覺得相較傳統的做法來說，架構上是需要非常獨立的設計。也認為這是之前一篇介紹架構文章中所敘述，其實 Microservice 實作並不容易的原因。</p></blockquote><h3 id="Learning-C-by-Creating-Games-with-UE4"><a href="#Learning-C-by-Creating-Games-with-UE4" class="headerlink" title="Learning C++ by Creating Games with UE4"></a>Learning C++ by Creating Games with UE4</h3><p>在 Google Play Store 上面買的書，是想要看看其他人怎麼用 C++ 去開發 UE4 為基礎的遊戲。</p><blockquote><p>順帶一提，用手機看書大推非 PDF 格式，現在 Android / iOS 的閱讀工具都有翻譯功能，讀原文很方便，唯獨 PDF 不能翻譯也不能自適應成適合螢幕大小的文字，挺困擾的。</p></blockquote><p>前半部大多在講 C++ 基礎，從高中讀過螞蟻書之後就一直沒碰，算是當作一個複習。<br>後半部在實作簡易的 ARPG 系統，至少我在大學前期開發的方向其實沒有差太多（意外發現寫遊戲系統沒有想像中難）</p><p>不過 Unreal Engine 4 的原始碼還是得熟讀才能熟練運用 C++ 開發遊戲，大概會是之後的課題之一。</p><h3 id="Ruby-Perdormance-Optimization"><a href="#Ruby-Perdormance-Optimization" class="headerlink" title="Ruby Perdormance Optimization"></a>Ruby Perdormance Optimization</h3><p>這本書開始就讀蠻久了，大概都是有 300 ~ 400 頁左右的原文書，相較前幾本頂多 100 ~ 200 頁就吃力很多。</p><p>不過即使不是針對 Ruby 也是一本很棒的書，裡面一直在傳授優化的概念。<br>基本上就是兩個方向，一個是記憶體的使用（跟 GC 有關）另一個是運算的方式，另外介紹像是 Profiler 等工具，算是讓我對使用 Profiler 比較有了解。</p><p>使用工具跟找貧頸的技巧在其他語言也很受用，另外就是要注意語言特性問題。</p><blockquote><p>像是 Ruby 在字串操作上會因為複製記憶體增加 GC 負擔，如果沒有必要可以利用 ! 的方式避免複製等等。</p></blockquote><h3 id="Eloquent-JavaScript"><a href="#Eloquent-JavaScript" class="headerlink" title="Eloquent JavaScript"></a>Eloquent JavaScript</h3><p>前面應該還有幾本小書被我漏掉，最近期的應該就是這本。<br>就 JavaScript 入門書來說我覺得算是很棒的一本書，介紹的非常有系統跟全面。</p><blockquote><p>就是讓我覺得廢話有點多，看了好久介紹才讀到正文 XD</p></blockquote><p>裡面常利用透過設計小遊戲的方式去介紹 JavaScript 讓人比較不會覺得乏味，順便也讓我吸收幾招以後可以設計遊戲用的技巧。</p><p>當初會讀是因為入門書的推薦，讀完之後真心覺得真的是非常適合入門的書。</p><h3 id="What-to-Look-for-in-a-Code-Review"><a href="#What-to-Look-for-in-a-Code-Review" class="headerlink" title="What to Look for in a Code Review"></a>What to Look for in a Code Review</h3><p>一本介紹在做 Code Review 該注意的重點，基本上分成幾個章節去看幾大重點。<br>像是安全性、在多執行緒的使用、資料結構使用的正確性等等，除了看別人程式碼可以用到之外，用來反思自己在寫程式時是否有注意到，也是很不錯的。</p><h3 id="TypeScript-Deep-Dive"><a href="#TypeScript-Deep-Dive" class="headerlink" title="TypeScript Deep Dive"></a>TypeScript Deep Dive</h3><p>因為以後可能會用到，所以讀了這本書算是 TypeScript 的入門系列。<br>雖然有幾個章節似乎還沒寫完，但是是免費電子書就無視了！</p><p>實際了解 TypeScript 之後，我馬上從原本的純 JavaScript （最早是 CoffeeScript）轉換到 TypeScript 上面，因為我覺得這樣的設計有助於我產出的程式碼品質改善。</p><p>尤其是我注意到一個點，那就是在 C/C++ 中常用的 header 設計，跟 TypeScript 的 Defined File 有異曲同工之妙，而且很重要的是他能讓開發者先「思考」API 的設計，再去實作內容。</p><p>某方面來講是改善程式碼品質的一個方法，很大的原因是因為這個讓我決定轉換跑道。</p><h3 id="SDL-Game-Development"><a href="#SDL-Game-Development" class="headerlink" title="SDL Game Development"></a>SDL Game Development</h3><p>目前主要在讀的書，跟 <code>Learning C++ by Creating Games with UE4</code> 是同一家出版社。<br>似乎是這家出很多寫遊戲相關的書，所以常常買到。</p><p>不過重點不在這，這本比較面向有基礎的 C++ 遊戲開發者。裡面對 C++ 的介紹不像前一本那樣，但是帶入了不少基本的 Game Design Pattern （有一本書書名跟這類似，可以查一下）範例，而且這家出版社的書用字非常容易讀，大概三天左右我就讀完快 300 頁（也包含是留守期間，時間比較多一點）</p><p>想從零開始寫一個遊戲，讀這本書算是蠻不錯的選擇。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>已經很久沒有讀這麼多書了，前幾年東忙西忙的也都沒有好好看書。雖然帶實體書看的機會很少，但是電子書意外成為我的好夥伴。剩下還有三個月多，應該會繼續好好利用多讀一點。</p><p>退伍希望還可以有讀書的習慣，待會又要回營區了（傷心）</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Deis 架構分析（二）</title>
      <link>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</link>
      <guid>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</guid>
      <pubDate>Wed, 03 Feb 2016 07:54:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;延續&lt;a href=&quot;http://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1&quot;&gt;上一篇&lt;/a&gt;的內容，這篇文章要先來討論比較好懂的 &lt;code&gt;Router&lt;/code&gt; 部分。&lt;/p&gt;
&lt;p&gt;首先，在 Deis 的設計裡面，基本上所有的服務都是包成一個 Image 作為 Continaer 在 CoreOS 運行的。就這點來看，其實是非常符合 Mircoservice 架構的設計。同時我們也可以很輕鬆地將這些服務獨立出來使用，這篇文章討論的 &lt;code&gt;Router&lt;/code&gt; 除了原本的用途外，也很適合用來學習透過 etcd 部署自動化更新設定檔的環境。&lt;/p&gt;
&lt;p&gt;Deis 的原始碼都放在一起，其中 &lt;a href=&quot;https://github.com/deis/deis/tree/master/router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Router&lt;/a&gt; 部分是裡面的一個子目錄，那麼就讓我們開始了解運行的架構吧！&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>延續<a href="http://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1">上一篇</a>的內容，這篇文章要先來討論比較好懂的 <code>Router</code> 部分。</p><p>首先，在 Deis 的設計裡面，基本上所有的服務都是包成一個 Image 作為 Continaer 在 CoreOS 運行的。就這點來看，其實是非常符合 Mircoservice 架構的設計。同時我們也可以很輕鬆地將這些服務獨立出來使用，這篇文章討論的 <code>Router</code> 除了原本的用途外，也很適合用來學習透過 etcd 部署自動化更新設定檔的環境。</p><p>Deis 的原始碼都放在一起，其中 <a href="https://github.com/deis/deis/tree/master/router" target="_blank" rel="noopener">Router</a> 部分是裡面的一個子目錄，那麼就讓我們開始了解運行的架構吧！</p><a id="more"></a><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.2</span></div><div class="line"></div><div class="line"><span class="comment"># install common packages</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update-cache \</span></div><div class="line">  bash \</div><div class="line">  curl \</div><div class="line">  geoip \</div><div class="line">  libssl1.0 \</div><div class="line">  openssl \</div><div class="line">  pcre \</div><div class="line">  sudo \</div><div class="line">  &amp;&amp; rm -rf /var/cache/apk/*</div><div class="line"></div><div class="line"><span class="comment"># install confd</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> curl -sSL -o /usr/<span class="built_in">local</span>/bin/confd https://s3-us-west-2.amazonaws.com/opdemand/confd-git-73f7489 \</span></div><div class="line">  &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/confd</div><div class="line"></div><div class="line"><span class="comment"># add nginx user</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -S nginx &amp;&amp; \</span></div><div class="line">  adduser -S -G nginx -H -h /opt/nginx -s /sbin/nologin -D nginx</div><div class="line"></div><div class="line"><span class="keyword">COPY</span><span class="bash"> rootfs /</span></div><div class="line"></div><div class="line"><span class="comment"># compile nginx from source</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> build</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"boot"</span>]</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">2222</span> <span class="number">9090</span></div><div class="line"></div><div class="line"><span class="keyword">ENV</span> DEIS_RELEASE <span class="number">1.13</span>.<span class="number">0</span>-dev</div></pre></td></tr></table></figure><p>透過 Dockerfile 可以簡單了解到這個服務是怎麼啟動的，整體上來說非常簡單，除了安裝 confd 之外。就是把名為 <code>rootfs</code> 的目錄加進去，並且編譯客製化的 Nginx 接著啟動伺服器。</p><blockquote><p>這邊比較特別的地方是客製化編譯 Nginx 的部份，主要是因為 Deis 除了基本的 Nginx 功能外，也增加了防火牆模組（<a href="https://github.com/nbs-system/naxsi" target="_blank" rel="noopener">NAXSI</a>）跟一些模組在裡面，有興趣的可以自行閱讀 <code>rootfs/bin/build</code> 這個檔案的內容。</p></blockquote><h3 id="boot"><a href="#boot" class="headerlink" title="boot"></a>boot</h3><p>我想大家會覺得奇怪，為什麼不是直接執行 Nginx 而是執行一個名為 <code>boot</code> 的指令呢？<br>這是因為 Deis 除了啟動 Nginx 之外，還要將像是 confd 之類的服務也一併啟動。</p><blockquote><p>這邊比較有趣的是，一般會用 Shell Script 來處理。但是 Deis 使用 Golang 來做處理。</p></blockquote><p>從 Makefile 可以看出 <code>boot</code> 這個檔案是透過 Golang 的 Cross-compile 功能所編譯後，再構出 Docker 的 Image 來使用。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">build: check-docker</span></div><div class="line">  GOOS=linux GOARCH=amd64 CGO_ENABLED=0 godep go build -a -installsuffix -v -ldflags '-s' -o <span class="variable">$(BINARY_DEST_DIR)</span>/boot cmd/boot/boot.go || exit 1</div><div class="line">  @<span class="variable">$(<span class="built_in">call</span> check-static-binary,rootfs/bin/boot)</span></div><div class="line">  docker build -t <span class="variable">$(IMAGE)</span> .</div><div class="line">  rm rootfs/bin/boot</div></pre></td></tr></table></figure><blockquote><p>所以如果要自己封裝，記得要用 <code>make build</code> 的指令，而不是直接 <code>docker build</code> 否則是會包出無法執行的 Image。</p></blockquote><p>從 <code>cmd/boot/boot.go</code> 可以發現引用了 <code>logger/stdout_formatter.go</code> 這個檔案，基本上就是統一格式化 Deis 輸出的紀錄檔訊息，因此這邊就不多做討論。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// 略</span></div><div class="line"></div><div class="line">  log.Debug(<span class="string">"reading environment variables..."</span>)</div><div class="line">  host := getopt(<span class="string">"HOST"</span>, <span class="string">"127.0.0.1"</span>)</div><div class="line"></div><div class="line">  etcdPort := getopt(<span class="string">"ETCD_PORT"</span>, <span class="string">"4001"</span>)</div><div class="line"></div><div class="line">  etcdPath := getopt(<span class="string">"ETCD_PATH"</span>, <span class="string">"/deis/router"</span>)</div><div class="line"></div><div class="line">  hostEtcdPath := getopt(<span class="string">"HOST_ETCD_PATH"</span>, <span class="string">"/deis/router/hosts/"</span>+host)</div><div class="line"></div><div class="line">  externalPort := getopt(<span class="string">"EXTERNAL_PORT"</span>, <span class="string">"80"</span>)</div><div class="line"></div><div class="line">  client := etcd.NewClient([]<span class="keyword">string</span>&#123;<span class="string">"http://"</span> + host + <span class="string">":"</span> + etcdPort&#125;)</div><div class="line"></div><div class="line">  <span class="comment">// wait until etcd has discarded potentially stale values</span></div><div class="line">  time.Sleep(timeout + <span class="number">1</span>)</div><div class="line"></div><div class="line">  log.Debug(<span class="string">"creating required defaults in etcd..."</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/config"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/controller"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/services"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/domains"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/builder"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/certs"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/router/hosts"</span>)</div><div class="line">  mkdirEtcd(client, <span class="string">"/deis/router/hsts"</span>)</div><div class="line"></div><div class="line">  setDefaultEtcd(client, etcdPath+<span class="string">"/gzip"</span>, <span class="string">"on"</span>)</div><div class="line"></div><div class="line">  log.Info(<span class="string">"Starting Nginx..."</span>)</div><div class="line"></div><div class="line">  <span class="keyword">go</span> tailFile(nginxAccessLog)</div><div class="line">  <span class="keyword">go</span> tailFile(nginxErrorLog)</div><div class="line"></div><div class="line">  nginxChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</div><div class="line">  <span class="keyword">go</span> launchNginx(nginxChan)</div><div class="line">  &lt;-nginxChan</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> have to launch cron first so generate-certs will generate the files nginx requires</span></div><div class="line">  <span class="keyword">go</span> launchCron()</div><div class="line"></div><div class="line">  waitForInitialConfd(host+<span class="string">":"</span>+etcdPort, timeout)</div><div class="line"></div><div class="line">  <span class="keyword">go</span> launchConfd(host + <span class="string">":"</span> + etcdPort)</div><div class="line"></div><div class="line">  <span class="keyword">go</span> publishService(client, hostEtcdPath, host, externalPort, <span class="keyword">uint64</span>(ttl.Seconds()))</div><div class="line"></div><div class="line">  log.Info(<span class="string">"deis-router running..."</span>)</div><div class="line"></div><div class="line">  exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">2</span>)</div><div class="line">  signal.Notify(exitChan, syscall.SIGTERM, syscall.SIGINT)</div><div class="line">  &lt;-exitChan</div><div class="line">  tail.Cleanup()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本上，整個 <code>main()</code> 分為兩個部分。</p><p>第一個部分是讀取環境變數的部份（透過 <code>getopt()</code> 方法），第二個部分則是啟動各項服務的部份。這邊比較特別的是利用 Golang 的 Channel 功能，做出依序啟動服務的效果。</p><blockquote><p>Golang 的 Channel 在做 <code>receive</code> 動作時，會阻止程式繼續運作。</p></blockquote><p>最後的 <code>signal.Notify</code> 可以設定當接收到一些 Signal 時要做出什麼對應的處理。</p><blockquote><p>這邊接受的是常見的中斷訊號，一般就是 Ctrl + C 會送過去的訊號。</p></blockquote><p>另外，這邊透過 <a href="https://github.com/hpcloud/tail" target="_blank" rel="noopener">tail</a> 這個函式庫將 Nginx 的記錄檔讀取出來，並且格式化後輸出到 stdout 顯示。</p><blockquote><p>使用 Docker 的好習慣就是要將當前運行的程式輸出一律導向 stdout / stderr 讓 Docker 來幫忙做記錄，否則所有的 Log 都會被存在 Container 裡面反而難以除錯。</p></blockquote><h3 id="confd"><a href="#confd" class="headerlink" title="confd"></a>confd</h3><p>confd 會監聽 etcd 的 key-value 變動情況，然後動態的執行一些指令。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[template]</div><div class="line">src   = "nginx.conf"</div><div class="line">dest  = "/opt/nginx/conf/nginx.conf"</div><div class="line">uid = 0</div><div class="line">gid = 0</div><div class="line">mode  = "0644"</div><div class="line">keys = [</div><div class="line">   "/deis/config",</div><div class="line">   "/deis/services",</div><div class="line">   "/deis/router",</div><div class="line">   "/deis/domains",</div><div class="line">   "/deis/controller",</div><div class="line">   "/deis/builder",</div><div class="line">   "/deis/store/gateway",</div><div class="line">   "/deis/certs",</div><div class="line">]</div><div class="line">check_cmd  = "check &#123;&#123; .src &#125;&#125;"</div><div class="line">reload_cmd = "/opt/nginx/sbin/nginx -s reload"</div></pre></td></tr></table></figure><p>以 Nginx 的重起來說，當上述指定的 Key （如 <code>/deis/domains</code>）有更動，那麼就會先從樣板檔案產生新的設定檔，並且重新啟動 Nginx。</p><p>有興趣的話可以去看看 <code>rootfs/etc/confd</code> 的設定檔是如何撰寫的。</p><p>比較有趣的是 <code>/bin/generate-certs</code> 這個指令，他也是透過 confd 去產生的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line"><span class="comment"># create or truncate the file</span></div><div class="line">&gt; /etc/ssl/deis_certs</div><div class="line"></div><div class="line">&#123;&#123; range <span class="variable">$cert</span> := ls <span class="string">"/deis/certs"</span> &#125;&#125;</div><div class="line"><span class="built_in">echo</span> &#123;&#123; <span class="variable">$cert</span> &#125;&#125; &gt;&gt; /etc/ssl/deis_certs</div><div class="line">&#123;&#123; end &#125;&#125;</div><div class="line"></div><div class="line">CERT_PATH=/etc/ssl/deis/certs</div><div class="line">KEY_PATH=/etc/ssl/deis/keys</div><div class="line"></div><div class="line"><span class="comment"># clean up all certs</span></div><div class="line">rm -rf <span class="variable">$CERT_PATH</span></div><div class="line">rm -rf <span class="variable">$KEY_PATH</span></div><div class="line"></div><div class="line"><span class="comment"># ...then re-create the paths</span></div><div class="line">mkdir -p <span class="variable">$CERT_PATH</span></div><div class="line">mkdir -p <span class="variable">$KEY_PATH</span></div><div class="line"></div><div class="line">&#123;&#123; <span class="keyword">if</span> gt (len (lsdir <span class="string">"/deis/certs"</span>)) 0 &#125;&#125;</div><div class="line"><span class="keyword">while</span> <span class="built_in">read</span> etcd_path; <span class="keyword">do</span></div><div class="line">   &#123;&#123; range <span class="variable">$cert</span> := ls <span class="string">"/deis/certs"</span> &#125;&#125;</div><div class="line">   <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$etcd_path</span>"</span> == <span class="string">"&#123;&#123; <span class="variable">$cert</span> &#125;&#125;"</span> ]]; <span class="keyword">then</span></div><div class="line">     cat &lt;&lt; EOF &gt; <span class="string">"<span class="variable">$CERT_PATH</span>/<span class="variable">$etcd_path</span>.cert"</span></div><div class="line">&#123;&#123; getv (<span class="built_in">printf</span> <span class="string">"/deis/certs/%s/cert"</span> <span class="variable">$cert</span>) &#125;&#125;</div><div class="line">EOF</div><div class="line">     cat &lt;&lt; EOF &gt; <span class="string">"<span class="variable">$KEY_PATH</span>/<span class="variable">$etcd_path</span>.key"</span></div><div class="line">&#123;&#123; getv (<span class="built_in">printf</span> <span class="string">"/deis/certs/%s/key"</span> <span class="variable">$cert</span>) &#125;&#125;</div><div class="line">EOF</div><div class="line">   <span class="keyword">fi</span>&#123;&#123; end &#125;&#125;</div><div class="line"><span class="keyword">done</span> &lt; /etc/ssl/deis_certs</div><div class="line">&#123;&#123; <span class="keyword">else</span> &#125;&#125;</div><div class="line"><span class="comment"># there is no certificates to generate</span></div><div class="line">&#123;&#123; end &#125;&#125;</div></pre></td></tr></table></figure><p>這邊很有趣的是，他會從 etcd 裡面讀取每一組 SSL 的 Private Key / Certificates 並且依照 Key 產生一組檔案來寫入檔案。</p><blockquote><p>如此一來每一個不同 Domain 所需的 SSL 設定就可以透過 etcd 來做管理。不過其實另一方面來看，這個檔案其實會不斷地增長⋯⋯<br>在 <code>/bin/boot</code> 中，初次執行會設定一個 Cron Job 去執行這個指令，理由還不清楚不過應該是為了修正檔案沒有順利產生之類的問題吧（就註解來看是一個修正）</p></blockquote><hr><p>到此為止，基本上一個簡單的 Router 就算是設定完成了。<br>如果對防火牆設定有興趣的話，可以參考 <code>rootfs/opt/nginx</code> 裡面的設定是如何撰寫的。</p><p>大致上剩下的都是設定檔的部份，稍微詳讀之後就可以瞭解其背後運作的原理。<br>若要建構自己的簡易 Router 參考這樣的方式設計，其實也沒有想像中的困難。</p>]]></content:encoded>
      
      <comments>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
