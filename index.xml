<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>弦而時習之</title><link>https://blog.frost.tw/</link><description>Recent content on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Sun, 15 Mar 2020 03:02:32 +0800</lastBuildDate><atom:link href="https://blog.frost.tw/index.xml" rel="self" type="application/rss+xml"/><item><title>TGONext: 從缺點選擇架構</title><link>https://blog.frost.tw/posts/2020/03/15/TGONext-Choose-Architecture-by-Cons/</link><category>架構</category><category>微服務</category><category>資料庫</category><category>心得</category><category>TGONext</category><pubDate>Sun, 15 Mar 2020 03:02:32 +0800</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/03/15/TGONext-Choose-Architecture-by-Cons/</guid><description>&lt;p>這次聚會我們先簡單的回顧一下上一次的討論，然後就切換到了下一個主題。基於前一次聚會高併發的討論，我們模擬一個簡單的架構然後開始演進。&lt;/p></description><content:encoded>&lt;p>這次聚會我們先簡單的回顧一下上一次的討論，然後就切換到了下一個主題。基於前一次聚會高併發的討論，我們模擬一個簡單的架構然後開始演進。&lt;/p>
&lt;h2 id="the-trap-inside-the-suggested-way">建議方法中的陷阱&lt;/h2>
&lt;p>首先，我們有一個單體式的應用將 Web 伺服器跟資料庫都跑在同一台機器上。&lt;/p>
&lt;pre>&lt;code>+-----------------------+
|+---------------------+|
|| ||
|| Web Server ||
|| ||
|+---------------------+|
|+---------------------+|
|| ||
|| Database ||
|| ||
|+---------------------+|
+-----------------------+
&lt;/code>&lt;/pre>&lt;p>當請求量增加之後，我們可能會先把 Web 伺服器和資料庫分離到獨立的機器中。&lt;/p>
&lt;pre>&lt;code>+---------------------+ +---------------------+
| | | |
| Web Server &amp;lt;----------&amp;gt; Database |
| | | |
+---------------------+ +---------------------+
&lt;/code>&lt;/pre>&lt;p>當我們再次感覺到變慢的時候，我們可能會增加「快取伺服器」到我們的架構中。
像是增加一個快取伺服器到 Web 伺服器和資料庫之間。&lt;/p>
&lt;pre>&lt;code>+---------------------+ +---------------------+ +---------------------+
| | | | | |
| Web Server &amp;lt;------&amp;gt; Cache Server &amp;lt;------&amp;gt; Database |
| | | | | |
+---------------------+ +---------------------+ +---------------------+
&lt;/code>&lt;/pre>&lt;p>當我們的快取伺服器故障時，我們的服務會再重啟之後恢復正常嗎？&lt;/p>
&lt;blockquote>
&lt;p>實際上它可能不會在快取伺服器重啟後正常恢復，因為我們的快取伺服器遺失了所有資料同時 Web 伺服器依舊發出大量地請求到快取伺服器卻無法處理而轉送到資料庫上。&lt;/p>
&lt;/blockquote>
&lt;p>這就是所謂的「雪崩效應」，當一個服務發生故障時進而影響其他人變得不穩，最後造成整個服務停止。&lt;/p>
&lt;p>我們的導師建議我們在我們的團隊成員了解快取伺服器的優缺點和整個框架或套件使用後會如何運作之前，不要輕易的去增加快取伺服器。&lt;/p>
&lt;h2 id="will-microservice-rescue-us">微服務能解決這一切嗎？&lt;/h2>
&lt;p>如果我們想要避免雪崩效應，你可能會聯想到這幾年很熱門的微服務（Microservice）&lt;/p>
&lt;p>微服務是以「去中心化（Decentralize）」為目的設計的，這表示每個元件大多獨立運作而且很容易的重新部署。&lt;/p>
&lt;p>但是這其實有點太過理想，我們的服務經常會有一些相依於其他服務的情況。像是 Web 伺服器就經常的依賴於資料庫。&lt;/p>
&lt;p>這是另外一個關鍵我們需要在設計架構的時候去考慮的地方。&lt;/p>
&lt;p>目前在微服務中最熱門的相依問題解決方式是製作一種叫做「邊車（Sidecar）」的服務來控制每個元件間的溝通，因為邊車通常會知道其他服務的存活情況以及是否可以被連接，因此能夠回報跟管理他目前所負責的服務。&lt;/p>
&lt;p>我們的導師告訴我們架構大多是為了要解決某個問題才會被設計出來的。&lt;/p>
&lt;p>另一方面，我們如果要在微服務中找到問題，我們必須知道在這連續的呼叫中是在哪個服務停止的。這也表示微服務的系統需要有一個強大的紀錄追蹤機制來追蹤系統中的每一個事件。&lt;/p>
&lt;h2 id="which-is-paid-for-an-architecture-choice">選擇某種架構付出的代價&lt;/h2>
&lt;p>在我們學習了一些最近熱門的關鍵字之後，我們開始討論是否適合使用微服務。&lt;/p>
&lt;p>我們的導師告訴我們效能（Performance）涵蓋三個部分：&lt;/p>
&lt;ul>
&lt;li>吞吐量（Throughput）&lt;/li>
&lt;li>延遲（Latency）&lt;/li>
&lt;li>記憶體使用（Memory Footprint）&lt;/li>
&lt;/ul>
&lt;p>他們會互相影響，這表示如果我們選擇了其中一個作為目標其他的項目就會變成代價支付出去。&lt;/p>
&lt;p>在微服務系統中會將封包導向目標的服務，這也表示延遲會比其他架構還高得多。但是他的去中心化特性讓我們很容易的增加更多的元件來處理不斷增加的流量。&lt;/p>
&lt;p>微服務是透過延遲來交換更大的吞吐量，讓我們擁有處理大量請求的能力。&lt;/p>
&lt;p>也因此，如果我們的服務非常要求低延遲的話，微服務對我們的產品可能就不是一個好主意。&lt;/p>
&lt;h3 id="domain-driven-design">Domain-Driven Design&lt;/h3>
&lt;p>DDD 是我們討論的主題之一，我們的導師讓我們思考為什麼微服務變得熱門的同時 DDD 也同樣開始變得熱門。&lt;/p>
&lt;p>實際上我們可以發現他們相似的在意「領域（Domain）」，他們嘗試將讓每個服務都專注在某一個業務上。這和我們平常使用的 MVC 是非常不同的，不過這也說明了為什麼 DDD 的設計會更適合微服務的需要。&lt;/p>
&lt;p>另一方面，如果我們想要在公司中使用微服務。他通常取決於公司的規模或者在跨部門之前的溝通有些問題時，微服務可可能會是得不錯的選擇讓每個部門維護自己的服務。&lt;/p>
&lt;blockquote>
&lt;p>不過我們也需要注意過度的設計在我們自己的部門中，因為我們很可能只需要一個單體式的應用在我們的部門或公司。另一方面微服務也有不少需求需要滿足，如果在一個部門中擁有過多的為服務可能會造成另外的問題。&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-data-consistency">資料的一致性&lt;/h2>
&lt;p>除了效能問題之外，資料在我們的架構中也是另一個重要的面向。每一個系統都會有他自己的狀態，而我們的服務則需要小心討論來決定使用強一致性或者最終一致性。&lt;/p>
&lt;p>舉例來說，一個銀行系統必須是強一致性的。至少你不會預期銀行在你存入一些錢之後，顯示並沒有這筆紀錄。卻在幾小時完成一致性的檢查後，才顯示出來。&lt;/p>
&lt;blockquote>
&lt;p>分散式系統其實也是一種資料一制的探討。&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-database-evolution">資料庫的演進&lt;/h2>
&lt;p>在一個系統中，資料庫通常是最直接跟資料一致性有關聯的主題。因此我們的導師讓我們先比較 RDBMS（關連式資料庫）、NoSQL 和 NewSQL 的差異。&lt;/p>
&lt;h3 id="rdbms">RDBMS&lt;/h3>
&lt;p>在 RDBMS 之前還有一個叫做 Object-Orident Database （物件導向資料庫）的東西，雖然 PostgreSQL 有一部分的特性，但是我們並沒有繼續討論他。&lt;/p>
&lt;blockquote>
&lt;p>基本上這是我們討論演進的第一個階段，令一方面因為他算是非常常見因此我們並沒有在這個時候討論太多。&lt;/p>
&lt;/blockquote>
&lt;h3 id="nosql">NoSQL&lt;/h3>
&lt;p>在 NoSQL 的情況，我們透過將一致性作為代價來提高吞吐量。這也是為什麼 NoSQL 擁有很不錯的拓展性能讓我們非常簡單的去擴充。&lt;/p>
&lt;p>不過 NoSQL 必須在應用層實作很多東西，因為 RDBMS 幫我們處理了不少事情，但是 NoSQL 並沒有。&lt;/p>
&lt;blockquote>
&lt;p>另外一個特性是 NoSQL 是伴隨 SSD 的特性出現的，因此透過改變儲存資料的方式讓我們獲得高速的 Key-Value 資料存取能力。&lt;/p>
&lt;/blockquote>
&lt;h3 id="newsql">NewSQL&lt;/h3>
&lt;p>NewSQL 比較類似於 NoSQL 的反思，人們開始使思考 NoSQL 作為一個資料庫還有所不足。實際上有很多東西不應該在應用層實現，而應該讓資料庫幫助我們來完成。&lt;/p>
&lt;p>也因此開始開發 NewSQL 這種具備類似 RDBMS 的強一致性但是又有足夠的擴充能力的資料庫。&lt;/p>
&lt;blockquote>
&lt;p>目前 NewSQL 還沒有變的熱門，而且也沒有太多開放原始碼的解決方案。&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-choose-of-database">資料的選擇&lt;/h2>
&lt;p>在前面的討論，我們的導師讓我們分享選用一個資料庫的觀點和理由。&lt;/p>
&lt;p>這裡有很多情況讓我們決定要選擇哪個資料庫：&lt;/p>
&lt;ul>
&lt;li>資料庫的功能&lt;/li>
&lt;li>使用的框架&lt;/li>
&lt;li>團隊成員&lt;/li>
&lt;li>客戶的偏好&lt;/li>
&lt;/ul>
&lt;p>實際上這沒有正確答案，就像前面在架構上的討論在不同的設計上會有不同的優缺點出現。&lt;/p>
&lt;h2 id="conclusion">總結&lt;/h2>
&lt;p>實際上這篇文章還是缺少了很多細節，不過太多東西我實在沒辦法一次性的記住。&lt;/p>
&lt;p>實際上在第一次聚會結束後我是有點擔心討論會止於一些計算或了解一些知識而已。&lt;/p>
&lt;p>不過這次聚會我們的導師讓我們學到了一些新的方法跟觀點能夠直接應用在工作上。&lt;/p>
&lt;p>最重要的是我們要在決定之前「找出計畫的缺點」並且重新檢視他，優點確實能給我們好處，但當系統發生問題的時候缺點才是我們需要面對的。&lt;/p>
&lt;p>也因此，我們需要去決定一個架構是對我們的產品傷害最小的，也就是大多數的缺點跟我們產品的需求是不會有太多衝突。&lt;/p></content:encoded></item><item><title>從 Functional Programming 重新思考程式設計</title><link>https://blog.frost.tw/posts/2020/03/14/Rethink-Programming-by-Functional/</link><category>Functional</category><category>C</category><category>Ruby</category><category>心得</category><pubDate>Sat, 14 Mar 2020 22:02:23 +0800</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/03/14/Rethink-Programming-by-Functional/</guid><description>&lt;p>因為時間的關係錯過了實體課程，不過利用 228 連假把&lt;a href="http://bit.ly/2IUIxWO">工作上用得到的函數式程式設計&lt;/a>這門課補完。&lt;/p>
&lt;p>在 Functional Programming（函數式程式設計）裡面有許多概念是可以提取出來應用的，如果你使用的語言有支援一定程度的特性的話，就能更做出更多的變化。&lt;/p></description><content:encoded>&lt;p>因為時間的關係錯過了實體課程，不過利用 228 連假把&lt;a href="http://bit.ly/2IUIxWO">工作上用得到的函數式程式設計&lt;/a>這門課補完。&lt;/p>
&lt;p>在 Functional Programming（函數式程式設計）裡面有許多概念是可以提取出來應用的，如果你使用的語言有支援一定程度的特性的話，就能更做出更多的變化。&lt;/p>
&lt;h2 id="the-flexible-design">更彈性的設計&lt;/h2>
&lt;p>以我工作上常用的 Ruby 作為例子我們可以用一個稍微極端的例子來看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># 來源資料&lt;/span>
&lt;span class="n">users&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>
&lt;span class="o">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jimmy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;male&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">180&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">72&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">70&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Mary&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;female&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">160&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Gary&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kp">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">166&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">95&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="o">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Bob&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;male&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">160&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="c1"># Curry 化的 Function&lt;/span>
&lt;span class="n">gender_is&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gender&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">gender&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">curry&lt;/span>
&lt;span class="n">waistline_less_than&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">_args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">waistline&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">max&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">waistline&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">curry&lt;/span>
&lt;span class="n">health_users&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="n">users&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="c1"># 利用語言特性跟 Curry 動態設定條件&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">user&lt;/span>
&lt;span class="k">when&lt;/span> &lt;span class="n">gender_is&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;male&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="n">waistline_less_than&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">90&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">when&lt;/span> &lt;span class="n">gender_is&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;female&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="n">waistline_less_than&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kp">true&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="c1"># 因為 Bob 腰圍大於 90 因此被篩選掉&lt;/span>
&lt;span class="n">pp&lt;/span> &lt;span class="n">health_users&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以 Ruby 來說 Matz（Ruby 語言之父）曾在他的&lt;a href="https://www.tenlong.com.tw/products/9789863473312">松本行弘談程式世界的未來&lt;/a>這本書中提過 Ruby 的一些語法是受到 Lisp 語言的影響，也因此在 Ruby 中保有了一些函數式語言的特性。&lt;/p>
&lt;p>實際上最實用的是 Ruby 在迭代器（Enumerator）提供了非常多函數式語言才有的方法，像是 &lt;code>map&lt;/code>、&lt;code>filter&lt;/code> 這類都能讓我們很輕鬆的篩選跟處理資料。&lt;/p>
&lt;h2 id="rethink-the-method-design">重新思考方法的設計&lt;/h2>
&lt;p>在函數式程式設計中，以課程裡面使用的 Elixir 作為例子，我們可以利用 Pattern Matching 的特性設計出像這樣的程式碼：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="n">defmodule&lt;/span> &lt;span class="nc">Server.Connection&lt;/span> &lt;span class="n">do&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="n">def&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;exit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:gen_tcp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">def&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;help&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">socket&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Server.Helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">print&lt;/span>
&lt;span class="n">def&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">socket&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Server.Handler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是在我們熟悉的物件導向語言處理的話，就會變成類似像這樣的程式碼&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">Server&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Connection&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">action&lt;/span>
&lt;span class="k">when&lt;/span> &lt;span class="s2">&amp;#34;exit&amp;#34;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="vi">@socket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>
&lt;span class="k">when&lt;/span> &lt;span class="s2">&amp;#34;help&amp;#34;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="no">Server&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">print_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vi">@socket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="vi">@handler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有趣的地方在於，假設我們想要在 Ruby 裡面拓展更多「指令」的話就會讓 &lt;code>#input&lt;/code> 這個方法不斷地增長，最後我們會變成需要設計一個像是 Registry（註冊器）來管理這些指令。&lt;/p>
&lt;p>但是在支援 Pattern Matching 的函數式語言裡面，我們只需要將這些方法加以分類就可以很輕鬆的拓展出來，也因此像是在 Elixir 這類語言我們幾乎不需要使用到判斷式就能決定要做什麼，這也能讓程式碼在另一種形式上變得簡潔。&lt;/p>
&lt;blockquote>
&lt;p>以 Ruby 的語法檢查器 Rubocop 來說，一個方法基本上建議上只能有 10 ~ 15 行的內容，要符合一些最佳實踐的話通常會需要拆分很多方法跟物件來處理，也因此我常跟同事說我們應該試著在呼叫之前就做好判斷，讓每一個方法都明確知道自己該做些什麼。&lt;/p>
&lt;/blockquote>
&lt;h2 id="rethink-the-definition-of-state">重新思考狀態的定義&lt;/h2>
&lt;p>函數式語言之所以會被叫做 Functional 某方面來說也是跟數學非常有關係的，以數學的函式來說 &lt;code>f(x) = x + 1&lt;/code> 其實也只會有輸入跟輸出兩種情況，也因此在函數式語言比較難實現出狀態這樣的概念。&lt;/p>
&lt;p>如果我在 Ruby 想將一個資料（狀態）傳遞給下一個處理，在沒有應用物件的情況下就會需要像這樣寫：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">get_username&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parse_json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>展開之後會像是這樣：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">parsed_json&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parse_json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_username&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parsed_json&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但實際上以物件導向的方式來處理的話我們會用 Instance Variable（實例變數）來保存狀態：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">username&lt;/span>
&lt;span class="n">parsed_json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">parsed_json&lt;/span>
&lt;span class="vi">@parsed_json&lt;/span> &lt;span class="o">||=&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">response&lt;/span>
&lt;span class="vi">@responsd&lt;/span> &lt;span class="o">||=&lt;/span> &lt;span class="no">Net&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">HTTP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vi">@url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="no">User&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">username&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>透過這樣的方式使用者就能夠透過很簡單的方式直接的取得所需的資訊，而在 Elixir 中則會像這樣實現：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="n">defmodule&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="n">do&lt;/span>
&lt;span class="n">def&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">def&lt;/span> &lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">HTTP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">:ok&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">username&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為沒有內部的狀態保存，所以通常會將狀態透過參數傳遞，雖然無法保存但是透過語言的特性依舊能夠恰當處理，甚至我們需要反思封裝狀態這件事情是否是在多數情況下「必要」的。&lt;/p>
&lt;p>有趣的是，我們平常享受 Ruby 的物件導向特性讓我們可以透過物件來保存狀態，但是在 CRuby 或者 mruby 每次處理也是需要將狀態當作參數傳遞進去的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// mruby
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">mrb_value&lt;/span> &lt;span class="nf">user_get_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mrb_state&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">mrb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mrb_value&lt;/span> &lt;span class="n">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">mrb_str_new_cstr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mrb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Username&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">init_user&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mrb_state&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">mrb&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">RClass&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">klass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mrb_define_class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mrb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;User&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mrb&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">object_class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">mrb_define_method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mrb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">klass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user_get_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MRB_ARGS_NONE&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>不過 C 語言不是函數式語言，方法頂多是一種指標而已。只是在非物件導向語言裡面，保存狀態通常都是透過參數傳遞。&lt;/p>
&lt;/blockquote>
&lt;p>像這樣去接觸不同的語言了且背後的設計是一件很有趣的事情，尤其是函數式語言在思考上跟物件導向語言差異很大的時候更能夠幫助我們反思為什麼要這樣設計，原本自己在物件導向語言的設計是否還有沒考慮到的地方。&lt;/p>
&lt;h2 id="impression">感想&lt;/h2>
&lt;p>第一次接觸 Elixir 跟函數式語言應該也是在一兩年前，也是因為課程的&lt;a href="https://taian.su/">泰安&lt;/a>老師在五倍紅寶石上課時介紹給我的。不過當時雖然也會寫 JavaScript 而且常常看到一些對於 Functional Programming 相關的文章，不過實際上對函數式程式設計還是處於一知半解的狀態。&lt;/p>
&lt;p>在課程中其實也有提到以 JavaScript 作為範例其實有點不適合，畢竟有一些特性跟功能以一個函數式語言來說還不太足夠。所以在上完這次的課程之後，原本寫起來覺得很卡的 Elixir 在正確理解一些正確的特性之後，就能很順利地使用。&lt;/p>
&lt;p>也趁著還有印象的時候趕快用 Elixir 和 Ruby 搭配寫了一款 &lt;a href="https://github.com/elct9620/elixir-mud">MUD&lt;/a> 類型遊戲練習，如果對寫 JavaScript 無法寫得乾淨有困擾或者想多善用一些語言特性，是很推薦試試看這門課程的。&lt;/p>
&lt;p>最後補上 MUD 遊戲製作中的畫面：&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2020-03-14-rethink-programming-by-functional/mud.gif" alt="MUD 有限狀態機">&lt;/p></content:encoded></item><item><title>重複利用的 Ansible Role 難題</title><link>https://blog.frost.tw/posts/2020/02/29/The-Reusable-Ansible-Role-Problem/</link><category>Ansible</category><category>DevOps</category><category>心得</category><category>Rails</category><category>Ruby on Rails</category><pubDate>Sat, 29 Feb 2020 17:59:46 +0800</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/02/29/The-Reusable-Ansible-Role-Problem/</guid><description>&lt;p>大概一年前左右，我開始製作一個 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 的 Playbook 來幫&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>的客戶安裝環境。&lt;/p>
&lt;p>不過當我們的客戶增加之後，其實開始有點變的很難透過 Fork 的機制來管理不同客戶的 Playbook。&lt;/p>
&lt;p>這表示我必須先更新主要的 Playbook 然後再同步到每一個客戶的版本上，也因此我決定去把這些通用的部分拆成單獨的 Role 專案。&lt;/p></description><content:encoded>&lt;p>大概一年前左右，我開始製作一個 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 的 Playbook 來幫&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>的客戶安裝環境。&lt;/p>
&lt;p>不過當我們的客戶增加之後，其實開始有點變的很難透過 Fork 的機制來管理不同客戶的 Playbook。&lt;/p>
&lt;p>這表示我必須先更新主要的 Playbook 然後再同步到每一個客戶的版本上，也因此我決定去把這些通用的部分拆成單獨的 Role 專案。&lt;/p>
&lt;h2 id="overview">概觀&lt;/h2>
&lt;p>目前的 Playbook 大致上是這樣的：&lt;/p>
&lt;pre>&lt;code>├── [1.0K] README.md
├── [ 96] group_vars
│   └── [1.2K] all.yml
├── [ 96] inventories
│   └── [ 309] local
├── [ 480] roles
│   ├── [ 96] 5xruby_user
│   ├── [ 96] application
│   ├── [ 96] compile_env
│   ├── [ 96] deploy_user
│   ├── [ 96] init
│   ├── [ 128] logrotate
│   ├── [ 160] nginx_with_passenger
│   ├── [ 96] node
│   ├── [ 160] postgresql_server
│   ├── [ 96] ruby
│   ├── [ 96] ssh
│   ├── [ 96] sudo
│   └── [ 128] yum_install_commons
└── [ 467] setup.yml
&lt;/code>&lt;/pre>&lt;p>當我們的客戶需要客製化他們的部署環境，我們會去 Fork 這份原始版本然後修改裡面的變數跟樣板。&lt;/p>
&lt;p>不過在更新的時候就很容易遇到因為修改差異造成的衝突。&lt;/p>
&lt;h2 id="target">目標&lt;/h2>
&lt;p>在 Ansible Galaxy 裡面提供了相依管理的功能，這讓我們可以透過製作 &lt;code>roles/requirements.yml&lt;/code> 來像像下面這樣管理：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-ruby&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-nginx&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在我們執行 Playbook 之前，我們可以利用 &lt;code>ansible-galaxy install -r roles/requirements.yml&lt;/code> 來自動安裝對應的 Role，而且這能夠在 &lt;a href="https://github.com/ansible/awx">Ansible AWX&lt;/a>（或者 Ansible Tower）上面正常運作。&lt;/p>
&lt;p>看起來挺不錯的，不過實際上我遇到了一些問題。&lt;/p>
&lt;h2 id="nginx-modules">Nginx 模組&lt;/h2>
&lt;p>以 &lt;a href="https://rubyonrails.org/">Rails&lt;/a> 專案來說，我們有很多種網頁伺服器的選擇。&lt;/p>
&lt;p>如果我們選擇使用 &lt;a href="https://puma.io/">Puma&lt;/a> 的話，其實只需要將 Nginx 安裝並且設定為反向代理伺服器（Reverse Proxy）即可。&lt;/p>
&lt;p>但是我們決定使用 &lt;a href="https://www.phusionpassenger.com/">Passenger&lt;/a> 就必須將它編譯成一個 Nginx 模組。&lt;/p>
&lt;p>這表示假設我們希望能夠同時支援 Puma 和 Passenger 的話，新製作的 Nginx Role 需要包含關於 Passenger 的任務。&lt;/p>
&lt;p>我的第一個版本是利用 &lt;a href="https://docs.ansible.com/ansible/latest/modules/include_tasks_module.html">&lt;code>include_tasks&lt;/code>&lt;/a> 在 Passenger 被啟用的時候去增加額外的模組到 Nginx 上。&lt;/p>
&lt;p>但是假設我們未來要增加更多的 Nginx 模組，我們的 Nginx Role 會越變越大最後就跟現在的 Playbook 狀況一樣。&lt;/p>
&lt;h2 id="manual-dependencies">手動管理相依&lt;/h2>
&lt;p>在經過幾次嘗試之後，我找到一個還可以接受的方法來處理這個問題。&lt;/p>
&lt;ol>
&lt;li>產生一個內容為空陣列的 Fact 變數 &lt;code>nginx_module_options&lt;/code>&lt;/li>
&lt;li>遍歷 &lt;code>nginx_extar_modules&lt;/code> 陣列然後 &lt;code>import_role&lt;/code> 去執行相關的 Role&lt;/li>
&lt;li>再額外模組的原始碼下載後，將額外的編譯參數插入到 &lt;code>nginx_module_options&lt;/code> 這個 Fact 變數中&lt;/li>
&lt;/ol>
&lt;p>因此，在我們的 Playbook 裡面我們會像這樣設定相依：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-nginx&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-passenger&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>並且覆蓋 Nginx 的變數，增加 Nginx 模組的設定作為預設值在 &lt;code>group_vars/all.yml&lt;/code> 裡面套用到所有的 Web 節點上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="k">nginx_extra_modules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;passenger&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不過另外一個問題又緊接著解決了 Nginx 模組的問題出現。&lt;/p>
&lt;h2 id="the-role-dependencies">Role 的相依性&lt;/h2>
&lt;p>當我準備好 Nginx, Ruby, Node.js 跟其他部署 Rails 必要的 Role 後，我開始設定 Rails Role 的相依設定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="k">dependencies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-nginx&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-ruby&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-node&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">src&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>https&lt;span class="p">:&lt;/span>//github.com/5xruby/ansible-passenger&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此時我執行我的 Playbook 去運行 Rails Role 的話，會從 Nginx Role 開始執行。&lt;/p>
&lt;p>這看起來沒什麼問題，不過我們會需要設定 &lt;code>nginx.conf&lt;/code> 並且將 &lt;code>root&lt;/code> 設定到 Rails 專案的 &lt;code>public&lt;/code> 目錄。&lt;/p>
&lt;p>如果 Nginx Role 在 Rails Role 之前執行，我們就會碰到 Nginx 啟動失敗的錯誤。&lt;/p>
&lt;blockquote>
&lt;p>我的第一個版本會透過 Nginx 來產生 &lt;code>root&lt;/code> 的目錄，並且設定好所有者跟使用者群組，但是這是有問題的。如果 &lt;code>deploy&lt;/code> 這個使用者是透過 Rails Role 來產生的話，就會發生因為還沒有產生好使用者而無法設定目錄擁有者的情況。&lt;/p>
&lt;/blockquote>
&lt;p>不過在釐清問題之後，這算是一個人為的設計失誤。&lt;/p>
&lt;p>「Nginx 真的是 Rails 的相依嗎？」&lt;/p>
&lt;p>如果我們使用 Puma 的話，我們可以把 Nginx 替換成任何反向代理伺服器，實際上我們並不需要依賴於 Nginx。&lt;/p>
&lt;h2 id="final-produce">最終成果&lt;/h2>
&lt;p>經過大概兩天的時間，最後終於完成了一個幾乎不太需要設定就能夠部署 Rails 伺服器的設計。&lt;/p>
&lt;pre>&lt;code>├── install.yml
├── group_vars
│ └── all.yml
├── inventory
├── playbooks
│ └── install-nginx.yml
│ └── install-postgres.yml
│ └── install-rails.yml
├── roles
│ └── requirements.yml
├── templates
└ ─── nginx.conf.j2
&lt;/code>&lt;/pre>&lt;p>基本上是非常簡單的，大多只需要使用 &lt;code>import_role: nginx&lt;/code> 這樣的語法去增加需要的 Role 即可。&lt;/p>
&lt;p>如果我們需要更多的客製化，只需要覆蓋掉原本的變數（像是 &lt;code>nginx_config_template&lt;/code>）並且將自訂的樣板放到 &lt;code>templates/nginx.conf.j2&lt;/code> 裡面。&lt;/p>
&lt;blockquote>
&lt;p>在這邊我只放了預設的 Nginx 設定檔在 Nginx Role 裡面，如果要啟用 Passenger 的話需要自己放一個 &lt;code>nginx.conf&lt;/code> 來設定。&lt;/p>
&lt;/blockquote>
&lt;h2 id="conclusion">結論&lt;/h2>
&lt;p>這算是一個很有趣的經驗來「解耦」一個部署腳本，作為一個工程師我們有很多規則可以去遵照來解耦程式碼。但是當你以一個維運的角度來看，要怎麼去製作一個可以重複利用跟管理的腳本呢？&lt;/p>
&lt;p>不過這個還是一個起步，我現在正在思考假設未來要升級的話該怎麼做。&lt;/p>
&lt;ul>
&lt;li>如何清理舊版本？&lt;/li>
&lt;li>如果資料庫要升級，是否需要部署新的伺服器？&lt;/li>
&lt;li>如果是用於製作 Cloud Image (像是 AMI）又該如何清理多餘的檔案？&lt;/li>
&lt;/ul>
&lt;p>DevOps 看起來似乎只要把工程師跟維運人員放在一起就可以做到，不過我認為要讓兩者能夠協作還是不容易的。&lt;/p></content:encoded></item><item><title>TGONext: 規劃高併發服務</title><link>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</link><category>心得</category><category>TGONext</category><category>架構</category><pubDate>Sun, 23 Feb 2020 15:54:37 +0800</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</guid><description>&lt;p>昨天是 &lt;a href="https://next.tgonetworks.org/">TGONext&lt;/a> 的第一次聚會，在這個活動中我們會向台灣的一些高階主管學習。在開場結束後我們的導師 &lt;a href="https://blog.gcos.me/">Ant&lt;/a> 讓我們投票選出幾個想在這半年的時間內討論的題目。基本上我們預定討論四個主題，而「高併發」是我們的第一個主題。&lt;/p></description><content:encoded>&lt;p>昨天是 &lt;a href="https://next.tgonetworks.org/">TGONext&lt;/a> 的第一次聚會，在這個活動中我們會向台灣的一些高階主管學習。在開場結束後我們的導師 &lt;a href="https://blog.gcos.me/">Ant&lt;/a> 讓我們投票選出幾個想在這半年的時間內討論的題目。基本上我們預定討論四個主題，而「高併發」是我們的第一個主題。&lt;/p>
&lt;h2 id="what-is-high-concurrency">什麼是高併發&lt;/h2>
&lt;p>再開始的時候，我們的導師問了我們這個問題。&lt;/p>
&lt;blockquote>
&lt;p>要怎麼定義高併發？&lt;/p>
&lt;/blockquote>
&lt;p>基本上大家都是知道高併發簡單來說就是有大量使用者在使用我們服務的情況，不過要怎麼明確定義反而是從沒有仔細思考過的。&lt;/p>
&lt;p>不過定義上其實相對的單純，但是透過導師的引導我們開始思考更多東西。&lt;/p>
&lt;blockquote>
&lt;p>在短時間內能處理的請求就是併發，而這個短時間通常是以秒為單位。&lt;/p>
&lt;/blockquote>
&lt;p>基於這樣的定義，實際上最重要的事情就是&lt;/p>
&lt;blockquote>
&lt;p>我們需要確保我們的服務可以處理足夠的請求數否則就就沒有意義&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-to-measure-the-concurrency">如何評估併發數&lt;/h2>
&lt;p>為了確保能處理大兩請求或者配合行銷團隊給我們的目標，我們需要正確的去測量我們的系統所能承受的併發數量，因此我們的導師請我們列出一些曾經用過或者聽過的工具。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ab&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wg/wrk">wrk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/giltene/wrk2">wrk2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jmeter.apache.org/">JMeter&lt;/a>&lt;/li>
&lt;li>SaaS (提供類似功能的雲端服務)&lt;/li>
&lt;/ul>
&lt;p>因為這些工具其實還蠻常見的，我自己反而沒有在第一時間把他跟測量工具聯想起來。&lt;/p>
&lt;p>然後導師馬上問我們一個問題：「這些工具的結果是否會有差異？」&lt;/p>
&lt;p>我們基本上都沒有考慮過這個小細節，但是這卻對我們最後測量出來的結果很重要。&lt;/p>
&lt;p>舉例來說，像是 &lt;code>ab&lt;/code> 會在發出請求之前把所有的 Thread 產生好，再一次性的發送出去。這很容易造成我們取得比較差的成績，而且很可能不符合真實的使用情況。&lt;/p>
&lt;blockquote>
&lt;p>在測量併發能力的時候，我們需要注意是否符合真實世界的使用情況。&lt;/p>
&lt;/blockquote>
&lt;p>除此之外，還有一些東西需要在測試的時候小心處理。&lt;/p>
&lt;h3 id="the-test-machines-limit">硬體上的限制&lt;/h3>
&lt;p>假設我們想要模擬高併發請求在某一台機器上，但實際上為了達到這個併發量要產生的 Thread 數量已經超過機器的上限。那麼我們只會得到錯誤的結果，這時候我們可能就需要使用支援在多台機器上運作的工具，或者製作一些能控制工具的腳本來同時觸發某個測量工具在多台機器上面執行。&lt;/p>
&lt;h3 id="the-network-environment">網路環境&lt;/h3>
&lt;p>如果我們在 LAN 發出請求去測試，實際上發出去的請求跟壓力都會遠大於實際的情況。因此我們至少要將測試的機器部署在其他區域（Zone）並且考慮實際使用者所在的位置。&lt;/p>
&lt;blockquote>
&lt;p>另外一個被提到的地方是，我們在測試的是「能力」而不是「壓力」因此目的並不是為了要對伺服器施加壓力這兩種測試實際上是不太一樣的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="the-toolss-calculator-method">工具的計算方式&lt;/h3>
&lt;p>在前面我們其實已經大致上討論過，但是導師還是特別將 &lt;code>wrk2&lt;/code> 提出來討論。因為有些工具並不是計算從請求發起到收到回應的這個時間差，這表示有些時候並不會完全符合真實的情況。&lt;/p>
&lt;p>另外，導師告訴我們 &lt;code>wrk2&lt;/code> 使用 &lt;a href="https://medium.com/@siddontang/the-coordinated-omission-problem-in-the-benchmark-tools-5d9abef79279">Coordinated Omission&lt;/a> 這個演算法，是相對接近真實世界的計算方式。&lt;/p>
&lt;h3 id="the-perfect-result">過度美好的結果&lt;/h3>
&lt;p>假設我們得到非常漂亮的結果，我們就需要去注意測試的方法跟工具。因為這表示我們可能在一些地方是我們沒有預期到的，因而提供了不同的結果給我們。&lt;/p>
&lt;h2 id="from-mau-to-qps">從 MAU 換算成 QPS&lt;/h2>
&lt;p>在現實世界中，QPS（每秒查詢次數）通常不是由開發團隊來決定的，他大多是仰賴於行銷團隊的目標或者老闆的計畫。&lt;/p>
&lt;p>這雨表示我們通常只會得到 MAU（每月活躍用戶數）而不是一個明確的 QPS 數值。&lt;/p>
&lt;p>舉例來說，如果行銷團隊告訴我們下個月他們計畫讓每月活躍用戶成長到 100 萬人，至少要多少的 QPS 才能夠滿足行銷團隊的需求呢？&lt;/p>
&lt;p>經過短暫的討論跟推測，我們注意到了一些跟 Request 有關的線索。&lt;/p>
&lt;ul>
&lt;li>使用者並不會隨時在線上&lt;/li>
&lt;li>一個使用者的操作後面會有多個請求產生&lt;/li>
&lt;li>大部分的使用者會集中在特定的時間操作（Ex. 活動）&lt;/li>
&lt;/ul>
&lt;p>假設我們使用 80-20 法則來推斷有 80% 的使用者只會在 20% 的時間使用我們的服務。&lt;/p>
&lt;p>然後我們要定義每秒鐘使用者最大會產生的請求數，在這部分導師告訴我們從經驗上來看選擇「最常見的操作」並計算這個操作會產生的請求數會是一個比較合適的選擇。&lt;/p>
&lt;p>到此為止我們就獲得了有限的情報足以從 MAU 來計算 QPS 應有的數值。&lt;/p>
&lt;ul>
&lt;li>MAU: 100 百萬&lt;/li>
&lt;li>每秒使用者請求數: 每個動作 3 個 API Request&lt;/li>
&lt;li>活躍時間: 約集中在每天的 20% 時間內&lt;/li>
&lt;/ul>
&lt;p>所以我們就可以像這樣計算：&lt;/p>
&lt;blockquote>
&lt;p>(1 million * 3 API Request) / (30 * 0.2 * 86400) * 0.8 ~= 4.6 QPS&lt;/p>
&lt;/blockquote>
&lt;p>轉換成公式的話類似這樣：&lt;/p>
&lt;blockquote>
&lt;p>(每月活躍人數 * 請求數) / (一個月 * 20% 的時間 * 1 天 (以秒為單位)) * 80% 的使用者 ~= QPS&lt;/p>
&lt;/blockquote>
&lt;p>最後的結果遠低於我們預期的數字，但是他確實是基於數據而且有說服力的。&lt;/p>
&lt;p>因此，要達到目標我們設計的架構至少要允許每秒大於 4.6 的 QPS 才能夠滿足行銷團隊的需求。&lt;/p>
&lt;blockquote>
&lt;p>不過導師也提醒我們這個比例會因為不同情況而改變，但是我們可以透過網路上公開的報告來評估自己所在的產業或服務適合採取怎樣的比例配置。&lt;/p>
&lt;/blockquote>
&lt;h2 id="onclusion">結論&lt;/h2>
&lt;p>這是我們第一部分的討論，雖然只花了一個半小時左右但是情報量其實已經非常的多。&lt;/p>
&lt;p>後面剩下的時間我們開始討論 SLI/SLO/SLA 和可用性造成的 QPS 下降，但是因為只剩下比較短的時間所以我們應該會在線上或者下次的聚會繼續討論，基本上我也會在討論完後稍微整理記錄下來。&lt;/p>
&lt;p>在這約兩小時跟導師和其他成員的討論後，我依舊認為在 TGONext 這個活動最重要的是跟導師學習他們在面對問題時的觀點。&lt;/p>
&lt;p>在這個高併發的討論中，我們從定義「高併發」到專注在技術上的「QPS」來檢視我們需要的目標，最後再將我們的經驗連結其他部門讓合作得以達成。&lt;/p>
&lt;p>這幾年不時會有「頭銜不重要」的說法出現，不過當你跟 TGONext 裡面的這些 CTO 或者其他高階人才學習後，你會發現我們跟他們的差別在於我們常常關注在錯誤的問題上，而且並不清楚該用什麼方法正確的處理。&lt;/p>
&lt;p>也因此我是很感謝 &lt;a href="https://tgonetworks.org/">TGONextworks&lt;/a> 提供這樣的機會給我們一個類似路標一樣的方向去學習更高階的技巧，而非因為自己在公司有個不錯的頭銜而自我滿足。&lt;/p></content:encoded></item><item><title>撰寫一個合適的 RSpec 測試</title><link>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</link><category>Ruby</category><category>RSpec</category><category>心得</category><category>BDD</category><category>TDD</category><category>Rails</category><pubDate>Thu, 20 Feb 2020 00:26:16 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</guid><description>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p></description><content:encoded>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p>
&lt;p>在開始之前我們先不要管什麼 TDD 或者 BDD 之類或是你之前讀過的一些測試相關的文章，然後反思一下什麼是「測試」為什麼我們需要「測試」？&lt;/p>
&lt;p>基本上，我們會把測試放到專案裡面大多是為了要避免一些人會不小心犯的錯誤。所以透過定義一些自動化的程式，來確定我們的實作跟「規格」是相同的。&lt;/p>
&lt;p>不過，規格跟程式碼都還是由人來撰寫跟產生的，所以很明顯的如果我們使用錯誤的規格或者錯誤的程式去測試，依舊還是會得到錯的結果。&lt;/p>
&lt;p>所以盡量保持一切單純會是個不錯的做法，至少你在寫測試的時候會覺得快樂一點。&lt;/p>
&lt;h2 id="pure-ruby-example">純 Ruby 的範例&lt;/h2>
&lt;p>在我的經驗中測試其實跟你寫的程式碼是有關聯的，如果你本身寫出來的程式就很糟糕，那麼測試也會變得超級難寫。也因此不管是先寫測試還是後寫測試，最重要的事情是要想清楚你的需求還有你想要測試哪些東西。&lt;/p>
&lt;p>話不多說，我們先簡單實作一個 &lt;code>Calculator&lt;/code> 物件來測試看看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">Calculator&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>
&lt;span class="vi">@inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這是一個很簡單的 &lt;code>Calculator&lt;/code> 物件，在初始化的時候會產生一個 &lt;code>@inputs&lt;/code> 陣列。&lt;/p>
&lt;p>然後就可以先搭出一個簡單的測試檔案出來：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="no">Calculator&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:calculator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="no">Calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後我們來增加一個 &lt;code>#add&lt;/code> 方法，讓我們可以簡單的對這個物件做一些操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">Calculator&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>
&lt;span class="vi">@inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@inputs&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">perform&lt;/span>
&lt;span class="vi">@inputs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下來就是修改一下我們的測試，讓我們可以去測試這個物件提供的方法跟行為。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="no">Calculator&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:calculator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="no">Calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s1">&amp;#39;#add&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="kp">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s1">&amp;#39;#perform&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">perform&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">before&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在我的經驗裡面，如果是一個很不錯的測試情境應該是可以透過定義 &lt;code>subject&lt;/code> 來指定目前測試的對象，而且我們基本上可以用一行斷言來完成測試，而且大部分的時候我都會盡量讓我寫出來的東西可以像這樣被測試。&lt;/p>
&lt;blockquote>
&lt;p>不過現實情況永遠不會這麼理想，之後有機會可能會再討論看看，至少這篇文章應該不會提到這些情況。&lt;/p>
&lt;/blockquote>
&lt;h2 id="real-world-example">實際案例&lt;/h2>
&lt;p>現在我們對一個理想的測試有一些概念了，那麼我們就繼續在實際的情況中來應用看看。&lt;/p>
&lt;p>今天早上討論的是一段用來處理付款的物件，不過是好幾年前寫的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentService&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">order&lt;/span>
&lt;span class="vi">@payment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="n">setup&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">setup&lt;/span>
&lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currency&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">perform&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kp">false&lt;/span> &lt;span class="k">unless&lt;/span> &lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid?&lt;/span>
&lt;span class="no">ActiveRecord&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transaction&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>
&lt;span class="no">VendorAPI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kp">private&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">amount&lt;/span>
&lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="ss">:subtotal&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當我們想測試這個物件的時候會發現很難測試，因為他把所有東西都塞到 &lt;code>@payment&lt;/code> 裡面，而且又無法在外部存取。&lt;/p>
&lt;p>一般來說我們可能會想直接地把 &lt;code>@payment&lt;/code> 曝露出去，變成像是 &lt;code>service.payment.amount&lt;/code> 這樣的形式。&lt;/p>
&lt;p>這樣我們確實可以寫出一段測試並檢查結果，不過這段測試其實有點不直覺。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我們測試的是「Service Object」本身而不是「Payment」這個封裝在裡面的 Model，根據這樣的推論，我們的測試實際上應該要像下面這樣。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>現在我們的 &lt;code>subject&lt;/code> 就確實是指我們的 Service Object 的 &lt;code>amount&lt;/code> 而非 Payment Model。&lt;/p>
&lt;p>根據我們的預期，修改後的 &lt;code>PaymentService&lt;/code> 應該會像這樣：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentService&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">order&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">amount&lt;/span>
&lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="ss">:subtotal&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">perform&lt;/span>
&lt;span class="n">payment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build_payment&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kp">false&lt;/span> &lt;span class="k">unless&lt;/span> &lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid?&lt;/span>
&lt;span class="no">ActiveRecord&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transaction&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>
&lt;span class="no">VendorAPI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kp">private&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">build_payment&lt;/span>
&lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payments&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ss">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">currency&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currency&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>透過這樣的重構，我們的測試就很直覺的關注在 &lt;code>PaymentService&lt;/code> 物件本身上面。&lt;/p>
&lt;p>在工作中基本上我都是用這樣的方式思考怎麼設計一個物件，算是我自己這幾年在寫程式上的經驗。&lt;/p>
&lt;h2 id="the-rails-examples">一些關於 Rails 的例子&lt;/h2>
&lt;p>不得不說 Rails 在 Ruby 工程師裡面算是很熱門的框架，我每天工作也會用到。前面提到的這些技巧在 Rails 裡面也能應用嗎？&lt;/p>
&lt;p>簡單來說，只要想辦法保持物件單純測試起來就會變得容易。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># Model&lt;/span>
&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="no">User&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">should&lt;/span> &lt;span class="n">validate_presence_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;#avatar_url&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;example@example.com&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">email&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">avatar_url&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="s2">&amp;#34;returns Gravatar URL&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">digest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">OpenSSL&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Digest&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">MD5&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hexdigest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">should&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://www.gravatar.com/avatar/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>像是在寫 Model 的時候我是會避免放太多邏輯在裡面，除非專案真的很小才會考慮直接寫在裡面。當你的專案變複雜的時候，我們常常會要做很多步驟的處理才能完成一件事情，這其實就算是一種訊號告訴我們需要把這些東西拆到一個獨立的物件上，然後我們就可以專心用測試檢查這個處理的流程（通常我們就會叫這類物件 Service Object）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># Request&lt;/span>
&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;/api/users&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:request&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;GET /api/users&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:users&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">create_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">before&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="n">api_users_path&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">code&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">should&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">should_not&lt;/span> &lt;span class="n">be_empty&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在情況的允許下我都會盡量讓測試看起來是簡單的，為了要可以像這樣簡單的檢查就表示我們需要更深入思考我們設計的物件是否是清晰而且簡單使用的。&lt;/p>
&lt;p>上面這個範例其實只能涵蓋很小一部分的測試情境，不過我想這應該已經足以讓我們了解到一個恰當的測試是需要我們在寫程式上多注意才能做到的。&lt;/p>
&lt;p>當然，我有時候也會因為進度問題跳過測試，而且也還沒有好好寫測試的習慣。&lt;/p>
&lt;p>但是根據前面分享的經驗，即使你不寫測試你還是需要思考「當我測試我的程式時，這樣是容易被測試的嗎？」&lt;/p>
&lt;p>當你習慣這樣做之後，其實會發現很多網路上的「最佳實踐」如果有認真遵守的話，其實就能讓我們的程式碼便的容易測試。&lt;/p>
&lt;p>舉例來說好了，蠻多新手會定義一些回傳不同類型數值的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">def&lt;/span> &lt;span class="nf">sum&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kp">false&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">summable?&lt;/span>
&lt;span class="vi">@items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其實這就造成我們很難去預測這個方法會回傳什麼，最後還會演變成需要寫更多的測試去檢查這個方法是否正常。&lt;/p>
&lt;h2 id="conclusion">總結&lt;/h2>
&lt;p>其實這不算是很高深的技巧，不過實際上我花了好幾年才慢慢了解該怎麼寫一個恰當的測試。&lt;/p>
&lt;p>會寫這篇文章主要就是發現我在 Code Review 的時候要求同事重構一些有問題的舊程式碼，但是得到的就是一臉迷茫的表情，因為他們不知道該從哪裡開始重構起來，尤其是他們要補上測試來檢查這些舊的程式。&lt;/p>
&lt;p>不過當你也覺得疑惑的話，可以檢查看看你的程式碼：&lt;/p>
&lt;ul>
&lt;li>你的測試能不能專注在單一物件上，而不需要依賴其他物件。&lt;/li>
&lt;li>實作的行為是不是只專注在一件事情上（像是只處理讀寫或驗證資料或者發送 API 之類的）&lt;/li>
&lt;li>回傳的數值是否是可以預期的（像是只會有數字、擁有同樣介面的物件）&lt;/li>
&lt;/ul>
&lt;p>其實這些東西如果有讀過一些像是 SOLID 這種物件導向的原則會覺得這些東西還蠻簡單的，不過實際上實作的時候還是很難拿捏要怎麼寫才不會過度設計並寫出適當的測試。&lt;/p>
&lt;p>總之，希望這篇文章能給大家在寫測試上有一些靈感。&lt;/p></content:encoded></item><item><title>淺談在 Google Cloud Platform 讓 Ruby on Rails 實現簡單的 Immutable Infrastructure 部署</title><link>https://blog.frost.tw/posts/2020/01/07/An-overview-of-deploy-Ruby-on-Rails-to-Google-Cloud-Platform-uses-simple-immutable-infrastructure/</link><category>Ruby</category><category>Ruby on Rails</category><category>GCP</category><category>DevOps</category><category>Ansible</category><category>Packer</category><pubDate>Tue, 07 Jan 2020 19:18:46 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/01/07/An-overview-of-deploy-Ruby-on-Rails-to-Google-Cloud-Platform-uses-simple-immutable-infrastructure/</guid><description>&lt;p>去年雙十一活動的時候有一個算是比較急的專案是要做活動網站，當時評估了一下之後決定來嘗試透過 CI 自動生成 GCE 的自訂映像檔然後搭配 Auto Scale 來做部署。&lt;/p>
&lt;p>會選擇這樣的方式主要是因為 Rails 或者大多數開發框架的部署工具預設大多是不適合 Auto Scale 的，像是 Capistrano 大多數是手動填入伺服器位置（之前也有實作過透過 GCP API 自動填入）比較適合雲端服務的作法其實就是是製作成一個映像檔來處理，也因此像是 Docker Image 這類型容器化技術在這方面是相對容易做的。&lt;/p>
&lt;p>不過考量到容器化本身也還有一些調整問題才適合使用，再加上雲端服務的選擇是使用 GCP 來提供服務，並不像 AWS ECS 有專門針對容器的服務（可能是我不知道）而是提供 K8S 的方案，對一個短期活動來說在整個專案成員都沒有經驗的前提下學習成本還是偏高的。&lt;/p>
&lt;p>因此相對適合的做法是用之前我準備好的 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 腳本，搭配 &lt;a href="https://www.packer.io/">Packer&lt;/a> 這套工具直接在 GCP 上面生成一個自訂的映像檔然後直接更新 Instance Group 的設定讓他以新版本 Scale 起來，就能做到基本上網站不斷掉的更新（Health Check 和 Scale 規則需要調整好）&lt;/p>
&lt;p>我們大概花了約一天多的時間快速搭起來，這次的開發時間約兩週中間是透過放額外的人力去支援搭建這個部署流程。&lt;/p></description><content:encoded>&lt;p>去年雙十一活動的時候有一個算是比較急的專案是要做活動網站，當時評估了一下之後決定來嘗試透過 CI 自動生成 GCE 的自訂映像檔然後搭配 Auto Scale 來做部署。&lt;/p>
&lt;p>會選擇這樣的方式主要是因為 Rails 或者大多數開發框架的部署工具預設大多是不適合 Auto Scale 的，像是 Capistrano 大多數是手動填入伺服器位置（之前也有實作過透過 GCP API 自動填入）比較適合雲端服務的作法其實就是是製作成一個映像檔來處理，也因此像是 Docker Image 這類型容器化技術在這方面是相對容易做的。&lt;/p>
&lt;p>不過考量到容器化本身也還有一些調整問題才適合使用，再加上雲端服務的選擇是使用 GCP 來提供服務，並不像 AWS ECS 有專門針對容器的服務（可能是我不知道）而是提供 K8S 的方案，對一個短期活動來說在整個專案成員都沒有經驗的前提下學習成本還是偏高的。&lt;/p>
&lt;p>因此相對適合的做法是用之前我準備好的 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 腳本，搭配 &lt;a href="https://www.packer.io/">Packer&lt;/a> 這套工具直接在 GCP 上面生成一個自訂的映像檔然後直接更新 Instance Group 的設定讓他以新版本 Scale 起來，就能做到基本上網站不斷掉的更新（Health Check 和 Scale 規則需要調整好）&lt;/p>
&lt;p>我們大概花了約一天多的時間快速搭起來，這次的開發時間約兩週中間是透過放額外的人力去支援搭建這個部署流程。&lt;/p>
&lt;h2 id="準備工作">準備工作&lt;/h2>
&lt;p>目前在&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>使用的 Ansible 腳本還沒有公開的版本，不過因為還在內部優化跟改善因此這邊就簡單介紹一下目前我們使用的方式。&lt;/p>
&lt;blockquote>
&lt;p>後來有使用過 Ansible AWX (&lt;a href="https://www.ansible.com/products/tower">Tower&lt;/a>) 來嘗試部署，其實現階段的設計是不太好的。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">├── &lt;span class="o">[&lt;/span>1.0K&lt;span class="o">]&lt;/span> README.md
├── &lt;span class="o">[&lt;/span>1.6K&lt;span class="o">]&lt;/span> deploy
├── &lt;span class="o">[&lt;/span> 420&lt;span class="o">]&lt;/span> deploy.pub
├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> group_vars
│   └── &lt;span class="o">[&lt;/span>1.2K&lt;span class="o">]&lt;/span> all.yml
├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> inventories
│   └── &lt;span class="o">[&lt;/span> 309&lt;span class="o">]&lt;/span> &lt;span class="nb">local&lt;/span>
├── &lt;span class="o">[&lt;/span> 480&lt;span class="o">]&lt;/span> roles
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> 5xruby_user
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> application
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> compile_env
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> deploy_user
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> init
│   ├── &lt;span class="o">[&lt;/span> 128&lt;span class="o">]&lt;/span> logrotate
│   ├── &lt;span class="o">[&lt;/span> 160&lt;span class="o">]&lt;/span> nginx_with_passenger
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> node
│   ├── &lt;span class="o">[&lt;/span> 160&lt;span class="o">]&lt;/span> postgresql_server
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> ruby
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> ssh
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> sudo
│   └── &lt;span class="o">[&lt;/span> 128&lt;span class="o">]&lt;/span> yum_install_commons
└── &lt;span class="o">[&lt;/span> 467&lt;span class="o">]&lt;/span> setup.yml
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面是我設計的公版架構，如果是採用 Ansible 部署的專案會 Fork 這份出去近一步修改為適合專案需求的設定。&lt;/p>
&lt;blockquote>
&lt;p>實際上應該設計成類似 Ansible Galaxy 上面以 Role 為單位的腳本，不同專案是以組合 Role 配套出所需的功能來設計是比較恰當的。&lt;/p>
&lt;/blockquote>
&lt;p>以這次的專案來說 GCP 上面已經有提供 CloudSQL 服務，因此我們會將 PostgreSQL Server 替換為 CloudSQL Agent 來提供整個專案的需求。&lt;/p>
&lt;p>剩下的部分大多數是調整 &lt;code>group_vars/&lt;/code> 目錄下的設定來對應不同專案的需要。&lt;/p>
&lt;h2 id="rails-的調整">Rails 的調整&lt;/h2>
&lt;p>因為是 Immutable（不可變）的部署設計，所以會遇到一個問題就是靜態檔案需要做 Assets Precompile 處理。這一直都是在 Rails 上面部署的一個坑，因為我們大多數還是使用 Capistrano 幫客戶部署所以其實不太會踩到坑，另外就是如果是採用 CDN 的方式也會因為透過本機預先處理也不會遇到問題。&lt;/p>
&lt;p>但是在我們的方案中，建置映像檔的過程中是不需要連上資料庫就能處理。不過事實上 Ruby on Rails 在做 Assets Precompile 是會要連上資料庫的（同時 &lt;code>config/initializers&lt;/code> 的設定也會被吃進去）也就表示如果我們在設計 Ruby on Rails 專案的時候沒有仔細考慮像是 Redis 或者其他第三方服務的連接處理，就會讓 CI 甚至現在要處理的 CD 遇到很大的瓶頸。&lt;/p>
&lt;p>因為時間有限，所以跟同事討論後我們決定用一個稍微偷吃步的做法，利用 &lt;a href="https://github.com/nulldb/nulldb">nulldb&lt;/a> 這個套件製作出一個假的資料庫讓 Rails 以為有連上。&lt;/p>
&lt;h2 id="packer-的設定">Packer 的設定&lt;/h2>
&lt;p>前面我們在 Ansible 的腳本中其實會事先處理好幾件事情：&lt;/p>
&lt;ol>
&lt;li>安裝五倍的 Deploy Key&lt;/li>
&lt;li>安裝五倍的 SSH CA（透過 &lt;a href="https://www.vaultproject.io/">Vault&lt;/a> 這套服務）&lt;/li>
&lt;li>所有 Ruby on Rails 所需的環境&lt;/li>
&lt;li>額外的 Assets Precompile 處理&lt;/li>
&lt;li>所有正式環境需要的變數（大多會透過 Ansible 的 Vault 功能加密）&lt;/li>
&lt;/ol>
&lt;p>而 Packer 則可以幫助我們在遠端（Ex. GCP / AWS）上面執行我們的 Ansible 腳本，然後將安裝完的環境製作成自訂的映像檔，然後就能夠被 Instance Group 之類的使用作為開啟新機器的基礎。&lt;/p>
&lt;blockquote>
&lt;p>Packer 是一套自動化建置映像檔的工具，功能大致上就是可以在不同的 Provider 上面執行我們所設定的 Provision 腳本，然後再透過 Provider 提供的 API 來產生映像檔。最早的時候我是拿來產生 Vargant 的映像檔，在 DevOps 方面 HashiCrop 旗下的工具可以說是相當完整又搭配的不錯。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>{
&amp;quot;variables&amp;quot;: {
&amp;quot;deploy_key_path&amp;quot;: &amp;quot;{{pwd}}/keys/deploy&amp;quot;,
&amp;quot;master_key_path&amp;quot;: &amp;quot;{{pwd}}/master.key&amp;quot;,
&amp;quot;revision&amp;quot;: &amp;quot;UNKNOWN&amp;quot;
},
&amp;quot;builders&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;googlecompute&amp;quot;,
&amp;quot;project_id&amp;quot;: &amp;quot;EVENT-5X-CUSTOMER&amp;quot;,
&amp;quot;source_image_family&amp;quot;: &amp;quot;EVENT-IMAGE&amp;quot;,
&amp;quot;ssh_username&amp;quot;: &amp;quot;packer&amp;quot;,
&amp;quot;zone&amp;quot;: &amp;quot;asia-east1-b&amp;quot;,
&amp;quot;image_name&amp;quot;: &amp;quot;EVENT-{{timestamp}}&amp;quot;,
&amp;quot;image_family&amp;quot;: &amp;quot;EVENT-IMAGE&amp;quot;,
&amp;quot;image_description&amp;quot;: &amp;quot;Build with commit #{{user `revision`}}&amp;quot;,
&amp;quot;account_file&amp;quot;: &amp;quot;credentials.json&amp;quot;,
&amp;quot;tags&amp;quot;: [&amp;quot;http-server&amp;quot;],
&amp;quot;preemptible&amp;quot;: true,
&amp;quot;scopes&amp;quot;: [
&amp;quot;https://www.googleapis.com/auth/sqlservice.admin&amp;quot;,
&amp;quot;https://www.googleapis.com/auth/devstorage.full_control&amp;quot;
]
}
],
&amp;quot;provisioners&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;ansible&amp;quot;,
&amp;quot;playbook_file&amp;quot;: &amp;quot;./playbook/setup.yml&amp;quot;,
&amp;quot;user&amp;quot;: &amp;quot;packer&amp;quot;,
&amp;quot;extra_arguments&amp;quot;: [
&amp;quot;--vault-id&amp;quot;, &amp;quot;vault-password&amp;quot;,
&amp;quot;--extra-vars&amp;quot;, &amp;quot;deploy_key_path={{user `deploy_key_path`}}&amp;quot;,
&amp;quot;--extra-vars&amp;quot;, &amp;quot;master_key_path={{user `master_key_path`}}&amp;quot;
]
}
]
}
&lt;/code>&lt;/pre>&lt;p>使用 Packer 基本上不難，有幾個技巧要記得掌握好就可以了。&lt;/p>
&lt;ol>
&lt;li>&lt;code>variables&lt;/code> 區塊，因為打包的配置跟需求肯定會有差異，還有一些密碼之類的所以先設定成變數就能動態調整&lt;/li>
&lt;li>&lt;code>builders&lt;/code> 區塊，這部分照官方的文件設定即可上面的可以當作參考（Web Server 大多試用）&lt;/li>
&lt;li>&lt;code>provisioners&lt;/code> 區塊，其實可以跟 Shell Script 那些混用，不過使用 Ansible 算是相對容易設定環境的做法（只需要有檔案）&lt;/li>
&lt;/ol>
&lt;p>不過上面看似簡單，其實還有另外一個坑隱藏在裡面。&lt;/p>
&lt;p>&lt;strong>Google Cloud 的 Service Account 開不出對的權限&lt;/strong>&lt;/p>
&lt;p>因為這類頻率不高的操作我猜大家都會透過 Web UI 處理，但是要讓 Packer 有正確的權限做事情需要透過下指令的方式才能找到（也許有加上去了，不過去年十月底的時候是還沒有的）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gcloud projects add-iam-policy-binding EVENT-5X-CUSTOMER --role roles/iam.serviceAccountActor --member serviceAccount:packer@EVENT-5X-CUSTOMER.iam.gserviceaccount.com
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一來我們的 Packer 就能夠正確的從我們的 CI 伺服器（Ex. GitLab CI）對 GCP 下達指令產生映像檔，這個過程依照機器的規格跟要安裝的東西可能會花上十到十五分鐘不等的時間（至少三分鐘是在等 GCP 開機器）因此整個流程跑（測試、部署）也大概會花上半小時，以速度來說很難說是一個不錯的速度（跟 Capistrano 手動下指令相比）&lt;/p>
&lt;p>但是如果這個流程是全自動的，其實還是能接受的，工程師只要負責上傳程式碼跟 Merge 回 Master Branch（Production 用的分支）整個效率還是會比各種操作完畢後再用 Capistrano 部署還來的能夠有效迭代版本，不過真的想要能更加快速的更新和使用容器技術的 Docker 相比確實是慢上不少。&lt;/p>
&lt;p>這就如同五倍大多數的客戶都還是使用 Capistrano 部署一樣，我們應該評估客戶的需求跟開發迭代的情況來選擇一個適合的做法，很明顯地使用 Capistrano 雖然不怎麼自動化但是卻非常簡單容易使用。&lt;/p>
&lt;blockquote>
&lt;p>如果大家有仔細看 Packer 設定的話會發現 Source Image 和生成的 Image 群組是相同的，這是因為我們在打包的時候可以沿用裡面原有的環境來生成就可以大大縮短 Ansible 重複編譯的時間。最初的版本是使用 CentOS 生成，之後再重複使用前一次的版本來做修改。&lt;/p>
&lt;/blockquote>
&lt;h2 id="ci-設定">CI 設定&lt;/h2>
&lt;p>這次客戶是將原始碼保存在五倍的 GitLab 伺服器上，因此使用的是 GitLab CI 來進行這些處理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$DEPLOY_KEY ===PREVENT KEY INVALID===&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">&amp;gt; keys/deploy # NOTE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Ensure&lt;span class="w"> &lt;/span>Deploy&lt;span class="w"> &lt;/span>Key&lt;span class="w"> &lt;/span>has&lt;span class="w"> &lt;/span>newline&lt;span class="w"> &lt;/span>in&lt;span class="w"> &lt;/span>last&lt;span class="w"> &lt;/span>line&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$SERVICE_ACCOUNT_JSON&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>credentials.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$VAULT_ID&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>vault-password&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$MASTER_KEY&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>master.key&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>build&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- packer&lt;span class="w"> &lt;/span>build&lt;span class="w"> &lt;/span>-var&lt;span class="w"> &lt;/span>revision=$REVISION&lt;span class="w"> &lt;/span>main.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">only&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- master&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>deploy&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>google/cloud-sdk&lt;span class="p">:&lt;/span>alpine&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$ROLLING_SERVICE_ACCOUNT&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>account.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- gcloud&lt;span class="w"> &lt;/span>auth&lt;span class="w"> &lt;/span>activate-service-account&lt;span class="w"> &lt;/span>--key-file&lt;span class="w"> &lt;/span>account.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- gcloud&lt;span class="w"> &lt;/span>compute&lt;span class="w"> &lt;/span>instance-groups&lt;span class="w"> &lt;/span>managed&lt;span class="w"> &lt;/span>rolling-action&lt;span class="w"> &lt;/span>replace&lt;span class="w"> &lt;/span>$INSTANCE_GROUP_NAME&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--max-surge=$MAX_SURGE&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--max-unavailable=$MAX_UNAVAILABLE&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--project=$GCP_PROJECT&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--region=$GCP_REGION&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>manual&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">only&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- master&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為我們需要在執行 Ansible 時同時帶入一些檔案（現在回想起來，可能放到 Vault 加密比較方便一點）所以會先將相關的檔案生成出來。&lt;/p>
&lt;p>接下來就是利用 &lt;code>packer build&lt;/code> 的 &lt;code>-var&lt;/code> 選項將一些需要填入的設定值放進去（這邊會以 Commit SHA 當作參考，方便我們分辨使用的版本）&lt;/p>
&lt;p>最後 &lt;code>deploy&lt;/code> 選項考量到更新的機制最後是採用手動的方式，不過這邊就是利用 &lt;code>gcloud&lt;/code> 指令對 Instance Group 做一次重新的 Scale 將所有 Instance 都替換成新版的映像檔。&lt;/p>
&lt;blockquote>
&lt;p>不過 gcloud 的指令能用的選項和 Web UI 上的有差異，而且稍微跟字面上意思有點出入所以試了幾次才成功。&lt;/p>
&lt;/blockquote>
&lt;p>另外，在 Rails 專案的 CI 設定我們可以利用 GitLab 的 Trigger 功能去觸發 Packer 做事情（如果是企業版就有內建上下游功能）&lt;/p>
&lt;pre>&lt;code>deploy:
stage: deploy
script:
- curl -X POST
-F token=$PACKER_TRIGGER_TOKEN
-F ref=master
-F variables[REVISION]=$CI_COMMIT_SHORT_SHA
https://git.5xruby.tw/api/v4/projects/309/trigger/pipeline
only:
- master
&lt;/code>&lt;/pre>&lt;p>如此一來在開發團隊確定一項功能可以 Merge 回 master 之後就能夠自動製作出對應版本的映像檔，用於之後部署的時候自動更新。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>實際上這個方案整體來說是相當不完善的，不過除了從網路上的資料學習參考這些應用方式之外也還需要客戶有適合的情境才能夠這樣使用。不過工作這三年也算是勉強把各種比較常被討論的部屬方式都練過一遍，雖然不知道下一次有時間讓我改進 Ansible 以及這個部署流程的時間跟機會是什麼時候，不過還是不得不感嘆現在整個網站、軟體開發的領域真的是越來越複雜跟專業，有時候必須對每一種領域的技能都有所概念，才能夠幫助客戶解決各種情境上的問題。&lt;/p>
&lt;p>這也是我會選擇在剛畢業後就到接案類型公司的原因之一，相比在一間公司只使用一種方式解決問題，能夠根據情況跟需求選擇不同的技術並在不影響客戶的狀況下嘗試跟改進並逐漸完整一個開發體系，算是很難得的經驗。&lt;/p></content:encoded></item><item><title>如何透過 Service Account 來取得 Google API 的 OAuth2 Token</title><link>https://blog.frost.tw/posts/2019/12/29/How-to-use-Service-Account-to-exchange-Google-OAuth2-API-token/</link><category>JWT</category><category>OAuth2</category><category>Service Account</category><category>Ruby</category><category>API</category><category>Google</category><pubDate>Sun, 29 Dec 2019 20:43:04 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/12/29/How-to-use-Service-Account-to-exchange-Google-OAuth2-API-token/</guid><description>&lt;p>前陣子在嘗試一些比較少見的 Google API 時發現，在 Google 提供的 Ruby Gem 裡面並不支援這個 API 的實作，這表示需要自己去想辦法解決如何去呼叫這個 API 的問題。&lt;/p>
&lt;p>不過呼叫 API 需要 Access Token 才能夠使用，以往我們都是依靠第三方套件或者 Google 官方提供的 Gem 直接呼叫，似乎很少去直接實作客戶端。另一方面我們對 OAuth2 的認識大多是做 SSO（Single Sign On）而非這種伺服器對伺服器的呼叫。&lt;/p>
&lt;p>以 Google 這種規模的公司，如果是直接使用一般 OAuth2 的伺服器對伺服器的作法似乎也不太適合，而 Google 提供的解決方案就是 Service Account 了！&lt;/p></description><content:encoded>&lt;p>前陣子在嘗試一些比較少見的 Google API 時發現，在 Google 提供的 Ruby Gem 裡面並不支援這個 API 的實作，這表示需要自己去想辦法解決如何去呼叫這個 API 的問題。&lt;/p>
&lt;p>不過呼叫 API 需要 Access Token 才能夠使用，以往我們都是依靠第三方套件或者 Google 官方提供的 Gem 直接呼叫，似乎很少去直接實作客戶端。另一方面我們對 OAuth2 的認識大多是做 SSO（Single Sign On）而非這種伺服器對伺服器的呼叫。&lt;/p>
&lt;p>以 Google 這種規模的公司，如果是直接使用一般 OAuth2 的伺服器對伺服器的作法似乎也不太適合，而 Google 提供的解決方案就是 Service Account 了！&lt;/p>
&lt;h2 id="jwt">JWT&lt;/h2>
&lt;p>自從前端成為一個專門的專業並且逐漸完善、複雜，這中間出現了一個叫做 JWT（JSON Web Token）的應用，現在很多網站應該也都採用 JWT 來作為 API 的 Token。畢竟使用 JSON 記錄使用者的基本資訊，就能夠透過驗證 JWT 的可靠來確認是否為信任的認證伺服器發出，再根據 JSON 上的資訊就可以免去一次查詢使用者跟權限的操作，對比較複雜或者比較大的系統來說就能節省下不少時間。&lt;/p>
&lt;p>在 Google API 的 Servie Account 認證流程就是透過 JWT 來完成的，不過事情並沒有我們想像中那麼簡單生成一個 JWT 就可以直接呼叫。&lt;/p>
&lt;h2 id="grant-code">Grant Code&lt;/h2>
&lt;p>回到正題，如果我們去看 Google 的&lt;a href="https://developers.google.com/identity/protocols/OAuth2ServiceAccount">文件&lt;/a>會發現我們前面提到的 JWT 其實是用來產生 Grant Code 的作用，而不是直接用來產生 Access Token 的（文件後面有說有例外，不過一般來說都是需要再跑一次流程）&lt;/p>
&lt;p>也就是說，我們在整個流程中是這樣的步驟：&lt;/p>
&lt;ol>
&lt;li>使用 Service Account 生成 JWT (Grant Code)&lt;/li>
&lt;li>在伺服端走 OAuth2 流程用 Grant Code 換取 Access Token&lt;/li>
&lt;li>透過 Access Token 呼叫 Google API&lt;/li>
&lt;/ol>
&lt;p>至於生成的 JWT 中基本上只需要指定 Issuer 和 Scope 並且用正確的 Private Key 做簽章，就能夠順利通過 OAuth2 驗證獲取 Access Token。&lt;/p>
&lt;h2 id="實作">實作&lt;/h2>
&lt;p>前面兩段的敘述感覺有點複雜，不過我們直接實際實作一次就非常容易理解，可能還比我們平常使用的 OAuth2 流程容易不少。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># frozen_string_literal: true&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;bundler/inline&amp;#39;&lt;/span>
&lt;span class="n">gemfile&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">source&lt;/span> &lt;span class="s1">&amp;#39;https://rubygems.org&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;jwt&amp;#39;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;openssl&amp;#39;&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;net/http&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這次我們直接使用單個 Ruby 檔案來實作，整個流程非常簡單而且不複雜唯一需要的就是 JWT 的套件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">service_account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./service_account.json&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">privkey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">OpenSSL&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">PKey&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">RSA&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service_account&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;private_key&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ss">iss&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">service_account&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;client_email&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">scope&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/wallet_object.issuer&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">aud&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;https://oauth2.googleapis.com/token&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">exp&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">iat&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">JWT&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">privkey&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;RS256&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下來我們把 Service Account 的內容讀取進來產生 JWT，一般我們會選擇 JSON 格式來抓取。之前可能會有點疑惑就是為什麼還會提供 p12 的檔案格式，從這個步驟我們大概就可以猜出來原因。&lt;/p>
&lt;p>在這個 JWT 裡面，我們需要 Service Account 裡面的 Client Email 和 Private Key 兩個資訊，剛好對應的就是我們在 Google API 上面開設的 Service Account 的 Email 以及 p12 這個檔案，安全性上在 Google 的處理中也是用非對稱加密的方式來做，因此我們會拿到一個 Private Key 用來產生這些 Token。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">URI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://oauth2.googleapis.com/token&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Net&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">HTTP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uri&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">req&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span>
&lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">URI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode_www_form&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ss">grant_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;urn:ietf:params:oauth:grant-type:jwt-bearer&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">assertion&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">token&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Net&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">HTTP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">use_ssl&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kp">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span> &lt;span class="n">req&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">access_token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;access_token&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最後就是對 Google 的 OAuth2 API 發出一個請求來換取 Access Token 的請求，接下來我們就能利用這個 Access Token 去存取我們希望存取的資源。&lt;/p>
&lt;blockquote>
&lt;p>雖然沒有測試過，但是在 Service Account 開設時沒有授權的權限，即使 Scope 有指定也是拿不到對應的授權的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="firebase">Firebase&lt;/h2>
&lt;p>看到這個用法，我另外一個聯想到的就是 Firebase 的 &lt;a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens#create_custom_tokens_using_a_third-party_jwt_library">Custom Token&lt;/a> 機制，我們一樣會先跟 Firebase 請求一個 Service Account 用來生成這個 Token。&lt;/p>
&lt;p>產生的 JWT 的設置幾乎跟前面提到的方式差不多，只是內容改為針對 Firebase 做出了一些調整。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>其實整體來說並不複雜，不過會想寫這篇文章是因為之前雖然看過 Firebase 的使用方式卻沒有多想。這次透過 Google API 串接了解到在 JWT 和 OAuth2 的搭配應用上還能有這樣的變化，算是非常直得學習的一個方式。&lt;/p>
&lt;p>相較於我們直接將 JWT 作為 Access Token 的使用方式，這種方式在某種層面上來說提供了我們在一些額外應用場景的新選擇，就我自己目前能想到的就有像是 API 服務、IoT 裝置等等，不過前陣子有稍微查了一下是否有其他專案有這樣的應用方式，資料似乎還不多。&lt;/p>
&lt;p>不過至少未來設計服務的時候可以多一種方式來提供 API 串接的選項，畢竟以 Service Account 方式的管理似乎是比原本對每個客戶端都開設 Application 還簡單了一些（或者內部隱含的還是做了 Application 的註冊）&lt;/p></content:encoded></item><item><title>Ruby World Conference 2019 見聞</title><link>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</link><category>Ruby</category><category>Ruby World Conference</category><category>Ruby on Rails</category><category>心得</category><pubDate>Mon, 18 Nov 2019 20:52:40 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</guid><description>&lt;p>今年把在六月到八月做的一個小專案拿去投稿 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a> 意外的獲得了 15 分鐘的時間，於是又展開了一次日本出差之旅，剛好彌補一下今年因為客戶專案需要趕上線而無法參加 &lt;a href="https://rubykaigi.org/">RubyKaigi&lt;/a> 的遺憾。&lt;/p>
&lt;p>跟 RubyKaigi 不太一樣的地方是 Ruby World Conference 雖然叫做「World Conference」但是除了台上的講者之外，幾乎都是日本人（而且是稍微有年紀的大叔）去參加的。&lt;/p></description><content:encoded>&lt;p>今年把在六月到八月做的一個小專案拿去投稿 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a> 意外的獲得了 15 分鐘的時間，於是又展開了一次日本出差之旅，剛好彌補一下今年因為客戶專案需要趕上線而無法參加 &lt;a href="https://rubykaigi.org/">RubyKaigi&lt;/a> 的遺憾。&lt;/p>
&lt;p>跟 RubyKaigi 不太一樣的地方是 Ruby World Conference 雖然叫做「World Conference」但是除了台上的講者之外，幾乎都是日本人（而且是稍微有年紀的大叔）去參加的。&lt;/p>
&lt;h2 id="議程">議程&lt;/h2>
&lt;p>到目前為止我似乎還沒有在 RubyKaigi 清醒過（扣掉部分英文的議程）這次即使因為出雲大社的祭典（神在月）需要跟老闆去膠囊旅館，因此每天晚上幾乎都是洗個澡就睡（空間小、在公共空間又不適合辦公）其實睡得還蠻飽的，但是依舊不敵口譯的催眠之力，直接睡死。&lt;/p>
&lt;blockquote>
&lt;p>有趣得是議程中間都不會想睡⋯⋯&lt;/p>
&lt;/blockquote>
&lt;p>所以這次幾乎是沒有聽到太多詳細的議程，幾乎都是片段的部分。當然還是有不少有趣的地方，像是 Class Method 被定義在哪裡、Concurrent 問題等等，不過因為大多是片段（記憶斷片）的部分就不特別提出來討論。&lt;/p>
&lt;h2 id="welcome-party">Welcome Party&lt;/h2>
&lt;p>不知道是不是 Ruby 社群的傳統，總之不論是台灣的 &lt;a href="https://2019.rubyconf.tw/">RubyConf Taiwan&lt;/a> 或者 RubyKaigi 和 Ruby World Conference 都有 N+1 天的活動時間，大多是從活動開始前一天晚上就會從所謂的 Pre-Party（前夜祭）開始。這次的 Welcome Party 是限定講者參加的，地點是位於松江的一間&lt;a href="https://horai-kitijitsu.com/">懷石料理&lt;/a>餐廳。&lt;/p>
&lt;p>不過說實在的，雖然有些料理不錯不過可能是天氣或者季節的關係我自己是沒有那麼喜歡。&lt;/p>
&lt;blockquote>
&lt;p>Ruby World Conference 是固定在松江舉辦的，因為這裡是 Ruby 語言之父 Matz 的故鄉。這幾年開場介紹的時候連市長都會直接說是「Ruby City」了！&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/9F743E5DAD280C8F13BAD51B3391CE46.jpg" alt="Matz 的開場演講">&lt;/p>
&lt;p>運氣不錯的是講者大多會英文，所以以一個不會日文的外國講者來說算是還算自在的，活動只到八點半左右稍微跟幾位講者聊天後很快就結束了。&lt;/p>
&lt;h2 id="第一天">第一天&lt;/h2>
&lt;p>因為是第一次參加活動，所以試著想要完整地聽議程。不過最後完全變成不斷重複睡著、醒來的狀態。不過大致上可以感覺出來在 Ruby World Conference 是以偏向商業性質的研討會，這也應證了為什麼參加者的年齡層跟組成都跟大多數研討會有所差異。而且這場活動的開始還是會有像是島根縣縣長、松江市長、經濟部官員等等上台致詞（感謝會日文的老闆提示 XD）&lt;/p>
&lt;p>下午最後一場是我的演講，主要是在講一些有點觀念上的問題（心理上怎麼突破 Rails 框架的限制）用的是六到八月做的小專案，當時是用來實驗一些新的方式去設計一款聊天機器人遊戲，蠻意外這樣的題目會投稿上。後來晚上看 Twitter 的評論評價應該還算是不差，不過以內容來看感覺老外相對是比較喜歡這樣的題目。&lt;/p>
&lt;p>中間比較有趣的是這個，似乎是 RWC 的一個傳統，可以去吃一點日式點心（和菓子）和茶，沒有想像中那麼甜不過茶跟點心都蠻好吃的。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/608D1A00B80DF8DDFE0E95512673A50E.jpg" alt="和菓子">&lt;/p>
&lt;p>晚上則是固定的官方 Offical Party 跟前一天的 Welcome Party 相比餐點好吃不少，以至於大家都搶爆食物 XD&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/B2359A3DA599A883495D2D2192081B19.jpg" alt="蕎麥麵">&lt;/p>
&lt;p>不過因為大部分的人都入場，也因此跟 Welcome Party 不同有點難以跟其他人聊天，畢竟不是大部分的日本人都能講英文（或者說願意講）固定行程就是被老闆帶去認識一些大大跟用簡單的英文聊一下，然後在會場遊蕩一陣子勉強算是結束第一輪。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/A22D94C6098C2735AF7D9FC0FA6A200B.jpg" alt="當地歌手">&lt;/p>
&lt;p>因為迷迷糊糊就報名了二次會（官方）所以跟老闆再次轉移陣地，上圖是餐廳裡面演唱的當地歌手，還算是蠻有趣的表演。坐下來後其實幾乎沒有移動，一樣就是跟附近的人閒聊，不過因為基本上還是以日文為主所以我就是努力在吃點東西了 XD&lt;/p>
&lt;p>到二次會結束差不多十點多，回旅館因為也沒地方做其他事情所以就是盥洗後去睡覺。&lt;/p>
&lt;h2 id="第二天">第二天&lt;/h2>
&lt;p>因為第一天持續的睡著跟醒來，所以先嘗試聽看看今天兩場外國人的演講（不幸的是只比日文多撐了一倍多的時間）就改成去逛攤位，前幾年在 RubyKaigi 因為英文還沒有到流利的程度，最喜歡的就是去找贊助商聊天。畢竟身為擺攤人員就是必須要想辦法跟會眾對話跟宣傳，不過這邊的幾乎不會講英文，所以最後只能用很簡單的單字了解每個攤位的業務。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/8FE19A325C61279D24E04FEBF4BB4D78.jpg" alt="用 Ruby 寫的遊戲">&lt;/p>
&lt;p>比較有趣的是這間，雖然不太會英文所以只能用比手畫腳溝通。這款遊戲可以用 Ruby 或者 Strach 撰寫一些程式來控制角色過關，因為比較少見是使用 Ruby 的就特別記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>用 Strach 拉出來的還能生成 Ruby 程式碼，這點算是蠻厲害的&lt;/p>
&lt;/blockquote>
&lt;p>其他攤位也有一些有趣的地方，像是可以幫忙檢查合約的服務。或者能夠透過 App 贈送電子禮品，接收者到對應的店家（超商、星巴克等）就可以兌換相對應的禮物。還蠻方便的覺得會在台灣受歡迎，不過意外的是台灣似乎還沒有這樣的服務，而韓國、印度之類的也都已經有了。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/4AF1C8168B5A39E5401CE3111DFDFE59.jpg" alt="Ruby 拉麵">&lt;/p>
&lt;p>說到 RWC 的特產大概是有 Matz 簽名的拉麵，前面沒有仔細看包裝盒就買錯了，後面補買了一大堆（同事搶著要）回到台灣過海關時才想到可能含有肉品，還好裡面似乎只有一點碎肉不影響。&lt;/p>
&lt;p>整個活動幾乎都是在跟人聊天交流，不過這樣下來確實讓我動了明年至少要學會基本的日語會話再去挑戰的念頭，希望我能順利達成（通常到一半就變成時間都用在寫程式上）&lt;/p>
&lt;p>接下來就是非官方的活動，據說也是固定會有的燒肉 Party，在當地的燒肉店聚會跟聊天。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/7D0DDAF90EC292BE8E5A3626DB0B7461.jpg" alt="燒肉">&lt;/p>
&lt;p>結束時間一樣是八點多，所以在回去車站的路上默默的進入了二次會模式（不過回旅館也沒事情能做，不如繼續喝酒吧！）&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/5FA40D0D52864800D574204B0F5BD07A.jpg" alt="炸豆腐">&lt;/p>
&lt;p>這間居酒屋似乎前幾天就有人來過獲得好評，裡面有不少有趣的食物像是照片上的炸豆腐、烤味噌等等，另外蕎麥麵也是蠻好吃的（這區的名產大多是蕎麥麵，幾乎每天都可以吃到）&lt;/p>
&lt;p>從週二到日本為止已經要到假日了，因為行程上安排方便所以禮拜六就是讓我在日本閒晃。&lt;/p>
&lt;h2 id="第三天週末">第三天（週末）&lt;/h2>
&lt;p>雖然松江這邊相對大家常去的東京、大阪來說相對偏僻，不過還是有不少景點（出雲大社、松江城）因為這次時間點很剛好遇到的是出雲大社一些祭典的時間，所以就決定往出雲大社前進看看能不能遇到什麼特殊事件（實際上週六剛好是沒有任何祭典的日子）&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/74244A949F9507CFDC00C12CCB9F1C9C.jpg" alt="一畑鐵路">&lt;/p>
&lt;p>要從松江去出雲大社需要先透過 JR 到出雲車站，再轉乘當地的私人鐵路到出雲大社。這個鐵路公司後來問老闆應該是一個當地的財團，所以其實車站附近的百貨公司也是他們的，同時他們也是 Ruby World Conference 的贊助商。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/5BB6079800B2BFDB744B5BC71A68D57C.jpg" alt="出雲大社入口">&lt;/p>
&lt;p>雖然一出車站就直接往方向走，出雲大社跟之前去過的景點相比附近的店家相對少了很多。所以不禁讓人懷疑是不是走錯方向，不過相對於知名的景點出雲大社跟松江都算是蠻遠的點，另外就是主要祭典也是在十一月這個時期，可能平常就比較少觀光客。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/961669B737E759503749DA2C753D72DC.jpg" alt="兔子神社">&lt;/p>
&lt;p>比較有趣的是雖然有預期會有兔子，不過出雲大社基本上就是兔子神社（跟神話有關）。有趣的是裡面一些展示一些東西跟其他神社算是有一定程度的不一樣，算是沒有白來。不過主體其實不大，但是整個區域其實有很多寺廟跟神社存在，大概是因為這邊是神社的發源地關係吧。&lt;/p>
&lt;blockquote>
&lt;p>看完之後就在想神社會不會就是日本聚落的原型，後來才慢慢發展成城市之類的，不過回去後就這樣被拋在腦後沒有去查相關資料&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/3E35A4F746179BD7FB434B227647431E.jpg" alt="義式沙拉">&lt;/p>
&lt;p>晚上跟老闆剛好都在六點到七點左右回到旅館，就去附近找東西吃。不過打開 Google Map 之類的還是有點困擾，畢竟相對大都市來說餐廳跟觀光客就不多，也就很難找不會太雷的餐廳（附近又是居酒屋居多，前幾天都只要跟著就有可以吃）&lt;/p>
&lt;p>不過這間酒吧的餐點雖然不是偏日式的（沒記錯是篇義式）但是都是用熟成肉，能查到的平價也不錯而且很好吃。&lt;/p>
&lt;blockquote>
&lt;p>因為覺得前幾天有吃過不少次居酒屋了，總覺得再繼續吃居酒屋很微妙，只是沒想到附近幾乎沒有這以外的選項。&lt;/p>
&lt;/blockquote>
&lt;h2 id="第四天回程">第四天（回程）&lt;/h2>
&lt;p>這次去日本總共是六天，因為要能在白天搭飛機晚上參加 Welcome Party 所以週二就出發（晚上參加了一下當地的社群活動）雖然有問我想不想在日本多玩幾天，不過自己一個人閒逛大概也逛不了多少，後面舊照行程方便多留一天在松江，週日就跟老闆一起搭飛機回東京，然後我在自己回台灣。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/F635324619CC5B26ABE0A106ED9AB92C.jpg" alt="壽喜燒">&lt;/p>
&lt;p>中間等飛機的時間決定來去機場的餐廳嘗試了一下壽喜燒，之前幾次都礙於價位（吃一次就 5000 日幣以上）猶豫不決。但是這次想說既然是出差，而且身上日幣其實也花得不算太多，所以就決定來試試看。雖然只是先嘗試看看中等價位的雪花牛，不過跟平常吃到的比起來好吃太多，覺得算是蠻值得嘗試的。&lt;/p>
&lt;h2 id="後記">後記&lt;/h2>
&lt;p>這篇明明是研討會的紀錄結果跟遊記一樣，不過實際上中間還是多少有聊到一些技術的東西，但是相對的少。像是在 Welcome Party 有向 Matz 請教一些 WebAssembly 跑 mruby 的一些問題，看看能不能加快之後手邊幾個專案的開發。還有跟老闆說非常擅長 PostgreSQL 的大大請教該讀什麼書比較好，雖然說議程跟技術在整幾天佔的比例其實不大，不過現階段已經能輕鬆做到開發東西的狀況來說，也許去了解其他人怎麼思考反而是比較容易再進一步的做法吧。&lt;/p></content:encoded></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （二）</title><link>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</link><category>COSCUP</category><category>Game</category><category>Ruby</category><category>Golang</category><category>HTML5</category><category>JavaScript</category><category>DevOps</category><category>Docker</category><category>Unlight</category><pubDate>Sun, 20 Oct 2019 17:09:31 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</guid><description>&lt;p>寫完&lt;a href="https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/">上篇&lt;/a>後就開始員工旅遊、鐵人賽（&lt;a href="https://ithelp.ithome.com.tw/users/20065771/ironman/2734">從讀遊戲原始碼學做連線遊戲&lt;/a>）反而一直都沒有時間把下篇寫完，離 COSCUP 都已經過了一個多月自己都忘記還剩什麼沒有寫在文章裡面。&lt;/p>
&lt;p>中間在鐵人賽的部分花了一些時間把目前理解到關於 Unlight 的一些基本設計整理出來，後面則是實作。至於近期也已經開始在搭建 HTML5 版本的底層設計，還有 mruby 的&lt;a href="https://github.com/elct9620/mruby.wasm">整合&lt;/a>（因為想提供 Mod 功能到遊戲中）等等東西都在進行中，十一月還要飛日本一趟參加 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a>，可以說是完全都閒不下來。&lt;/p>
&lt;p>總之，讓我們在來看看 COSCUP 這場演講的後續吧 XD&lt;/p></description><content:encoded>&lt;p>寫完&lt;a href="https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/">上篇&lt;/a>後就開始員工旅遊、鐵人賽（&lt;a href="https://ithelp.ithome.com.tw/users/20065771/ironman/2734">從讀遊戲原始碼學做連線遊戲&lt;/a>）反而一直都沒有時間把下篇寫完，離 COSCUP 都已經過了一個多月自己都忘記還剩什麼沒有寫在文章裡面。&lt;/p>
&lt;p>中間在鐵人賽的部分花了一些時間把目前理解到關於 Unlight 的一些基本設計整理出來，後面則是實作。至於近期也已經開始在搭建 HTML5 版本的底層設計，還有 mruby 的&lt;a href="https://github.com/elct9620/mruby.wasm">整合&lt;/a>（因為想提供 Mod 功能到遊戲中）等等東西都在進行中，十一月還要飛日本一趟參加 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a>，可以說是完全都閒不下來。&lt;/p>
&lt;p>總之，讓我們在來看看 COSCUP 這場演講的後續吧 XD&lt;/p>
&lt;h2 id="營運">營運&lt;/h2>
&lt;p>前面基本上已經把整個遊戲能緊急處理的都做過一遍了，因此後需要繼續的明顯就是要怎麼讓遊戲可以持續的運作。最初基本上都是用看 Log 的方式在觀察玩家，連上線人數都要開一個 SSH 連線到伺服器刷 Log 來看，很明顯是不太 OK 的做法。&lt;/p>
&lt;p>因此就開始評估有什麼解法比較適合，因為大量的改動不熟悉的程式碼（遊戲量很大）是一件危險很高的事情，尤其是雖然專案看起來有測試但是卻完全找不到。&lt;/p>
&lt;p>所以最後決定的做法就是在某些特定檔案做小規模的修改，先以「增加監控」能力為主，因此我們先做的就是讓上線人數可以到 CloudWatch 上面被看到，至少能統計 DAU (Daily Active User) 來評估遊戲是否該做調整之類的。&lt;/p>
&lt;p>解決方案也是簡單粗暴，因為只有 Auth Server 在連上的狀態遊戲才能正常遊玩，因此直接對 Auth Server 吐線上玩家統計 Log 的地方用同樣的方式 Hack 出一個定時把資料吐回 CloudWatch 的功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby"> &lt;span class="no">EM&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">PeriodicTimer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">proc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">begin&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;AuthServer: [cloud_watch:] updated online number&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="no">CLOUD_WATCH&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put_metric_data&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ss">namespace&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Unlight&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">metric_data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ss">metric_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;OnlineNumber&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">dimensions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nb">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Hostname&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">ENV&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s1">&amp;#39;unlight.app&amp;#39;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">timestamp&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">AuthServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">class_variable_get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:@@online_list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">unit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Count&amp;#39;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">rescue&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="n">e&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;AuthServer: [cloud_watch:] fatal error &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">backtrace&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除此之外我們也盡量使用像是 Google Analytics 等工具追蹤一些我們額外掛上去的功能，不過受限於 Flash 很多東西還是追不到的狀態。&lt;/p>
&lt;h2 id="客製化">客製化&lt;/h2>
&lt;p>不過想要加額外的東西是會影響到我們目前在 &lt;a href="https://github.com/open-unlight/legacy-unlight-docker">GitHub&lt;/a> 公開的版本，這個版本是基於 CPA 釋出的原始碼建構並且修正一些有問題的小地方。如果去調整的話會造成所有人都需要跟我們使用一樣的架構。&lt;/p>
&lt;p>但是這很明顯不應該出現在一個 Open Source 專案上，從設計的角度看也應該提供選擇才對，所以最後的作法就是增加一個 &lt;code>customize&lt;/code> 目錄來放這些客製化的東西。&lt;/p>
&lt;p>在 Docker 的建置過程中，我們可以使用多次 &lt;code>ADD&lt;/code> 來加入檔案，如果是重複的檔案就會被覆蓋掉，利用這樣的特性就可以做到類似這樣的客製化調整。&lt;/p>
&lt;pre>&lt;code>原始 Gemfile -&amp;gt; 自訂 Gemfile -&amp;gt; 原始檔案 -&amp;gt; 自訂檔案
&lt;/code>&lt;/pre>&lt;p>如此一來最後整合出來的專案就會是被客製化修改過的，利用這樣的特性我們就把 CloudWatch 的線上玩家監控，還有遊戲中透過 API 方式開放的課金道具商店給實作出來。&lt;/p>
&lt;h2 id="rack">Rack&lt;/h2>
&lt;p>不過在 Unlight 這樣的 TCP 專案上要怎麼擴充出 API 呢？因為本質上他還是一個 Ruby 專案，因此我們只需要時做一個符合 Rack 介面的標準就可以任意讓 Web Server 啟動他跑起來。實際上在這方面 Unlight 做得還算不錯，整體專案上分為幾個大區塊&lt;/p>
&lt;ul>
&lt;li>&lt;code>model/&lt;/code> - 資料相關，通常會連接資料庫&lt;/li>
&lt;li>&lt;code>controller/&lt;/code> 邏輯相關，遊戲的運作本體&lt;/li>
&lt;li>其他大多是輔助的工具，還有比較特殊的是遊戲規則定義（Rule 目錄）&lt;/li>
&lt;/ul>
&lt;p>因為操作的部分已經被封裝到 Model 裡面，像是「發放給玩家一個道具」這樣的動作是封裝好的，因此我們可以在 API 透過這樣的方式直接發放道具給玩家。&lt;/p>
&lt;blockquote>
&lt;p>在 Controller 裡面會是「檢查玩家是否符合條件，然後發放道具」的組合動作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="客服">客服&lt;/h2>
&lt;p>這段基本上很難做，我們後來的作法就是搭配各種工具。像是 &lt;a href="https://help.unlight.com.tw/hc/zh-tw">Zendesk&lt;/a> 這類工具來提供玩家回報問題的地方，網頁右下角直接會有能回報錯誤的按鈕可以查詢 FAQ 或者回報問題。&lt;/p>
&lt;p>內部的話則是用 Discord 和 Asana 等工具溝通跟討論下一階段更新要做什麼、有什麼事情要優先處理等等。&lt;/p>
&lt;blockquote>
&lt;p>幫助按鈕後來改左邊，因為我們加上了 Discord Widget 讓玩家可以透過 Chatbot 在我們的玩家群組裡面發言而不需要登入或者註冊。&lt;/p>
&lt;/blockquote>
&lt;h2 id="html5">HTML5&lt;/h2>
&lt;p>最後是 HTML5 改版，考慮到只有 WebSocket 可以使用的情況下勢必要去改伺服器來實現 WebSocket 不然就無法使用。不過運氣不錯的是這件事情剛好因為 Unlight 是使用 EventMachine 來處理 TCP 連線的，因此我把 WebSocket 套件加上去之後做一些簡單的修改，就勉強可以使用 WebSocket 來作為伺服器。&lt;/p>
&lt;blockquote>
&lt;p>Ruby 目前的 WebSocket Gem 是基於 EventMachine 開發的，因此在連線處理上幾乎沒有太大的變化。&lt;/p>
&lt;/blockquote>
&lt;p>不過還是缺失了不少功能，演講當時基本上就簡單分享了一下 WebSocket 的機制跟目前的進度。寫這篇文章的時候已經透過 Electron.js 製作桌機版讓 Flash 續命時間增加了一定程度，又發現能夠直接透過 Node.js 做 TCP 連線，因此目前的主力已經先轉移到將 HTML5 Client 開發出來後先直接使用原有伺服器來運行，等到 Client 穩定後再去修改伺服器的作法。&lt;/p>
&lt;p>在這之前，因為 Unlight 的指令是很用 Byte 去組合而成的結構在 JavaScript 上也很難處理。因此又開了一個 &lt;a href="https://github.com/open-unlight/go-ul">Go UL&lt;/a> 的專案想利用 Golang 來解析，在轉換成 WebAssembly 整合到 JavaScript 上面來改善這方面的處理問題（SPR 的密碼加密計算用 Golang 也會比 JavaScript 容易處理，畢竟 BigInt 在 JavaScript 上也需要額外的支援）&lt;/p>
&lt;h2 id="後記">後記&lt;/h2>
&lt;p>這場演講基本上算是一個過程上的紀錄，在短短一到兩週內的時間怎麼去讓一款遊戲可以運行、營運，以及我們是怎樣慢慢的改造跟重構一個古老的遊戲專案讓他變得容易維護。&lt;/p>
&lt;p>不過實際上當時評估如果要繼續做下去的話，絕對是花上一兩年都跑不到的大工程，雖然不知道能堅持到什麼時候但至少每一個階段都能發現有趣的東西，應該是還可以繼續在努力很久。反而是關於 IP 上的問題，也就是遊戲的內容本身因為並沒有實際的完全開放，反而讓未來改版完畢後遊戲想要進入新的階段變得非常受限⋯⋯&lt;/p>
&lt;p>不過也因為這款遊戲，讓我自己在遊戲開發上有很多不確定的東西有了一個大概知道能怎麼做的方案，以及很多新的想法可以嘗試。&lt;/p>
&lt;p>那麼，就請大家期待在不久的未來我們重新開發過的 Unlight 會是怎樣的面貌了 XD&lt;/p></content:encoded></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （一）</title><link>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</link><category>COSCUP</category><category>Game</category><category>Ruby</category><category>Golang</category><category>HTML5</category><category>JavaScript</category><category>DevOps</category><category>Docker</category><category>Unlight</category><pubDate>Tue, 03 Sep 2019 19:44:11 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</guid><description>&lt;p>在 &lt;a href="https://coscup.org/2019/">COSCUP&lt;/a> 分享了這兩週左右（8/3 ~ 8/17）把一款決定開放原始碼的網頁遊戲，從無法啟動到恢復伺服器開始運作的一些經驗跟大家分享。
不過看起來還是有很多人沒有機會來聽，雖然之後因為會把一部分重心放在這款遊戲上，所以應該還是有不少機會，但還是簡單的來彙整一下今天講的東西。&lt;/p>
&lt;p>上一篇&lt;a href="https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/">快速閱讀 Unlight 原始碼&lt;/a>大致上有提到了我在當時看到原始碼的看法跟概觀。有興趣的話可以搭配&lt;a href="https://speakerdeck.com/elct9620/2019-coscup-fu-huo-ge-browser-game-unlight-kai-yuan-shi-jian">演講簡報&lt;/a>一起讀這篇文章。&lt;/p>
&lt;p>另外，這次整個遊戲運作起來除了我自己本身對 Ruby / ActionScript 有一定的了解外，也要感謝一下我們這個團隊（&lt;a href="https://unlight.app">Open Unlight&lt;/a>）的初期成員 Poka 和舞鶴，給我硬體上的支援跟對其他玩家的客服支援，不然有時候真的很難同時處理這些事情。&lt;/p></description><content:encoded>&lt;p>在 &lt;a href="https://coscup.org/2019/">COSCUP&lt;/a> 分享了這兩週左右（8/3 ~ 8/17）把一款決定開放原始碼的網頁遊戲，從無法啟動到恢復伺服器開始運作的一些經驗跟大家分享。
不過看起來還是有很多人沒有機會來聽，雖然之後因為會把一部分重心放在這款遊戲上，所以應該還是有不少機會，但還是簡單的來彙整一下今天講的東西。&lt;/p>
&lt;p>上一篇&lt;a href="https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/">快速閱讀 Unlight 原始碼&lt;/a>大致上有提到了我在當時看到原始碼的看法跟概觀。有興趣的話可以搭配&lt;a href="https://speakerdeck.com/elct9620/2019-coscup-fu-huo-ge-browser-game-unlight-kai-yuan-shi-jian">演講簡報&lt;/a>一起讀這篇文章。&lt;/p>
&lt;p>另外，這次整個遊戲運作起來除了我自己本身對 Ruby / ActionScript 有一定的了解外，也要感謝一下我們這個團隊（&lt;a href="https://unlight.app">Open Unlight&lt;/a>）的初期成員 Poka 和舞鶴，給我硬體上的支援跟對其他玩家的客服支援，不然有時候真的很難同時處理這些事情。&lt;/p>
&lt;h2 id="動機">動機&lt;/h2>
&lt;p>最開始只是我想自己研究，主要是這幾點原因在。&lt;/p>
&lt;p>第一點是日本的遊戲公司很少會放出原始碼，至少以現在很熱門的手遊大家幾乎是沒機會看到開放原始碼的專案，不過即使是歐美也是，所以變得很難有機會學習怎麼做。
第二點則是因為他用了 Ruby 和 ActionScript 這兩個語言，前者是我工作用的語言也是我個人很喜歡的語言，後者是我大學寫過一陣子的語言，兩個我都蠻熟悉的。&lt;/p>
&lt;p>後來發現伺服器用 DigitalOcean
沒辦法支撐後，朋友 Poka 就把家裡閒置的機器拉出來提供給我使用，所以又再加上把一些工作上很少有機會用到的理論套上去，因為玩家數夠多了！&lt;/p>
&lt;blockquote>
&lt;p>注意：不是每個朋友家裡都剛好會有空的機櫃、伺服器跟有冷氣的機房！&lt;/p>
&lt;/blockquote>
&lt;h2 id="復原">復原&lt;/h2>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-09-03-coscup-2019-talk-about-the-browser-game-unlight-which-i-revived-it/screenshot.png" alt="遊戲畫面">&lt;/p>
&lt;p>其實伺服器部分本身沒有什麼大問題，基本上就是缺幾個檔案。不過這些檔案只是被改成 &lt;code>_orig&lt;/code> 的形式，把檔名改回去後就好了，基本上是一些設定檔像是伺服器的 IP 位置、資料庫設定等等。&lt;/p>
&lt;p>至於 Flash 客戶端的部分，因為想說是 Flash 所以就跑去想把 Flash IDE 裝回來，畢竟一般來說都是靠 IDE 來處理的。不過因為看起來像是用 Flex 就選擇安裝 Flash Builder 來跑，結果就直接噴出 &lt;code>Failed to create Java Virtual Machine&lt;/code> 的錯誤，這是因為新版的 macOS 用的 Java 已經新太多。&lt;/p>
&lt;p>而且 Adobe 還把這些 IDE 都下架，所以光是想要取得就有不少困難在。&lt;/p>
&lt;p>不過因為是用 Flex 所以還有 Flex SDK 可以替代，至少能用 Command Line 的方式去編譯，結果當時（週五晚上）由 CPA 釋出的原始碼裡面缺少了最重要的 &lt;code>src/&lt;/code> 目錄，也就是客戶端本體的實作部分。
大概過了兩天，到週一的時候才發現少上傳補上到 GitHub 上面，此時就能透過 &lt;code>mxmlc&lt;/code> 這個指令去編譯。&lt;/p>
&lt;blockquote>
&lt;p>回頭來看，我們會認為 Flash 就是用 IDE 用 GUI 去寫這個專案，但其實 Unlight 幾乎是直接用 ActionScript 寫的，除了美術的部分合理推測會使用 Flash 的 IDE 之外，其實遊戲本身大概是沒有使用的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="缺少的-as-檔案">缺少的 as 檔案&lt;/h3>
&lt;p>不過即使取得了完整原始碼，還是發現這樣子還是有缺檔案的樣子。經過追查之後，發現缺少的 &lt;code>FontLoader.as&lt;/code> 和 &lt;code>Constants.as&lt;/code> 應該都是由 Ruby 的腳本生成。&lt;/p>
&lt;p>所以找了一下，發現在伺服器端確實有腳本需要執行過才能正常生成客戶端。&lt;/p>
&lt;p>&lt;code>Constants.as&lt;/code> - 一些文本資料或不影響平衡的都可以塞到客戶端，這個檔案基本上應該就是將 DB 的資料直接整到客戶端的主要方式。
&lt;code>FontLoader.as&lt;/code> - Unlight 當時算是非常熱門的遊戲，所以至少有五到六種語言的翻譯，為了遊戲美術表現的品質所以會把字體內嵌，因此會使用 Ruby 負責掃瞄出這個語言客戶端所需的 Unicode 來告訴 Flex Compiler 需要內嵌哪些字體檔案。&lt;/p>
&lt;blockquote>
&lt;p>基本上是蠻合理的設計，不過因為我們大部分都是做 Web 習慣的，可能會不太理解吧 XD&lt;/p>
&lt;/blockquote>
&lt;h3 id="語言切換">語言切換&lt;/h3>
&lt;p>令一方面因為多國語言，所以其實有很多 &lt;code>.swf&lt;/code> 檔案都會用像是 &lt;code>_tc.swf&lt;/code> &lt;code>_ja.swf&lt;/code> 這樣的形式命名，假設原始檔案叫做 &lt;code>tutorial.swf&lt;/code> 的話，一開始是不會有這個檔案的，因為你需要利用一個叫做 &lt;code>switch_resouce.rb&lt;/code> 的檔案，幫你從 &lt;code>tutorial_tc.swf&lt;/code> 重新命名成 &lt;code>tutorial.swf&lt;/code> 才行。&lt;/p>
&lt;p>但是因為他是用 Git 的方式讓大家下載的，所以最後就會讓整個 Repo 裡面充滿各種沒有被追蹤的檔案，也會非常混亂。&lt;/p>
&lt;blockquote>
&lt;p>除此之外部署的時候如果沒有切換的話，在遊戲過程中還會因為抓不到對應的 swf 造成許多地方無法正常運作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="docker-化">Docker 化&lt;/h2>
&lt;p>基於前面這些編譯客戶端的問題，最簡單的方法就是用 Docker 來處理。另一方面就是要部署起來其實需要不少額外的補丁，而這些處理目前是否能 PR 回官方的版本，或者直接修改維護都還是問題。雖然 Docker 不是一個萬用的解決方案，但是在想要有一個乾淨的編譯環境來說，反而是一個相對適合的做法。&lt;/p>
&lt;p>在編譯客戶端的時候，只需要將圖檔這些東西都複製進去 Docker 裡面，然後將前面設定 Java 環境（Flex 是基於 Java）、Flex SDK 設定以及各種補丁和我自己修改過的檔案，全部加入到容器裡面，再用做一次性的編譯環境就可以很方便的產生客戶端。&lt;/p>
&lt;blockquote>
&lt;p>某方面來說可以用時間換來一定程度相對乾淨的專案環境&lt;/p>
&lt;/blockquote>
&lt;p>令一方面因為 Unlight 的設計很適合讓思考 SOA / Microservice 之類的架構設計思考方式，因為它將登入伺服器、任務伺服器等等都切割開來，所以要部署伺服器起來其實也要做不少動作，但假設我們使用 Docker Compose 的話，就可以透過設定檔去解決這些問題。&lt;/p>
&lt;h2 id="登入失敗">登入失敗&lt;/h2>
&lt;p>經過幾天的努力總算是有能執行的客戶端以及可以運行的伺服器，不過在修復客戶端時使用了網路上下載的 &lt;code>as3crypto.swc&lt;/code> 這個套件，結果卻一直無法登入。&lt;/p>
&lt;blockquote>
&lt;p>理論上加密演算法不應該不一樣，但是因為各種理由使用 CPA 後來（一週後）提供的檔案，就能正成使用。&lt;/p>
&lt;/blockquote>
&lt;p>Unlight 使用了一個叫做 &lt;strong>Secure Remote Passwor&lt;/strong> 的機制，在做簡報的時候發現他的實作裡面有一個叫做 OpenSSL 所以還蠻好懂的，我們在開發網站很熟悉的 SSL 憑證基本上也基於這個 &lt;a href="http://srp.stanford.edu/design.html">Stanford 的論文&lt;/a>來實現的，不過中間遭遇了很多問題。&lt;/p>
&lt;p>因為遊戲使用的是「論文版本」也就是完全參照論文去實現，但是網路上像是 1Password 的 Golang 版本或者 Mozilla 的 Node.js 版本，都是基於 RFC5054 的版本差異上來說就是 Salt 在客戶端的先後順序。&lt;/p>
&lt;p>論文版本是由客戶端先發送 Public Key 到伺服器換取 Salt 跟伺服器的 Public Key 在繼續後面的運算，但是 RFC 版本使用的則是客戶端先發送請求初始化連線，再從伺服器拿到 Public Key 和 Salt 這些資訊，最後再生成 Public Key 發給伺服器後做後續的運算。&lt;/p>
&lt;p>兩個版本順序剛好是相反的，也讓我很難用其他語言實作來驗證看看。&lt;/p>
&lt;blockquote>
&lt;p>其實 RFC 還有其他版本，不過目前主流的應該是 RFC5054 的這個版本。另外還有一個好處是當伺服器更改了計算的基準（N, g）的時候，因為伺服器發回來的也包含這兩個數值，所以就不需要修改客戶端，至少在安全性跟方便性都有所提高。&lt;/p>
&lt;/blockquote>
&lt;h2 id="效能調校">效能調校&lt;/h2>
&lt;p>因為 Poka 支援了伺服器，所以我們實際上是有 24 Core &amp;amp; 24G RAM 的伺服器，連硬碟都是用有著 98K IOPS 的 SSD 理論上是不應該卡頓的⋯⋯&lt;/p>
&lt;p>不過根據我前兩天在 Digital Ocean 用 $5 和 $15 的機器測試的狀況，大概是 60 人跟 300 人會明顯卡頓，但是換到了 Poka 的機器上硬體至少提升了有十幾倍，卻還是卡在 500 多人就很不合理。&lt;/p>
&lt;p>中間我們做了很多嘗試，像是利用 Docker 可以限制使用的 CPU 核心之類的設定將 DB 集中在某個 CPU 上之類，還有調整記憶體限制等等，最後才發現了一筆異常的數值。&lt;/p>
&lt;p>因為 SSD 的關係遊戲每個 SQL 操作大概是在 0.0001s 左右，但是有一個很頻繁的 SQL 操作大概花上 0.2s 左右經過補上 Index 的處理後，遊戲直接達到 1000 人左右都不卡頓的狀況。&lt;/p>
&lt;blockquote>
&lt;p>當時有玩家還在猜該不會當初遊戲公司死掉也跟這個少掉的 Index 有關吧？不過理論上以當時的玩家數量，不太可能少處理這點。&lt;/p>
&lt;/blockquote>
&lt;p>就我跟 Poka 的評估，目前使用的伺服器即使到了 3000 多人也應該能支撐住才對。不過到了最近玩家人數開始穩定的減少，推測差不多應該會停在一個負擔不太大的數值上吧 XD&lt;/p>
&lt;blockquote>
&lt;p>畢竟很多玩家都是來懷舊的⋯⋯&lt;/p>
&lt;/blockquote>
&lt;h2 id="小結">小結&lt;/h2>
&lt;p>雖然已經盡量寫的簡單，但是似乎文章還是有點太長 XD&lt;/p>
&lt;p>下一篇會再聊一下後續的處理，也就是經過我修改過的 Docker 版本提供了選擇性客製化的功能以及我們怎麼在經營遊戲上處理盡量讓玩家有一個相對好的體驗、以及對 HTML5 化的規劃跟實驗。&lt;/p></content:encoded></item></channel></rss>