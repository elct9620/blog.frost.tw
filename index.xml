<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>弦而時習之</title><link>https://blog.frost.tw/</link><description>Recent content on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 23 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/index.xml" rel="self" type="application/rss+xml"/><item><title>TGONext: 規劃高併發服務</title><link>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</link><category>
心得,TGONext,架構</category><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</guid><description>&lt;p>昨天是 &lt;a href="https://next.tgonetworks.org/">TGONext&lt;/a> 的第一次聚會，在這個活動中我們會向台灣的一些高階主管學習。在開場結束後我們的導師 &lt;a href="https://blog.gcos.me/">Ant&lt;/a> 讓我們投票選出幾個想在這半年的時間內討論的題目。基本上我們預定討論四個主題，而「高併發」是我們的第一個主題。&lt;/p></description><content>&lt;p>昨天是 &lt;a href="https://next.tgonetworks.org/">TGONext&lt;/a> 的第一次聚會，在這個活動中我們會向台灣的一些高階主管學習。在開場結束後我們的導師 &lt;a href="https://blog.gcos.me/">Ant&lt;/a> 讓我們投票選出幾個想在這半年的時間內討論的題目。基本上我們預定討論四個主題，而「高併發」是我們的第一個主題。&lt;/p>
&lt;h2 id="what-is-high-concurrency">什麼是高併發&lt;/h2>
&lt;p>再開始的時候，我們的導師問了我們這個問題。&lt;/p>
&lt;blockquote>
&lt;p>要怎麼定義高併發？&lt;/p>
&lt;/blockquote>
&lt;p>基本上大家都是知道高併發簡單來說就是有大量使用者在使用我們服務的情況，不過要怎麼明確定義反而是從沒有仔細思考過的。&lt;/p>
&lt;p>不過定義上其實相對的單純，但是透過導師的引導我們開始思考更多東西。&lt;/p>
&lt;blockquote>
&lt;p>在短時間內能處理的請求就是併發，而這個短時間通常是以秒為單位。&lt;/p>
&lt;/blockquote>
&lt;p>基於這樣的定義，實際上最重要的事情就是&lt;/p>
&lt;blockquote>
&lt;p>我們需要確保我們的服務可以處理足夠的請求數否則就就沒有意義&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-to-measure-the-concurrency">如何評估併發數&lt;/h2>
&lt;p>為了確保能處理大兩請求或者配合行銷團隊給我們的目標，我們需要正確的去測量我們的系統所能承受的併發數量，因此我們的導師請我們列出一些曾經用過或者聽過的工具。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ab&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wg/wrk">wrk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/giltene/wrk2">wrk2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jmeter.apache.org/">JMeter&lt;/a>&lt;/li>
&lt;li>SaaS (提供類似功能的雲端服務)&lt;/li>
&lt;/ul>
&lt;p>因為這些工具其實還蠻常見的，我自己反而沒有在第一時間把他跟測量工具聯想起來。&lt;/p>
&lt;p>然後導師馬上問我們一個問題：「這些工具的結果是否會有差異？」&lt;/p>
&lt;p>我們基本上都沒有考慮過這個小細節，但是這卻對我們最後測量出來的結果很重要。&lt;/p>
&lt;p>舉例來說，像是 &lt;code>ab&lt;/code> 會在發出請求之前把所有的 Thread 產生好，再一次性的發送出去。這很容易造成我們取得比較差的成績，而且很可能不符合真實的使用情況。&lt;/p>
&lt;blockquote>
&lt;p>在測量併發能力的時候，我們需要注意是否符合真實世界的使用情況。&lt;/p>
&lt;/blockquote>
&lt;p>除此之外，還有一些東西需要在測試的時候小心處理。&lt;/p>
&lt;h3 id="the-test-machines-limit">硬體上的限制&lt;/h3>
&lt;p>假設我們想要模擬高併發請求在某一台機器上，但實際上為了達到這個併發量要產生的 Thread 數量已經超過機器的上限。那麼我們只會得到錯誤的結果，這時候我們可能就需要使用支援在多台機器上運作的工具，或者製作一些能控制工具的腳本來同時觸發某個測量工具在多台機器上面執行。&lt;/p>
&lt;h3 id="the-network-environment">網路環境&lt;/h3>
&lt;p>如果我們在 LAN 發出請求去測試，實際上發出去的請求跟壓力都會遠大於實際的情況。因此我們至少要將測試的機器部署在其他區域（Zone）並且考慮實際使用者所在的位置。&lt;/p>
&lt;blockquote>
&lt;p>另外一個被提到的地方是，我們在測試的是「能力」而不是「壓力」因此目的並不是為了要對伺服器施加壓力這兩種測試實際上是不太一樣的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="the-toolss-calculator-method">工具的計算方式&lt;/h3>
&lt;p>在前面我們其實已經大致上討論過，但是導師還是特別將 &lt;code>wrk2&lt;/code> 提出來討論。因為有些工具並不是計算從請求發起到收到回應的這個時間差，這表示有些時候並不會完全符合真實的情況。&lt;/p>
&lt;p>另外，導師告訴我們 &lt;code>wrk2&lt;/code> 使用 &lt;a href="https://medium.com/@siddontang/the-coordinated-omission-problem-in-the-benchmark-tools-5d9abef79279">Coordinated Omission&lt;/a> 這個演算法，是相對接近真實世界的計算方式。&lt;/p>
&lt;h3 id="the-perfect-result">過度美好的結果&lt;/h3>
&lt;p>假設我們得到非常漂亮的結果，我們就需要去注意測試的方法跟工具。因為這表示我們可能在一些地方是我們沒有預期到的，因而提供了不同的結果給我們。&lt;/p>
&lt;h2 id="from-mau-to-qps">從 MAU 換算成 QPS&lt;/h2>
&lt;p>在現實世界中，QPS（每秒查詢次數）通常不是由開發團隊來決定的，他大多是仰賴於行銷團隊的目標或者老闆的計畫。&lt;/p>
&lt;p>這雨表示我們通常只會得到 MAU（每月活躍用戶數）而不是一個明確的 QPS 數值。&lt;/p>
&lt;p>舉例來說，如果行銷團隊告訴我們下個月他們計畫讓每月活躍用戶成長到 100 萬人，至少要多少的 QPS 才能夠滿足行銷團隊的需求呢？&lt;/p>
&lt;p>經過短暫的討論跟推測，我們注意到了一些跟 Request 有關的線索。&lt;/p>
&lt;ul>
&lt;li>使用者並不會隨時在線上&lt;/li>
&lt;li>一個使用者的操作後面會有多個請求產生&lt;/li>
&lt;li>大部分的使用者會集中在特定的時間操作（Ex. 活動）&lt;/li>
&lt;/ul>
&lt;p>假設我們使用 80-20 法則來推斷有 80% 的使用者只會在 20% 的時間使用我們的服務。&lt;/p>
&lt;p>然後我們要定義每秒鐘使用者最大會產生的請求數，在這部分導師告訴我們從經驗上來看選擇「最常見的操作」並計算這個操作會產生的請求數會是一個比較合適的選擇。&lt;/p>
&lt;p>到此為止我們就獲得了有限的情報足以從 MAU 來計算 QPS 應有的數值。&lt;/p>
&lt;ul>
&lt;li>MAU: 100 百萬&lt;/li>
&lt;li>每秒使用者請求數: 每個動作 3 個 API Request&lt;/li>
&lt;li>活躍時間: 約集中在每天的 20% 時間內&lt;/li>
&lt;/ul>
&lt;p>所以我們就可以像這樣計算：&lt;/p>
&lt;blockquote>
&lt;p>(1 million * 3 API Request) / (30 * 0.2 * 86400) * 0.8 ~= 4.6 QPS&lt;/p>
&lt;/blockquote>
&lt;p>轉換成公式的話類似這樣：&lt;/p>
&lt;blockquote>
&lt;p>(每月活躍人數 * 請求數) / (一個月 * 20% 的時間 * 1 天 (以秒為單位)) * 80% 的使用者 ~= QPS&lt;/p>
&lt;/blockquote>
&lt;p>最後的結果遠低於我們預期的數字，但是他確實是基於數據而且有說服力的。&lt;/p>
&lt;p>因此，要達到目標我們設計的架構至少要允許每秒大於 4.6 的 QPS 才能夠滿足行銷團隊的需求。&lt;/p>
&lt;blockquote>
&lt;p>不過導師也提醒我們這個比例會因為不同情況而改變，但是我們可以透過網路上公開的報告來評估自己所在的產業或服務適合採取怎樣的比例配置。&lt;/p>
&lt;/blockquote>
&lt;h2 id="onclusion">結論&lt;/h2>
&lt;p>這是我們第一部分的討論，雖然只花了一個半小時左右但是情報量其實已經非常的多。&lt;/p>
&lt;p>後面剩下的時間我們開始討論 SLI/SLO/SLA 和可用性造成的 QPS 下降，但是因為只剩下比較短的時間所以我們應該會在線上或者下次的聚會繼續討論，基本上我也會在討論完後稍微整理記錄下來。&lt;/p>
&lt;p>在這約兩小時跟導師和其他成員的討論後，我依舊認為在 TGONext 這個活動最重要的是跟導師學習他們在面對問題時的觀點。&lt;/p>
&lt;p>在這個高併發的討論中，我們從定義「高併發」到專注在技術上的「QPS」來檢視我們需要的目標，最後再將我們的經驗連結其他部門讓合作得以達成。&lt;/p>
&lt;p>這幾年不時會有「頭銜不重要」的說法出現，不過當你跟 TGONext 裡面的這些 CTO 或者其他高階人才學習後，你會發現我們跟他們的差別在於我們常常關注在錯誤的問題上，而且並不清楚該用什麼方法正確的處理。&lt;/p>
&lt;p>也因此我是很感謝 &lt;a href="https://tgonetworks.org/">TGONextworks&lt;/a> 提供這樣的機會給我們一個類似路標一樣的方向去學習更高階的技巧，而非因為自己在公司有個不錯的頭銜而自我滿足。&lt;/p></content></item><item><title>撰寫一個合適的 RSpec 測試</title><link>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</link><category>
Ruby,RSpec,心得,BDD,TDD,Rails</category><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</guid><description>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p></description><content>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p>
&lt;p>在開始之前我們先不要管什麼 TDD 或者 BDD 之類或是你之前讀過的一些測試相關的文章，然後反思一下什麼是「測試」為什麼我們需要「測試」？&lt;/p>
&lt;p>基本上，我們會把測試放到專案裡面大多是為了要避免一些人會不小心犯的錯誤。所以透過定義一些自動化的程式，來確定我們的實作跟「規格」是相同的。&lt;/p>
&lt;p>不過，規格跟程式碼都還是由人來撰寫跟產生的，所以很明顯的如果我們使用錯誤的規格或者錯誤的程式去測試，依舊還是會得到錯的結果。&lt;/p>
&lt;p>所以盡量保持一切單純會是個不錯的做法，至少你在寫測試的時候會覺得快樂一點。&lt;/p>
&lt;h2 id="pure-ruby-example">純 Ruby 的範例&lt;/h2>
&lt;p>在我的經驗中測試其實跟你寫的程式碼是有關聯的，如果你本身寫出來的程式就很糟糕，那麼測試也會變得超級難寫。也因此不管是先寫測試還是後寫測試，最重要的事情是要想清楚你的需求還有你想要測試哪些東西。&lt;/p>
&lt;p>話不多說，我們先簡單實作一個 &lt;code>Calculator&lt;/code> 物件來測試看看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">Calculator&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>
&lt;span class="vi">@inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這是一個很簡單的 &lt;code>Calculator&lt;/code> 物件，在初始化的時候會產生一個 &lt;code>@inputs&lt;/code> 陣列。&lt;/p>
&lt;p>然後就可以先搭出一個簡單的測試檔案出來：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="no">Calculator&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:calculator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="no">Calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後我們來增加一個 &lt;code>#add&lt;/code> 方法，讓我們可以簡單的對這個物件做一些操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">Calculator&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>
&lt;span class="vi">@inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@inputs&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">perform&lt;/span>
&lt;span class="vi">@inputs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下來就是修改一下我們的測試，讓我們可以去測試這個物件提供的方法跟行為。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="no">Calculator&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:calculator&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="no">Calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s1">&amp;#39;#add&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="kp">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s1">&amp;#39;#perform&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">perform&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">before&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">calculator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在我的經驗裡面，如果是一個很不錯的測試情境應該是可以透過定義 &lt;code>subject&lt;/code> 來指定目前測試的對象，而且我們基本上可以用一行斷言來完成測試，而且大部分的時候我都會盡量讓我寫出來的東西可以像這樣被測試。&lt;/p>
&lt;blockquote>
&lt;p>不過現實情況永遠不會這麼理想，之後有機會可能會再討論看看，至少這篇文章應該不會提到這些情況。&lt;/p>
&lt;/blockquote>
&lt;h2 id="real-world-example">實際案例&lt;/h2>
&lt;p>現在我們對一個理想的測試有一些概念了，那麼我們就繼續在實際的情況中來應用看看。&lt;/p>
&lt;p>今天早上討論的是一段用來處理付款的物件，不過是好幾年前寫的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentService&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">order&lt;/span>
&lt;span class="vi">@payment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="n">setup&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">setup&lt;/span>
&lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currency&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currency&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">perform&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kp">false&lt;/span> &lt;span class="k">unless&lt;/span> &lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid?&lt;/span>
&lt;span class="no">ActiveRecord&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transaction&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>
&lt;span class="no">VendorAPI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="vi">@payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kp">private&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">amount&lt;/span>
&lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="ss">:subtotal&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當我們想測試這個物件的時候會發現很難測試，因為他把所有東西都塞到 &lt;code>@payment&lt;/code> 裡面，而且又無法在外部存取。&lt;/p>
&lt;p>一般來說我們可能會想直接地把 &lt;code>@payment&lt;/code> 曝露出去，變成像是 &lt;code>service.payment.amount&lt;/code> 這樣的形式。&lt;/p>
&lt;p>這樣我們確實可以寫出一段測試並檢查結果，不過這段測試其實有點不直覺。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我們測試的是「Service Object」本身而不是「Payment」這個封裝在裡面的 Model，根據這樣的推論，我們的測試實際上應該要像下面這樣。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">amount&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">is_expected&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>現在我們的 &lt;code>subject&lt;/code> 就確實是指我們的 Service Object 的 &lt;code>amount&lt;/code> 而非 Payment Model。&lt;/p>
&lt;p>根據我們的預期，修改後的 &lt;code>PaymentService&lt;/code> 應該會像這樣：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentService&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">order&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">amount&lt;/span>
&lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="ss">:subtotal&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">perform&lt;/span>
&lt;span class="n">payment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build_payment&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kp">false&lt;/span> &lt;span class="k">unless&lt;/span> &lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">valid?&lt;/span>
&lt;span class="no">ActiveRecord&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Base&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transaction&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>
&lt;span class="no">VendorAPI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kp">private&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">build_payment&lt;/span>
&lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payments&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ss">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">currency&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="vi">@order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">currency&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>透過這樣的重構，我們的測試就很直覺的關注在 &lt;code>PaymentService&lt;/code> 物件本身上面。&lt;/p>
&lt;p>在工作中基本上我都是用這樣的方式思考怎麼設計一個物件，算是我自己這幾年在寫程式上的經驗。&lt;/p>
&lt;h2 id="the-rails-examples">一些關於 Rails 的例子&lt;/h2>
&lt;p>不得不說 Rails 在 Ruby 工程師裡面算是很熱門的框架，我每天工作也會用到。前面提到的這些技巧在 Rails 裡面也能應用嗎？&lt;/p>
&lt;p>簡單來說，只要想辦法保持物件單純測試起來就會變得容易。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># Model&lt;/span>
&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="no">User&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">should&lt;/span> &lt;span class="n">validate_presence_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;#avatar_url&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;example@example.com&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">email&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">avatar_url&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="s2">&amp;#34;returns Gravatar URL&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">digest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">OpenSSL&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Digest&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">MD5&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hexdigest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">should&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://www.gravatar.com/avatar/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>像是在寫 Model 的時候我是會避免放太多邏輯在裡面，除非專案真的很小才會考慮直接寫在裡面。當你的專案變複雜的時候，我們常常會要做很多步驟的處理才能完成一件事情，這其實就算是一種訊號告訴我們需要把這些東西拆到一個獨立的物件上，然後我們就可以專心用測試檢查這個處理的流程（通常我們就會叫這類物件 Service Object）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># Request&lt;/span>
&lt;span class="no">RSpec&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;/api/users&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:request&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;GET /api/users&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:users&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">create_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">before&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="n">api_users_path&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">code&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">should&lt;/span> &lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">describe&lt;/span> &lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">subject&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">it&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">should_not&lt;/span> &lt;span class="n">be_empty&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在情況的允許下我都會盡量讓測試看起來是簡單的，為了要可以像這樣簡單的檢查就表示我們需要更深入思考我們設計的物件是否是清晰而且簡單使用的。&lt;/p>
&lt;p>上面這個範例其實只能涵蓋很小一部分的測試情境，不過我想這應該已經足以讓我們了解到一個恰當的測試是需要我們在寫程式上多注意才能做到的。&lt;/p>
&lt;p>當然，我有時候也會因為進度問題跳過測試，而且也還沒有好好寫測試的習慣。&lt;/p>
&lt;p>但是根據前面分享的經驗，即使你不寫測試你還是需要思考「當我測試我的程式時，這樣是容易被測試的嗎？」&lt;/p>
&lt;p>當你習慣這樣做之後，其實會發現很多網路上的「最佳實踐」如果有認真遵守的話，其實就能讓我們的程式碼便的容易測試。&lt;/p>
&lt;p>舉例來說好了，蠻多新手會定義一些回傳不同類型數值的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">def&lt;/span> &lt;span class="nf">sum&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kp">false&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">summable?&lt;/span>
&lt;span class="vi">@items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sum&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其實這就造成我們很難去預測這個方法會回傳什麼，最後還會演變成需要寫更多的測試去檢查這個方法是否正常。&lt;/p>
&lt;h2 id="conclusion">總結&lt;/h2>
&lt;p>其實這不算是很高深的技巧，不過實際上我花了好幾年才慢慢了解該怎麼寫一個恰當的測試。&lt;/p>
&lt;p>會寫這篇文章主要就是發現我在 Code Review 的時候要求同事重構一些有問題的舊程式碼，但是得到的就是一臉迷茫的表情，因為他們不知道該從哪裡開始重構起來，尤其是他們要補上測試來檢查這些舊的程式。&lt;/p>
&lt;p>不過當你也覺得疑惑的話，可以檢查看看你的程式碼：&lt;/p>
&lt;ul>
&lt;li>你的測試能不能專注冊單一物件上，而不需要依賴其他物件。&lt;/li>
&lt;li>實作的行為是不是只專注在一件事情上（像是只處理讀寫或驗證資料或者發送 API 之類的）&lt;/li>
&lt;li>回傳的數值是否是可以預期的（像是只會有數字、擁有同樣介面的物件）&lt;/li>
&lt;/ul>
&lt;p>其實這些東西如果有讀過一些像是 SOLID 這種物件導向的原則會覺得這些東西還蠻簡單的，不過實際上實作的時候還是很難拿捏要怎麼寫才不會過度設計並寫出適當的測試。&lt;/p>
&lt;p>總之，希望這篇文章能給大家在寫測試上有一些靈感。&lt;/p></content></item><item><title>淺談在 Google Cloud Platform 讓 Ruby on Rails 實現簡單的 Immutable Infrastructure 部署</title><link>https://blog.frost.tw/posts/2020/01/07/An-overview-of-deploy-Ruby-on-Rails-to-Google-Cloud-Platform-uses-simple-immutable-infrastructure/</link><category>
Ruby,Ruby on Rails,GCP,DevOps,Ansible,Packer</category><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/01/07/An-overview-of-deploy-Ruby-on-Rails-to-Google-Cloud-Platform-uses-simple-immutable-infrastructure/</guid><description>&lt;p>去年雙十一活動的時候有一個算是比較急的專案是要做活動網站，當時評估了一下之後決定來嘗試透過 CI 自動生成 GCE 的自訂映像檔然後搭配 Auto Scale 來做部署。&lt;/p>
&lt;p>會選擇這樣的方式主要是因為 Rails 或者大多數開發框架的部署工具預設大多是不適合 Auto Scale 的，像是 Capistrano 大多數是手動填入伺服器位置（之前也有實作過透過 GCP API 自動填入）比較適合雲端服務的作法其實就是是製作成一個映像檔來處理，也因此像是 Docker Image 這類型容器化技術在這方面是相對容易做的。&lt;/p>
&lt;p>不過考量到容器化本身也還有一些調整問題才適合使用，再加上雲端服務的選擇是使用 GCP 來提供服務，並不像 AWS ECS 有專門針對容器的服務（可能是我不知道）而是提供 K8S 的方案，對一個短期活動來說在整個專案成員都沒有經驗的前提下學習成本還是偏高的。&lt;/p>
&lt;p>因此相對適合的做法是用之前我準備好的 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 腳本，搭配 &lt;a href="https://www.packer.io/">Packer&lt;/a> 這套工具直接在 GCP 上面生成一個自訂的映像檔然後直接更新 Instance Group 的設定讓他以新版本 Scale 起來，就能做到基本上網站不斷掉的更新（Health Check 和 Scale 規則需要調整好）&lt;/p>
&lt;p>我們大概花了約一天多的時間快速搭起來，這次的開發時間約兩週中間是透過放額外的人力去支援搭建這個部署流程。&lt;/p></description><content>&lt;p>去年雙十一活動的時候有一個算是比較急的專案是要做活動網站，當時評估了一下之後決定來嘗試透過 CI 自動生成 GCE 的自訂映像檔然後搭配 Auto Scale 來做部署。&lt;/p>
&lt;p>會選擇這樣的方式主要是因為 Rails 或者大多數開發框架的部署工具預設大多是不適合 Auto Scale 的，像是 Capistrano 大多數是手動填入伺服器位置（之前也有實作過透過 GCP API 自動填入）比較適合雲端服務的作法其實就是是製作成一個映像檔來處理，也因此像是 Docker Image 這類型容器化技術在這方面是相對容易做的。&lt;/p>
&lt;p>不過考量到容器化本身也還有一些調整問題才適合使用，再加上雲端服務的選擇是使用 GCP 來提供服務，並不像 AWS ECS 有專門針對容器的服務（可能是我不知道）而是提供 K8S 的方案，對一個短期活動來說在整個專案成員都沒有經驗的前提下學習成本還是偏高的。&lt;/p>
&lt;p>因此相對適合的做法是用之前我準備好的 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 腳本，搭配 &lt;a href="https://www.packer.io/">Packer&lt;/a> 這套工具直接在 GCP 上面生成一個自訂的映像檔然後直接更新 Instance Group 的設定讓他以新版本 Scale 起來，就能做到基本上網站不斷掉的更新（Health Check 和 Scale 規則需要調整好）&lt;/p>
&lt;p>我們大概花了約一天多的時間快速搭起來，這次的開發時間約兩週中間是透過放額外的人力去支援搭建這個部署流程。&lt;/p>
&lt;h2 id="準備工作">準備工作&lt;/h2>
&lt;p>目前在&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>使用的 Ansible 腳本還沒有公開的版本，不過因為還在內部優化跟改善因此這邊就簡單介紹一下目前我們使用的方式。&lt;/p>
&lt;blockquote>
&lt;p>後來有使用過 Ansible AWX (&lt;a href="https://www.ansible.com/products/tower">Tower&lt;/a>) 來嘗試部署，其實現階段的設計是不太好的。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">├── &lt;span class="o">[&lt;/span>1.0K&lt;span class="o">]&lt;/span> README.md
├── &lt;span class="o">[&lt;/span>1.6K&lt;span class="o">]&lt;/span> deploy
├── &lt;span class="o">[&lt;/span> 420&lt;span class="o">]&lt;/span> deploy.pub
├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> group_vars
│   └── &lt;span class="o">[&lt;/span>1.2K&lt;span class="o">]&lt;/span> all.yml
├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> inventories
│   └── &lt;span class="o">[&lt;/span> 309&lt;span class="o">]&lt;/span> &lt;span class="nb">local&lt;/span>
├── &lt;span class="o">[&lt;/span> 480&lt;span class="o">]&lt;/span> roles
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> 5xruby_user
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> application
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> compile_env
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> deploy_user
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> init
│   ├── &lt;span class="o">[&lt;/span> 128&lt;span class="o">]&lt;/span> logrotate
│   ├── &lt;span class="o">[&lt;/span> 160&lt;span class="o">]&lt;/span> nginx_with_passenger
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> node
│   ├── &lt;span class="o">[&lt;/span> 160&lt;span class="o">]&lt;/span> postgresql_server
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> ruby
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> ssh
│   ├── &lt;span class="o">[&lt;/span> 96&lt;span class="o">]&lt;/span> sudo
│   └── &lt;span class="o">[&lt;/span> 128&lt;span class="o">]&lt;/span> yum_install_commons
└── &lt;span class="o">[&lt;/span> 467&lt;span class="o">]&lt;/span> setup.yml
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面是我設計的公版架構，如果是採用 Ansible 部署的專案會 Fork 這份出去近一步修改為適合專案需求的設定。&lt;/p>
&lt;blockquote>
&lt;p>實際上應該設計成類似 Ansible Galaxy 上面以 Role 為單位的腳本，不同專案是以組合 Role 配套出所需的功能來設計是比較恰當的。&lt;/p>
&lt;/blockquote>
&lt;p>以這次的專案來說 GCP 上面已經有提供 CloudSQL 服務，因此我們會將 PostgreSQL Server 替換為 CloudSQL Agent 來提供整個專案的需求。&lt;/p>
&lt;p>剩下的部分大多數是調整 &lt;code>group_vars/&lt;/code> 目錄下的設定來對應不同專案的需要。&lt;/p>
&lt;h2 id="rails-的調整">Rails 的調整&lt;/h2>
&lt;p>因為是 Immutable（不可變）的部署設計，所以會遇到一個問題就是靜態檔案需要做 Assets Precompile 處理。這一直都是在 Rails 上面部署的一個坑，因為我們大多數還是使用 Capistrano 幫客戶部署所以其實不太會踩到坑，另外就是如果是採用 CDN 的方式也會因為透過本機預先處理也不會遇到問題。&lt;/p>
&lt;p>但是在我們的方案中，建置映像檔的過程中是不需要連上資料庫就能處理。不過事實上 Ruby on Rails 在做 Assets Precompile 是會要連上資料庫的（同時 &lt;code>config/initializers&lt;/code> 的設定也會被吃進去）也就表示如果我們在設計 Ruby on Rails 專案的時候沒有仔細考慮像是 Redis 或者其他第三方服務的連接處理，就會讓 CI 甚至現在要處理的 CD 遇到很大的瓶頸。&lt;/p>
&lt;p>因為時間有限，所以跟同事討論後我們決定用一個稍微偷吃步的做法，利用 &lt;a href="https://github.com/nulldb/nulldb">nulldb&lt;/a> 這個套件製作出一個假的資料庫讓 Rails 以為有連上。&lt;/p>
&lt;h2 id="packer-的設定">Packer 的設定&lt;/h2>
&lt;p>前面我們在 Ansible 的腳本中其實會事先處理好幾件事情：&lt;/p>
&lt;ol>
&lt;li>安裝五倍的 Deploy Key&lt;/li>
&lt;li>安裝五倍的 SSH CA（透過 &lt;a href="https://www.vaultproject.io/">Vault&lt;/a> 這套服務）&lt;/li>
&lt;li>所有 Ruby on Rails 所需的環境&lt;/li>
&lt;li>額外的 Assets Precompile 處理&lt;/li>
&lt;li>所有正式環境需要的變數（大多會透過 Ansible 的 Vault 功能加密）&lt;/li>
&lt;/ol>
&lt;p>而 Packer 則可以幫助我們在遠端（Ex. GCP / AWS）上面執行我們的 Ansible 腳本，然後將安裝完的環境製作成自訂的映像檔，然後就能夠被 Instance Group 之類的使用作為開啟新機器的基礎。&lt;/p>
&lt;blockquote>
&lt;p>Packer 是一套自動化建置映像檔的工具，功能大致上就是可以在不同的 Provider 上面執行我們所設定的 Provision 腳本，然後再透過 Provider 提供的 API 來產生映像檔。最早的時候我是拿來產生 Vargant 的映像檔，在 DevOps 方面 HashiCrop 旗下的工具可以說是相當完整又搭配的不錯。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>{
&amp;quot;variables&amp;quot;: {
&amp;quot;deploy_key_path&amp;quot;: &amp;quot;{{pwd}}/keys/deploy&amp;quot;,
&amp;quot;master_key_path&amp;quot;: &amp;quot;{{pwd}}/master.key&amp;quot;,
&amp;quot;revision&amp;quot;: &amp;quot;UNKNOWN&amp;quot;
},
&amp;quot;builders&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;googlecompute&amp;quot;,
&amp;quot;project_id&amp;quot;: &amp;quot;EVENT-5X-CUSTOMER&amp;quot;,
&amp;quot;source_image_family&amp;quot;: &amp;quot;EVENT-IMAGE&amp;quot;,
&amp;quot;ssh_username&amp;quot;: &amp;quot;packer&amp;quot;,
&amp;quot;zone&amp;quot;: &amp;quot;asia-east1-b&amp;quot;,
&amp;quot;image_name&amp;quot;: &amp;quot;EVENT-{{timestamp}}&amp;quot;,
&amp;quot;image_family&amp;quot;: &amp;quot;EVENT-IMAGE&amp;quot;,
&amp;quot;image_description&amp;quot;: &amp;quot;Build with commit #{{user `revision`}}&amp;quot;,
&amp;quot;account_file&amp;quot;: &amp;quot;credentials.json&amp;quot;,
&amp;quot;tags&amp;quot;: [&amp;quot;http-server&amp;quot;],
&amp;quot;preemptible&amp;quot;: true,
&amp;quot;scopes&amp;quot;: [
&amp;quot;https://www.googleapis.com/auth/sqlservice.admin&amp;quot;,
&amp;quot;https://www.googleapis.com/auth/devstorage.full_control&amp;quot;
]
}
],
&amp;quot;provisioners&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;ansible&amp;quot;,
&amp;quot;playbook_file&amp;quot;: &amp;quot;./playbook/setup.yml&amp;quot;,
&amp;quot;user&amp;quot;: &amp;quot;packer&amp;quot;,
&amp;quot;extra_arguments&amp;quot;: [
&amp;quot;--vault-id&amp;quot;, &amp;quot;vault-password&amp;quot;,
&amp;quot;--extra-vars&amp;quot;, &amp;quot;deploy_key_path={{user `deploy_key_path`}}&amp;quot;,
&amp;quot;--extra-vars&amp;quot;, &amp;quot;master_key_path={{user `master_key_path`}}&amp;quot;
]
}
]
}
&lt;/code>&lt;/pre>&lt;p>使用 Packer 基本上不難，有幾個技巧要記得掌握好就可以了。&lt;/p>
&lt;ol>
&lt;li>&lt;code>variables&lt;/code> 區塊，因為打包的配置跟需求肯定會有差異，還有一些密碼之類的所以先設定成變數就能動態調整&lt;/li>
&lt;li>&lt;code>builders&lt;/code> 區塊，這部分照官方的文件設定即可上面的可以當作參考（Web Server 大多試用）&lt;/li>
&lt;li>&lt;code>provisioners&lt;/code> 區塊，其實可以跟 Shell Script 那些混用，不過使用 Ansible 算是相對容易設定環境的做法（只需要有檔案）&lt;/li>
&lt;/ol>
&lt;p>不過上面看似簡單，其實還有另外一個坑隱藏在裡面。&lt;/p>
&lt;p>&lt;strong>Google Cloud 的 Service Account 開不出對的權限&lt;/strong>&lt;/p>
&lt;p>因為這類頻率不高的操作我猜大家都會透過 Web UI 處理，但是要讓 Packer 有正確的權限做事情需要透過下指令的方式才能找到（也許有加上去了，不過去年十月底的時候是還沒有的）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gcloud projects add-iam-policy-binding EVENT-5X-CUSTOMER --role roles/iam.serviceAccountActor --member serviceAccount:packer@EVENT-5X-CUSTOMER.iam.gserviceaccount.com
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一來我們的 Packer 就能夠正確的從我們的 CI 伺服器（Ex. GitLab CI）對 GCP 下達指令產生映像檔，這個過程依照機器的規格跟要安裝的東西可能會花上十到十五分鐘不等的時間（至少三分鐘是在等 GCP 開機器）因此整個流程跑（測試、部署）也大概會花上半小時，以速度來說很難說是一個不錯的速度（跟 Capistrano 手動下指令相比）&lt;/p>
&lt;p>但是如果這個流程是全自動的，其實還是能接受的，工程師只要負責上傳程式碼跟 Merge 回 Master Branch（Production 用的分支）整個效率還是會比各種操作完畢後再用 Capistrano 部署還來的能夠有效迭代版本，不過真的想要能更加快速的更新和使用容器技術的 Docker 相比確實是慢上不少。&lt;/p>
&lt;p>這就如同五倍大多數的客戶都還是使用 Capistrano 部署一樣，我們應該評估客戶的需求跟開發迭代的情況來選擇一個適合的做法，很明顯地使用 Capistrano 雖然不怎麼自動化但是卻非常簡單容易使用。&lt;/p>
&lt;blockquote>
&lt;p>如果大家有仔細看 Packer 設定的話會發現 Source Image 和生成的 Image 群組是相同的，這是因為我們在打包的時候可以沿用裡面原有的環境來生成就可以大大縮短 Ansible 重複編譯的時間。最初的版本是使用 CentOS 生成，之後再重複使用前一次的版本來做修改。&lt;/p>
&lt;/blockquote>
&lt;h2 id="ci-設定">CI 設定&lt;/h2>
&lt;p>這次客戶是將原始碼保存在五倍的 GitLab 伺服器上，因此使用的是 GitLab CI 來進行這些處理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$DEPLOY_KEY ===PREVENT KEY INVALID===&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">&amp;gt; keys/deploy # NOTE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Ensure&lt;span class="w"> &lt;/span>Deploy&lt;span class="w"> &lt;/span>Key&lt;span class="w"> &lt;/span>has&lt;span class="w"> &lt;/span>newline&lt;span class="w"> &lt;/span>in&lt;span class="w"> &lt;/span>last&lt;span class="w"> &lt;/span>line&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$SERVICE_ACCOUNT_JSON&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>credentials.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$VAULT_ID&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>vault-password&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$MASTER_KEY&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>master.key&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>build&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- packer&lt;span class="w"> &lt;/span>build&lt;span class="w"> &lt;/span>-var&lt;span class="w"> &lt;/span>revision=$REVISION&lt;span class="w"> &lt;/span>main.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">only&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- master&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">stage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>deploy&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>google/cloud-sdk&lt;span class="p">:&lt;/span>alpine&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">before_script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- echo&lt;span class="w"> &lt;/span>$ROLLING_SERVICE_ACCOUNT&lt;span class="w"> &lt;/span>&amp;gt;&lt;span class="w"> &lt;/span>account.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- gcloud&lt;span class="w"> &lt;/span>auth&lt;span class="w"> &lt;/span>activate-service-account&lt;span class="w"> &lt;/span>--key-file&lt;span class="w"> &lt;/span>account.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- gcloud&lt;span class="w"> &lt;/span>compute&lt;span class="w"> &lt;/span>instance-groups&lt;span class="w"> &lt;/span>managed&lt;span class="w"> &lt;/span>rolling-action&lt;span class="w"> &lt;/span>replace&lt;span class="w"> &lt;/span>$INSTANCE_GROUP_NAME&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--max-surge=$MAX_SURGE&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--max-unavailable=$MAX_UNAVAILABLE&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--project=$GCP_PROJECT&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>--region=$GCP_REGION&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>manual&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">only&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- master&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為我們需要在執行 Ansible 時同時帶入一些檔案（現在回想起來，可能放到 Vault 加密比較方便一點）所以會先將相關的檔案生成出來。&lt;/p>
&lt;p>接下來就是利用 &lt;code>packer build&lt;/code> 的 &lt;code>-var&lt;/code> 選項將一些需要填入的設定值放進去（這邊會以 Commit SHA 當作參考，方便我們分辨使用的版本）&lt;/p>
&lt;p>最後 &lt;code>deploy&lt;/code> 選項考量到更新的機制最後是採用手動的方式，不過這邊就是利用 &lt;code>gcloud&lt;/code> 指令對 Instance Group 做一次重新的 Scale 將所有 Instance 都替換成新版的映像檔。&lt;/p>
&lt;blockquote>
&lt;p>不過 gcloud 的指令能用的選項和 Web UI 上的有差異，而且稍微跟字面上意思有點出入所以試了幾次才成功。&lt;/p>
&lt;/blockquote>
&lt;p>另外，在 Rails 專案的 CI 設定我們可以利用 GitLab 的 Trigger 功能去觸發 Packer 做事情（如果是企業版就有內建上下游功能）&lt;/p>
&lt;pre>&lt;code>deploy:
stage: deploy
script:
- curl -X POST
-F token=$PACKER_TRIGGER_TOKEN
-F ref=master
-F variables[REVISION]=$CI_COMMIT_SHORT_SHA
https://git.5xruby.tw/api/v4/projects/309/trigger/pipeline
only:
- master
&lt;/code>&lt;/pre>&lt;p>如此一來在開發團隊確定一項功能可以 Merge 回 master 之後就能夠自動製作出對應版本的映像檔，用於之後部署的時候自動更新。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>實際上這個方案整體來說是相當不完善的，不過除了從網路上的資料學習參考這些應用方式之外也還需要客戶有適合的情境才能夠這樣使用。不過工作這三年也算是勉強把各種比較常被討論的部屬方式都練過一遍，雖然不知道下一次有時間讓我改進 Ansible 以及這個部署流程的時間跟機會是什麼時候，不過還是不得不感嘆現在整個網站、軟體開發的領域真的是越來越複雜跟專業，有時候必須對每一種領域的技能都有所概念，才能夠幫助客戶解決各種情境上的問題。&lt;/p>
&lt;p>這也是我會選擇在剛畢業後就到接案類型公司的原因之一，相比在一間公司只使用一種方式解決問題，能夠根據情況跟需求選擇不同的技術並在不影響客戶的狀況下嘗試跟改進並逐漸完整一個開發體系，算是很難得的經驗。&lt;/p></content></item><item><title>如何透過 Service Account 來取得 Google API 的 OAuth2 Token</title><link>https://blog.frost.tw/posts/2019/12/29/How-to-use-Service-Account-to-exchange-Google-OAuth2-API-token/</link><category>
JWT,OAuth2,Service Account,Ruby,API,Google</category><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/12/29/How-to-use-Service-Account-to-exchange-Google-OAuth2-API-token/</guid><description>&lt;p>前陣子在嘗試一些比較少見的 Google API 時發現，在 Google 提供的 Ruby Gem 裡面並不支援這個 API 的實作，這表示需要自己去想辦法解決如何去呼叫這個 API 的問題。&lt;/p>
&lt;p>不過呼叫 API 需要 Access Token 才能夠使用，以往我們都是依靠第三方套件或者 Google 官方提供的 Gem 直接呼叫，似乎很少去直接實作客戶端。另一方面我們對 OAuth2 的認識大多是做 SSO（Single Sign On）而非這種伺服器對伺服器的呼叫。&lt;/p>
&lt;p>以 Google 這種規模的公司，如果是直接使用一般 OAuth2 的伺服器對伺服器的作法似乎也不太適合，而 Google 提供的解決方案就是 Service Account 了！&lt;/p></description><content>&lt;p>前陣子在嘗試一些比較少見的 Google API 時發現，在 Google 提供的 Ruby Gem 裡面並不支援這個 API 的實作，這表示需要自己去想辦法解決如何去呼叫這個 API 的問題。&lt;/p>
&lt;p>不過呼叫 API 需要 Access Token 才能夠使用，以往我們都是依靠第三方套件或者 Google 官方提供的 Gem 直接呼叫，似乎很少去直接實作客戶端。另一方面我們對 OAuth2 的認識大多是做 SSO（Single Sign On）而非這種伺服器對伺服器的呼叫。&lt;/p>
&lt;p>以 Google 這種規模的公司，如果是直接使用一般 OAuth2 的伺服器對伺服器的作法似乎也不太適合，而 Google 提供的解決方案就是 Service Account 了！&lt;/p>
&lt;h2 id="jwt">JWT&lt;/h2>
&lt;p>自從前端成為一個專門的專業並且逐漸完善、複雜，這中間出現了一個叫做 JWT（JSON Web Token）的應用，現在很多網站應該也都採用 JWT 來作為 API 的 Token。畢竟使用 JSON 記錄使用者的基本資訊，就能夠透過驗證 JWT 的可靠來確認是否為信任的認證伺服器發出，再根據 JSON 上的資訊就可以免去一次查詢使用者跟權限的操作，對比較複雜或者比較大的系統來說就能節省下不少時間。&lt;/p>
&lt;p>在 Google API 的 Servie Account 認證流程就是透過 JWT 來完成的，不過事情並沒有我們想像中那麼簡單生成一個 JWT 就可以直接呼叫。&lt;/p>
&lt;h2 id="grant-code">Grant Code&lt;/h2>
&lt;p>回到正題，如果我們去看 Google 的&lt;a href="https://developers.google.com/identity/protocols/OAuth2ServiceAccount">文件&lt;/a>會發現我們前面提到的 JWT 其實是用來產生 Grant Code 的作用，而不是直接用來產生 Access Token 的（文件後面有說有例外，不過一般來說都是需要再跑一次流程）&lt;/p>
&lt;p>也就是說，我們在整個流程中是這樣的步驟：&lt;/p>
&lt;ol>
&lt;li>使用 Service Account 生成 JWT (Grant Code)&lt;/li>
&lt;li>在伺服端走 OAuth2 流程用 Grant Code 換取 Access Token&lt;/li>
&lt;li>透過 Access Token 呼叫 Google API&lt;/li>
&lt;/ol>
&lt;p>至於生成的 JWT 中基本上只需要指定 Issuer 和 Scope 並且用正確的 Private Key 做簽章，就能夠順利通過 OAuth2 驗證獲取 Access Token。&lt;/p>
&lt;h2 id="實作">實作&lt;/h2>
&lt;p>前面兩段的敘述感覺有點複雜，不過我們直接實際實作一次就非常容易理解，可能還比我們平常使用的 OAuth2 流程容易不少。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># frozen_string_literal: true&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;bundler/inline&amp;#39;&lt;/span>
&lt;span class="n">gemfile&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">source&lt;/span> &lt;span class="s1">&amp;#39;https://rubygems.org&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;jwt&amp;#39;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;openssl&amp;#39;&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;net/http&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這次我們直接使用單個 Ruby 檔案來實作，整個流程非常簡單而且不複雜唯一需要的就是 JWT 的套件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">service_account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./service_account.json&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">privkey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">OpenSSL&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">PKey&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">RSA&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service_account&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;private_key&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ss">iss&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">service_account&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;client_email&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">scope&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;https://www.googleapis.com/auth/wallet_object.issuer&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">aud&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;https://oauth2.googleapis.com/token&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">exp&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">iat&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">JWT&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">privkey&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;RS256&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下來我們把 Service Account 的內容讀取進來產生 JWT，一般我們會選擇 JSON 格式來抓取。之前可能會有點疑惑就是為什麼還會提供 p12 的檔案格式，從這個步驟我們大概就可以猜出來原因。&lt;/p>
&lt;p>在這個 JWT 裡面，我們需要 Service Account 裡面的 Client Email 和 Private Key 兩個資訊，剛好對應的就是我們在 Google API 上面開設的 Service Account 的 Email 以及 p12 這個檔案，安全性上在 Google 的處理中也是用非對稱加密的方式來做，因此我們會拿到一個 Private Key 用來產生這些 Token。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">URI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://oauth2.googleapis.com/token&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Net&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">HTTP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uri&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">req&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span>
&lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">URI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode_www_form&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ss">grant_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;urn:ietf:params:oauth:grant-type:jwt-bearer&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">assertion&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">token&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Net&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">HTTP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">use_ssl&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kp">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span> &lt;span class="n">req&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">access_token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;access_token&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最後就是對 Google 的 OAuth2 API 發出一個請求來換取 Access Token 的請求，接下來我們就能利用這個 Access Token 去存取我們希望存取的資源。&lt;/p>
&lt;blockquote>
&lt;p>雖然沒有測試過，但是在 Service Account 開設時沒有授權的權限，即使 Scope 有指定也是拿不到對應的授權的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="firebase">Firebase&lt;/h2>
&lt;p>看到這個用法，我另外一個聯想到的就是 Firebase 的 &lt;a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens#create_custom_tokens_using_a_third-party_jwt_library">Custom Token&lt;/a> 機制，我們一樣會先跟 Firebase 請求一個 Service Account 用來生成這個 Token。&lt;/p>
&lt;p>產生的 JWT 的設置幾乎跟前面提到的方式差不多，只是內容改為針對 Firebase 做出了一些調整。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>其實整體來說並不複雜，不過會想寫這篇文章是因為之前雖然看過 Firebase 的使用方式卻沒有多想。這次透過 Google API 串接了解到在 JWT 和 OAuth2 的搭配應用上還能有這樣的變化，算是非常直得學習的一個方式。&lt;/p>
&lt;p>相較於我們直接將 JWT 作為 Access Token 的使用方式，這種方式在某種層面上來說提供了我們在一些額外應用場景的新選擇，就我自己目前能想到的就有像是 API 服務、IoT 裝置等等，不過前陣子有稍微查了一下是否有其他專案有這樣的應用方式，資料似乎還不多。&lt;/p>
&lt;p>不過至少未來設計服務的時候可以多一種方式來提供 API 串接的選項，畢竟以 Service Account 方式的管理似乎是比原本對每個客戶端都開設 Application 還簡單了一些（或者內部隱含的還是做了 Application 的註冊）&lt;/p></content></item><item><title>Ruby World Conference 2019 見聞</title><link>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</link><category>
Ruby,Ruby World Conference,Ruby on Rails,心得</category><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</guid><description>&lt;p>今年把在六月到八月做的一個小專案拿去投稿 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a> 意外的獲得了 15 分鐘的時間，於是又展開了一次日本出差之旅，剛好彌補一下今年因為客戶專案需要趕上線而無法參加 &lt;a href="https://rubykaigi.org/">RubyKaigi&lt;/a> 的遺憾。&lt;/p>
&lt;p>跟 RubyKaigi 不太一樣的地方是 Ruby World Conference 雖然叫做「World Conference」但是除了台上的講者之外，幾乎都是日本人（而且是稍微有年紀的大叔）去參加的。&lt;/p></description><content>&lt;p>今年把在六月到八月做的一個小專案拿去投稿 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a> 意外的獲得了 15 分鐘的時間，於是又展開了一次日本出差之旅，剛好彌補一下今年因為客戶專案需要趕上線而無法參加 &lt;a href="https://rubykaigi.org/">RubyKaigi&lt;/a> 的遺憾。&lt;/p>
&lt;p>跟 RubyKaigi 不太一樣的地方是 Ruby World Conference 雖然叫做「World Conference」但是除了台上的講者之外，幾乎都是日本人（而且是稍微有年紀的大叔）去參加的。&lt;/p>
&lt;h2 id="議程">議程&lt;/h2>
&lt;p>到目前為止我似乎還沒有在 RubyKaigi 清醒過（扣掉部分英文的議程）這次即使因為出雲大社的祭典（神在月）需要跟老闆去膠囊旅館，因此每天晚上幾乎都是洗個澡就睡（空間小、在公共空間又不適合辦公）其實睡得還蠻飽的，但是依舊不敵口譯的催眠之力，直接睡死。&lt;/p>
&lt;blockquote>
&lt;p>有趣得是議程中間都不會想睡⋯⋯&lt;/p>
&lt;/blockquote>
&lt;p>所以這次幾乎是沒有聽到太多詳細的議程，幾乎都是片段的部分。當然還是有不少有趣的地方，像是 Class Method 被定義在哪裡、Concurrent 問題等等，不過因為大多是片段（記憶斷片）的部分就不特別提出來討論。&lt;/p>
&lt;h2 id="welcome-party">Welcome Party&lt;/h2>
&lt;p>不知道是不是 Ruby 社群的傳統，總之不論是台灣的 &lt;a href="https://2019.rubyconf.tw/">RubyConf Taiwan&lt;/a> 或者 RubyKaigi 和 Ruby World Conference 都有 N+1 天的活動時間，大多是從活動開始前一天晚上就會從所謂的 Pre-Party（前夜祭）開始。這次的 Welcome Party 是限定講者參加的，地點是位於松江的一間&lt;a href="https://horai-kitijitsu.com/">懷石料理&lt;/a>餐廳。&lt;/p>
&lt;p>不過說實在的，雖然有些料理不錯不過可能是天氣或者季節的關係我自己是沒有那麼喜歡。&lt;/p>
&lt;blockquote>
&lt;p>Ruby World Conference 是固定在松江舉辦的，因為這裡是 Ruby 語言之父 Matz 的故鄉。這幾年開場介紹的時候連市長都會直接說是「Ruby City」了！&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/9F743E5DAD280C8F13BAD51B3391CE46.jpg" alt="Matz 的開場演講">&lt;/p>
&lt;p>運氣不錯的是講者大多會英文，所以以一個不會日文的外國講者來說算是還算自在的，活動只到八點半左右稍微跟幾位講者聊天後很快就結束了。&lt;/p>
&lt;h2 id="第一天">第一天&lt;/h2>
&lt;p>因為是第一次參加活動，所以試著想要完整地聽議程。不過最後完全變成不斷重複睡著、醒來的狀態。不過大致上可以感覺出來在 Ruby World Conference 是以偏向商業性質的研討會，這也應證了為什麼參加者的年齡層跟組成都跟大多數研討會有所差異。而且這場活動的開始還是會有像是島根縣縣長、松江市長、經濟部官員等等上台致詞（感謝會日文的老闆提示 XD）&lt;/p>
&lt;p>下午最後一場是我的演講，主要是在講一些有點觀念上的問題（心理上怎麼突破 Rails 框架的限制）用的是六到八月做的小專案，當時是用來實驗一些新的方式去設計一款聊天機器人遊戲，蠻意外這樣的題目會投稿上。後來晚上看 Twitter 的評論評價應該還算是不差，不過以內容來看感覺老外相對是比較喜歡這樣的題目。&lt;/p>
&lt;p>中間比較有趣的是這個，似乎是 RWC 的一個傳統，可以去吃一點日式點心（和菓子）和茶，沒有想像中那麼甜不過茶跟點心都蠻好吃的。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/608D1A00B80DF8DDFE0E95512673A50E.jpg" alt="和菓子">&lt;/p>
&lt;p>晚上則是固定的官方 Offical Party 跟前一天的 Welcome Party 相比餐點好吃不少，以至於大家都搶爆食物 XD&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/B2359A3DA599A883495D2D2192081B19.jpg" alt="蕎麥麵">&lt;/p>
&lt;p>不過因為大部分的人都入場，也因此跟 Welcome Party 不同有點難以跟其他人聊天，畢竟不是大部分的日本人都能講英文（或者說願意講）固定行程就是被老闆帶去認識一些大大跟用簡單的英文聊一下，然後在會場遊蕩一陣子勉強算是結束第一輪。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/A22D94C6098C2735AF7D9FC0FA6A200B.jpg" alt="當地歌手">&lt;/p>
&lt;p>因為迷迷糊糊就報名了二次會（官方）所以跟老闆再次轉移陣地，上圖是餐廳裡面演唱的當地歌手，還算是蠻有趣的表演。坐下來後其實幾乎沒有移動，一樣就是跟附近的人閒聊，不過因為基本上還是以日文為主所以我就是努力在吃點東西了 XD&lt;/p>
&lt;p>到二次會結束差不多十點多，回旅館因為也沒地方做其他事情所以就是盥洗後去睡覺。&lt;/p>
&lt;h2 id="第二天">第二天&lt;/h2>
&lt;p>因為第一天持續的睡著跟醒來，所以先嘗試聽看看今天兩場外國人的演講（不幸的是只比日文多撐了一倍多的時間）就改成去逛攤位，前幾年在 RubyKaigi 因為英文還沒有到流利的程度，最喜歡的就是去找贊助商聊天。畢竟身為擺攤人員就是必須要想辦法跟會眾對話跟宣傳，不過這邊的幾乎不會講英文，所以最後只能用很簡單的單字了解每個攤位的業務。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/8FE19A325C61279D24E04FEBF4BB4D78.jpg" alt="用 Ruby 寫的遊戲">&lt;/p>
&lt;p>比較有趣的是這間，雖然不太會英文所以只能用比手畫腳溝通。這款遊戲可以用 Ruby 或者 Strach 撰寫一些程式來控制角色過關，因為比較少見是使用 Ruby 的就特別記錄下來。&lt;/p>
&lt;blockquote>
&lt;p>用 Strach 拉出來的還能生成 Ruby 程式碼，這點算是蠻厲害的&lt;/p>
&lt;/blockquote>
&lt;p>其他攤位也有一些有趣的地方，像是可以幫忙檢查合約的服務。或者能夠透過 App 贈送電子禮品，接收者到對應的店家（超商、星巴克等）就可以兌換相對應的禮物。還蠻方便的覺得會在台灣受歡迎，不過意外的是台灣似乎還沒有這樣的服務，而韓國、印度之類的也都已經有了。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/4AF1C8168B5A39E5401CE3111DFDFE59.jpg" alt="Ruby 拉麵">&lt;/p>
&lt;p>說到 RWC 的特產大概是有 Matz 簽名的拉麵，前面沒有仔細看包裝盒就買錯了，後面補買了一大堆（同事搶著要）回到台灣過海關時才想到可能含有肉品，還好裡面似乎只有一點碎肉不影響。&lt;/p>
&lt;p>整個活動幾乎都是在跟人聊天交流，不過這樣下來確實讓我動了明年至少要學會基本的日語會話再去挑戰的念頭，希望我能順利達成（通常到一半就變成時間都用在寫程式上）&lt;/p>
&lt;p>接下來就是非官方的活動，據說也是固定會有的燒肉 Party，在當地的燒肉店聚會跟聊天。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/7D0DDAF90EC292BE8E5A3626DB0B7461.jpg" alt="燒肉">&lt;/p>
&lt;p>結束時間一樣是八點多，所以在回去車站的路上默默的進入了二次會模式（不過回旅館也沒事情能做，不如繼續喝酒吧！）&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/5FA40D0D52864800D574204B0F5BD07A.jpg" alt="炸豆腐">&lt;/p>
&lt;p>這間居酒屋似乎前幾天就有人來過獲得好評，裡面有不少有趣的食物像是照片上的炸豆腐、烤味噌等等，另外蕎麥麵也是蠻好吃的（這區的名產大多是蕎麥麵，幾乎每天都可以吃到）&lt;/p>
&lt;p>從週二到日本為止已經要到假日了，因為行程上安排方便所以禮拜六就是讓我在日本閒晃。&lt;/p>
&lt;h2 id="第三天週末">第三天（週末）&lt;/h2>
&lt;p>雖然松江這邊相對大家常去的東京、大阪來說相對偏僻，不過還是有不少景點（出雲大社、松江城）因為這次時間點很剛好遇到的是出雲大社一些祭典的時間，所以就決定往出雲大社前進看看能不能遇到什麼特殊事件（實際上週六剛好是沒有任何祭典的日子）&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/74244A949F9507CFDC00C12CCB9F1C9C.jpg" alt="一畑鐵路">&lt;/p>
&lt;p>要從松江去出雲大社需要先透過 JR 到出雲車站，再轉乘當地的私人鐵路到出雲大社。這個鐵路公司後來問老闆應該是一個當地的財團，所以其實車站附近的百貨公司也是他們的，同時他們也是 Ruby World Conference 的贊助商。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/5BB6079800B2BFDB744B5BC71A68D57C.jpg" alt="出雲大社入口">&lt;/p>
&lt;p>雖然一出車站就直接往方向走，出雲大社跟之前去過的景點相比附近的店家相對少了很多。所以不禁讓人懷疑是不是走錯方向，不過相對於知名的景點出雲大社跟松江都算是蠻遠的點，另外就是主要祭典也是在十一月這個時期，可能平常就比較少觀光客。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/961669B737E759503749DA2C753D72DC.jpg" alt="兔子神社">&lt;/p>
&lt;p>比較有趣的是雖然有預期會有兔子，不過出雲大社基本上就是兔子神社（跟神話有關）。有趣的是裡面一些展示一些東西跟其他神社算是有一定程度的不一樣，算是沒有白來。不過主體其實不大，但是整個區域其實有很多寺廟跟神社存在，大概是因為這邊是神社的發源地關係吧。&lt;/p>
&lt;blockquote>
&lt;p>看完之後就在想神社會不會就是日本聚落的原型，後來才慢慢發展成城市之類的，不過回去後就這樣被拋在腦後沒有去查相關資料&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/3E35A4F746179BD7FB434B227647431E.jpg" alt="義式沙拉">&lt;/p>
&lt;p>晚上跟老闆剛好都在六點到七點左右回到旅館，就去附近找東西吃。不過打開 Google Map 之類的還是有點困擾，畢竟相對大都市來說餐廳跟觀光客就不多，也就很難找不會太雷的餐廳（附近又是居酒屋居多，前幾天都只要跟著就有可以吃）&lt;/p>
&lt;p>不過這間酒吧的餐點雖然不是偏日式的（沒記錯是篇義式）但是都是用熟成肉，能查到的平價也不錯而且很好吃。&lt;/p>
&lt;blockquote>
&lt;p>因為覺得前幾天有吃過不少次居酒屋了，總覺得再繼續吃居酒屋很微妙，只是沒想到附近幾乎沒有這以外的選項。&lt;/p>
&lt;/blockquote>
&lt;h2 id="第四天回程">第四天（回程）&lt;/h2>
&lt;p>這次去日本總共是六天，因為要能在白天搭飛機晚上參加 Welcome Party 所以週二就出發（晚上參加了一下當地的社群活動）雖然有問我想不想在日本多玩幾天，不過自己一個人閒逛大概也逛不了多少，後面舊照行程方便多留一天在松江，週日就跟老闆一起搭飛機回東京，然後我在自己回台灣。&lt;/p>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-11-18-ruby-world-conference-2019-experience/F635324619CC5B26ABE0A106ED9AB92C.jpg" alt="壽喜燒">&lt;/p>
&lt;p>中間等飛機的時間決定來去機場的餐廳嘗試了一下壽喜燒，之前幾次都礙於價位（吃一次就 5000 日幣以上）猶豫不決。但是這次想說既然是出差，而且身上日幣其實也花得不算太多，所以就決定來試試看。雖然只是先嘗試看看中等價位的雪花牛，不過跟平常吃到的比起來好吃太多，覺得算是蠻值得嘗試的。&lt;/p>
&lt;h2 id="後記">後記&lt;/h2>
&lt;p>這篇明明是研討會的紀錄結果跟遊記一樣，不過實際上中間還是多少有聊到一些技術的東西，但是相對的少。像是在 Welcome Party 有向 Matz 請教一些 WebAssembly 跑 mruby 的一些問題，看看能不能加快之後手邊幾個專案的開發。還有跟老闆說非常擅長 PostgreSQL 的大大請教該讀什麼書比較好，雖然說議程跟技術在整幾天佔的比例其實不大，不過現階段已經能輕鬆做到開發東西的狀況來說，也許去了解其他人怎麼思考反而是比較容易再進一步的做法吧。&lt;/p></content></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （二）</title><link>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</link><category>
COSCUP,Game,Ruby,Golang,HTML5,JavaScript,DevOps,Docker,Unlight</category><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</guid><description>&lt;p>寫完&lt;a href="https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/">上篇&lt;/a>後就開始員工旅遊、鐵人賽（&lt;a href="https://ithelp.ithome.com.tw/users/20065771/ironman/2734">從讀遊戲原始碼學做連線遊戲&lt;/a>）反而一直都沒有時間把下篇寫完，離 COSCUP 都已經過了一個多月自己都忘記還剩什麼沒有寫在文章裡面。&lt;/p>
&lt;p>中間在鐵人賽的部分花了一些時間把目前理解到關於 Unlight 的一些基本設計整理出來，後面則是實作。至於近期也已經開始在搭建 HTML5 版本的底層設計，還有 mruby 的&lt;a href="https://github.com/elct9620/mruby.wasm">整合&lt;/a>（因為想提供 Mod 功能到遊戲中）等等東西都在進行中，十一月還要飛日本一趟參加 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a>，可以說是完全都閒不下來。&lt;/p>
&lt;p>總之，讓我們在來看看 COSCUP 這場演講的後續吧 XD&lt;/p></description><content>&lt;p>寫完&lt;a href="https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/">上篇&lt;/a>後就開始員工旅遊、鐵人賽（&lt;a href="https://ithelp.ithome.com.tw/users/20065771/ironman/2734">從讀遊戲原始碼學做連線遊戲&lt;/a>）反而一直都沒有時間把下篇寫完，離 COSCUP 都已經過了一個多月自己都忘記還剩什麼沒有寫在文章裡面。&lt;/p>
&lt;p>中間在鐵人賽的部分花了一些時間把目前理解到關於 Unlight 的一些基本設計整理出來，後面則是實作。至於近期也已經開始在搭建 HTML5 版本的底層設計，還有 mruby 的&lt;a href="https://github.com/elct9620/mruby.wasm">整合&lt;/a>（因為想提供 Mod 功能到遊戲中）等等東西都在進行中，十一月還要飛日本一趟參加 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a>，可以說是完全都閒不下來。&lt;/p>
&lt;p>總之，讓我們在來看看 COSCUP 這場演講的後續吧 XD&lt;/p>
&lt;h2 id="營運">營運&lt;/h2>
&lt;p>前面基本上已經把整個遊戲能緊急處理的都做過一遍了，因此後需要繼續的明顯就是要怎麼讓遊戲可以持續的運作。最初基本上都是用看 Log 的方式在觀察玩家，連上線人數都要開一個 SSH 連線到伺服器刷 Log 來看，很明顯是不太 OK 的做法。&lt;/p>
&lt;p>因此就開始評估有什麼解法比較適合，因為大量的改動不熟悉的程式碼（遊戲量很大）是一件危險很高的事情，尤其是雖然專案看起來有測試但是卻完全找不到。&lt;/p>
&lt;p>所以最後決定的做法就是在某些特定檔案做小規模的修改，先以「增加監控」能力為主，因此我們先做的就是讓上線人數可以到 CloudWatch 上面被看到，至少能統計 DAU (Daily Active User) 來評估遊戲是否該做調整之類的。&lt;/p>
&lt;p>解決方案也是簡單粗暴，因為只有 Auth Server 在連上的狀態遊戲才能正常遊玩，因此直接對 Auth Server 吐線上玩家統計 Log 的地方用同樣的方式 Hack 出一個定時把資料吐回 CloudWatch 的功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby"> &lt;span class="no">EM&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">PeriodicTimer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">proc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">begin&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;AuthServer: [cloud_watch:] updated online number&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="no">CLOUD_WATCH&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put_metric_data&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="ss">namespace&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Unlight&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">metric_data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ss">metric_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;OnlineNumber&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">dimensions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nb">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Hostname&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">ENV&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;SERVER_NAME&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s1">&amp;#39;unlight.app&amp;#39;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">timestamp&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">AuthServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">class_variable_get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:@@online_list&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">unit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Count&amp;#39;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">rescue&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="n">e&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;AuthServer: [cloud_watch:] fatal error &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">backtrace&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除此之外我們也盡量使用像是 Google Analytics 等工具追蹤一些我們額外掛上去的功能，不過受限於 Flash 很多東西還是追不到的狀態。&lt;/p>
&lt;h2 id="客製化">客製化&lt;/h2>
&lt;p>不過想要加額外的東西是會影響到我們目前在 &lt;a href="https://github.com/open-unlight/legacy-unlight-docker">GitHub&lt;/a> 公開的版本，這個版本是基於 CPA 釋出的原始碼建構並且修正一些有問題的小地方。如果去調整的話會造成所有人都需要跟我們使用一樣的架構。&lt;/p>
&lt;p>但是這很明顯不應該出現在一個 Open Source 專案上，從設計的角度看也應該提供選擇才對，所以最後的作法就是增加一個 &lt;code>customize&lt;/code> 目錄來放這些客製化的東西。&lt;/p>
&lt;p>在 Docker 的建置過程中，我們可以使用多次 &lt;code>ADD&lt;/code> 來加入檔案，如果是重複的檔案就會被覆蓋掉，利用這樣的特性就可以做到類似這樣的客製化調整。&lt;/p>
&lt;pre>&lt;code>原始 Gemfile -&amp;gt; 自訂 Gemfile -&amp;gt; 原始檔案 -&amp;gt; 自訂檔案
&lt;/code>&lt;/pre>&lt;p>如此一來最後整合出來的專案就會是被客製化修改過的，利用這樣的特性我們就把 CloudWatch 的線上玩家監控，還有遊戲中透過 API 方式開放的課金道具商店給實作出來。&lt;/p>
&lt;h2 id="rack">Rack&lt;/h2>
&lt;p>不過在 Unlight 這樣的 TCP 專案上要怎麼擴充出 API 呢？因為本質上他還是一個 Ruby 專案，因此我們只需要時做一個符合 Rack 介面的標準就可以任意讓 Web Server 啟動他跑起來。實際上在這方面 Unlight 做得還算不錯，整體專案上分為幾個大區塊&lt;/p>
&lt;ul>
&lt;li>&lt;code>model/&lt;/code> - 資料相關，通常會連接資料庫&lt;/li>
&lt;li>&lt;code>controller/&lt;/code> 邏輯相關，遊戲的運作本體&lt;/li>
&lt;li>其他大多是輔助的工具，還有比較特殊的是遊戲規則定義（Rule 目錄）&lt;/li>
&lt;/ul>
&lt;p>因為操作的部分已經被封裝到 Model 裡面，像是「發放給玩家一個道具」這樣的動作是封裝好的，因此我們可以在 API 透過這樣的方式直接發放道具給玩家。&lt;/p>
&lt;blockquote>
&lt;p>在 Controller 裡面會是「檢查玩家是否符合條件，然後發放道具」的組合動作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="客服">客服&lt;/h2>
&lt;p>這段基本上很難做，我們後來的作法就是搭配各種工具。像是 &lt;a href="https://help.unlight.com.tw/hc/zh-tw">Zendesk&lt;/a> 這類工具來提供玩家回報問題的地方，網頁右下角直接會有能回報錯誤的按鈕可以查詢 FAQ 或者回報問題。&lt;/p>
&lt;p>內部的話則是用 Discord 和 Asana 等工具溝通跟討論下一階段更新要做什麼、有什麼事情要優先處理等等。&lt;/p>
&lt;blockquote>
&lt;p>幫助按鈕後來改左邊，因為我們加上了 Discord Widget 讓玩家可以透過 Chatbot 在我們的玩家群組裡面發言而不需要登入或者註冊。&lt;/p>
&lt;/blockquote>
&lt;h2 id="html5">HTML5&lt;/h2>
&lt;p>最後是 HTML5 改版，考慮到只有 WebSocket 可以使用的情況下勢必要去改伺服器來實現 WebSocket 不然就無法使用。不過運氣不錯的是這件事情剛好因為 Unlight 是使用 EventMachine 來處理 TCP 連線的，因此我把 WebSocket 套件加上去之後做一些簡單的修改，就勉強可以使用 WebSocket 來作為伺服器。&lt;/p>
&lt;blockquote>
&lt;p>Ruby 目前的 WebSocket Gem 是基於 EventMachine 開發的，因此在連線處理上幾乎沒有太大的變化。&lt;/p>
&lt;/blockquote>
&lt;p>不過還是缺失了不少功能，演講當時基本上就簡單分享了一下 WebSocket 的機制跟目前的進度。寫這篇文章的時候已經透過 Electron.js 製作桌機版讓 Flash 續命時間增加了一定程度，又發現能夠直接透過 Node.js 做 TCP 連線，因此目前的主力已經先轉移到將 HTML5 Client 開發出來後先直接使用原有伺服器來運行，等到 Client 穩定後再去修改伺服器的作法。&lt;/p>
&lt;p>在這之前，因為 Unlight 的指令是很用 Byte 去組合而成的結構在 JavaScript 上也很難處理。因此又開了一個 &lt;a href="https://github.com/open-unlight/go-ul">Go UL&lt;/a> 的專案想利用 Golang 來解析，在轉換成 WebAssembly 整合到 JavaScript 上面來改善這方面的處理問題（SPR 的密碼加密計算用 Golang 也會比 JavaScript 容易處理，畢竟 BigInt 在 JavaScript 上也需要額外的支援）&lt;/p>
&lt;h2 id="後記">後記&lt;/h2>
&lt;p>這場演講基本上算是一個過程上的紀錄，在短短一到兩週內的時間怎麼去讓一款遊戲可以運行、營運，以及我們是怎樣慢慢的改造跟重構一個古老的遊戲專案讓他變得容易維護。&lt;/p>
&lt;p>不過實際上當時評估如果要繼續做下去的話，絕對是花上一兩年都跑不到的大工程，雖然不知道能堅持到什麼時候但至少每一個階段都能發現有趣的東西，應該是還可以繼續在努力很久。反而是關於 IP 上的問題，也就是遊戲的內容本身因為並沒有實際的完全開放，反而讓未來改版完畢後遊戲想要進入新的階段變得非常受限⋯⋯&lt;/p>
&lt;p>不過也因為這款遊戲，讓我自己在遊戲開發上有很多不確定的東西有了一個大概知道能怎麼做的方案，以及很多新的想法可以嘗試。&lt;/p>
&lt;p>那麼，就請大家期待在不久的未來我們重新開發過的 Unlight 會是怎樣的面貌了 XD&lt;/p></content></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （一）</title><link>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</link><category>
COSCUP,Game,Ruby,Golang,HTML5,JavaScript,DevOps,Docker,Unlight</category><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</guid><description>&lt;p>在 &lt;a href="https://coscup.org/2019/">COSCUP&lt;/a> 分享了這兩週左右（8/3 ~ 8/17）把一款決定開放原始碼的網頁遊戲，從無法啟動到恢復伺服器開始運作的一些經驗跟大家分享。
不過看起來還是有很多人沒有機會來聽，雖然之後因為會把一部分重心放在這款遊戲上，所以應該還是有不少機會，但還是簡單的來彙整一下今天講的東西。&lt;/p>
&lt;p>上一篇&lt;a href="https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/">快速閱讀 Unlight 原始碼&lt;/a>大致上有提到了我在當時看到原始碼的看法跟概觀。有興趣的話可以搭配&lt;a href="https://speakerdeck.com/elct9620/2019-coscup-fu-huo-ge-browser-game-unlight-kai-yuan-shi-jian">演講簡報&lt;/a>一起讀這篇文章。&lt;/p>
&lt;p>另外，這次整個遊戲運作起來除了我自己本身對 Ruby / ActionScript 有一定的了解外，也要感謝一下我們這個團隊（&lt;a href="https://unlight.app">Open Unlight&lt;/a>）的初期成員 Poka 和舞鶴，給我硬體上的支援跟對其他玩家的客服支援，不然有時候真的很難同時處理這些事情。&lt;/p></description><content>&lt;p>在 &lt;a href="https://coscup.org/2019/">COSCUP&lt;/a> 分享了這兩週左右（8/3 ~ 8/17）把一款決定開放原始碼的網頁遊戲，從無法啟動到恢復伺服器開始運作的一些經驗跟大家分享。
不過看起來還是有很多人沒有機會來聽，雖然之後因為會把一部分重心放在這款遊戲上，所以應該還是有不少機會，但還是簡單的來彙整一下今天講的東西。&lt;/p>
&lt;p>上一篇&lt;a href="https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/">快速閱讀 Unlight 原始碼&lt;/a>大致上有提到了我在當時看到原始碼的看法跟概觀。有興趣的話可以搭配&lt;a href="https://speakerdeck.com/elct9620/2019-coscup-fu-huo-ge-browser-game-unlight-kai-yuan-shi-jian">演講簡報&lt;/a>一起讀這篇文章。&lt;/p>
&lt;p>另外，這次整個遊戲運作起來除了我自己本身對 Ruby / ActionScript 有一定的了解外，也要感謝一下我們這個團隊（&lt;a href="https://unlight.app">Open Unlight&lt;/a>）的初期成員 Poka 和舞鶴，給我硬體上的支援跟對其他玩家的客服支援，不然有時候真的很難同時處理這些事情。&lt;/p>
&lt;h2 id="動機">動機&lt;/h2>
&lt;p>最開始只是我想自己研究，主要是這幾點原因在。&lt;/p>
&lt;p>第一點是日本的遊戲公司很少會放出原始碼，至少以現在很熱門的手遊大家幾乎是沒機會看到開放原始碼的專案，不過即使是歐美也是，所以變得很難有機會學習怎麼做。
第二點則是因為他用了 Ruby 和 ActionScript 這兩個語言，前者是我工作用的語言也是我個人很喜歡的語言，後者是我大學寫過一陣子的語言，兩個我都蠻熟悉的。&lt;/p>
&lt;p>後來發現伺服器用 DigitalOcean
沒辦法支撐後，朋友 Poka 就把家裡閒置的機器拉出來提供給我使用，所以又再加上把一些工作上很少有機會用到的理論套上去，因為玩家數夠多了！&lt;/p>
&lt;blockquote>
&lt;p>注意：不是每個朋友家裡都剛好會有空的機櫃、伺服器跟有冷氣的機房！&lt;/p>
&lt;/blockquote>
&lt;h2 id="復原">復原&lt;/h2>
&lt;p>&lt;img src="https://blog.frost.tw/images/2019-09-03-coscup-2019-talk-about-the-browser-game-unlight-which-i-revived-it/screenshot.png" alt="遊戲畫面">&lt;/p>
&lt;p>其實伺服器部分本身沒有什麼大問題，基本上就是缺幾個檔案。不過這些檔案只是被改成 &lt;code>_orig&lt;/code> 的形式，把檔名改回去後就好了，基本上是一些設定檔像是伺服器的 IP 位置、資料庫設定等等。&lt;/p>
&lt;p>至於 Flash 客戶端的部分，因為想說是 Flash 所以就跑去想把 Flash IDE 裝回來，畢竟一般來說都是靠 IDE 來處理的。不過因為看起來像是用 Flex 就選擇安裝 Flash Builder 來跑，結果就直接噴出 &lt;code>Failed to create Java Virtual Machine&lt;/code> 的錯誤，這是因為新版的 macOS 用的 Java 已經新太多。&lt;/p>
&lt;p>而且 Adobe 還把這些 IDE 都下架，所以光是想要取得就有不少困難在。&lt;/p>
&lt;p>不過因為是用 Flex 所以還有 Flex SDK 可以替代，至少能用 Command Line 的方式去編譯，結果當時（週五晚上）由 CPA 釋出的原始碼裡面缺少了最重要的 &lt;code>src/&lt;/code> 目錄，也就是客戶端本體的實作部分。
大概過了兩天，到週一的時候才發現少上傳補上到 GitHub 上面，此時就能透過 &lt;code>mxmlc&lt;/code> 這個指令去編譯。&lt;/p>
&lt;blockquote>
&lt;p>回頭來看，我們會認為 Flash 就是用 IDE 用 GUI 去寫這個專案，但其實 Unlight 幾乎是直接用 ActionScript 寫的，除了美術的部分合理推測會使用 Flash 的 IDE 之外，其實遊戲本身大概是沒有使用的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="缺少的-as-檔案">缺少的 as 檔案&lt;/h3>
&lt;p>不過即使取得了完整原始碼，還是發現這樣子還是有缺檔案的樣子。經過追查之後，發現缺少的 &lt;code>FontLoader.as&lt;/code> 和 &lt;code>Constants.as&lt;/code> 應該都是由 Ruby 的腳本生成。&lt;/p>
&lt;p>所以找了一下，發現在伺服器端確實有腳本需要執行過才能正常生成客戶端。&lt;/p>
&lt;p>&lt;code>Constants.as&lt;/code> - 一些文本資料或不影響平衡的都可以塞到客戶端，這個檔案基本上應該就是將 DB 的資料直接整到客戶端的主要方式。
&lt;code>FontLoader.as&lt;/code> - Unlight 當時算是非常熱門的遊戲，所以至少有五到六種語言的翻譯，為了遊戲美術表現的品質所以會把字體內嵌，因此會使用 Ruby 負責掃瞄出這個語言客戶端所需的 Unicode 來告訴 Flex Compiler 需要內嵌哪些字體檔案。&lt;/p>
&lt;blockquote>
&lt;p>基本上是蠻合理的設計，不過因為我們大部分都是做 Web 習慣的，可能會不太理解吧 XD&lt;/p>
&lt;/blockquote>
&lt;h3 id="語言切換">語言切換&lt;/h3>
&lt;p>令一方面因為多國語言，所以其實有很多 &lt;code>.swf&lt;/code> 檔案都會用像是 &lt;code>_tc.swf&lt;/code> &lt;code>_ja.swf&lt;/code> 這樣的形式命名，假設原始檔案叫做 &lt;code>tutorial.swf&lt;/code> 的話，一開始是不會有這個檔案的，因為你需要利用一個叫做 &lt;code>switch_resouce.rb&lt;/code> 的檔案，幫你從 &lt;code>tutorial_tc.swf&lt;/code> 重新命名成 &lt;code>tutorial.swf&lt;/code> 才行。&lt;/p>
&lt;p>但是因為他是用 Git 的方式讓大家下載的，所以最後就會讓整個 Repo 裡面充滿各種沒有被追蹤的檔案，也會非常混亂。&lt;/p>
&lt;blockquote>
&lt;p>除此之外部署的時候如果沒有切換的話，在遊戲過程中還會因為抓不到對應的 swf 造成許多地方無法正常運作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="docker-化">Docker 化&lt;/h2>
&lt;p>基於前面這些編譯客戶端的問題，最簡單的方法就是用 Docker 來處理。另一方面就是要部署起來其實需要不少額外的補丁，而這些處理目前是否能 PR 回官方的版本，或者直接修改維護都還是問題。雖然 Docker 不是一個萬用的解決方案，但是在想要有一個乾淨的編譯環境來說，反而是一個相對適合的做法。&lt;/p>
&lt;p>在編譯客戶端的時候，只需要將圖檔這些東西都複製進去 Docker 裡面，然後將前面設定 Java 環境（Flex 是基於 Java）、Flex SDK 設定以及各種補丁和我自己修改過的檔案，全部加入到容器裡面，再用做一次性的編譯環境就可以很方便的產生客戶端。&lt;/p>
&lt;blockquote>
&lt;p>某方面來說可以用時間換來一定程度相對乾淨的專案環境&lt;/p>
&lt;/blockquote>
&lt;p>令一方面因為 Unlight 的設計很適合讓思考 SOA / Microservice 之類的架構設計思考方式，因為它將登入伺服器、任務伺服器等等都切割開來，所以要部署伺服器起來其實也要做不少動作，但假設我們使用 Docker Compose 的話，就可以透過設定檔去解決這些問題。&lt;/p>
&lt;h2 id="登入失敗">登入失敗&lt;/h2>
&lt;p>經過幾天的努力總算是有能執行的客戶端以及可以運行的伺服器，不過在修復客戶端時使用了網路上下載的 &lt;code>as3crypto.swc&lt;/code> 這個套件，結果卻一直無法登入。&lt;/p>
&lt;blockquote>
&lt;p>理論上加密演算法不應該不一樣，但是因為各種理由使用 CPA 後來（一週後）提供的檔案，就能正成使用。&lt;/p>
&lt;/blockquote>
&lt;p>Unlight 使用了一個叫做 &lt;strong>Secure Remote Passwor&lt;/strong> 的機制，在做簡報的時候發現他的實作裡面有一個叫做 OpenSSL 所以還蠻好懂的，我們在開發網站很熟悉的 SSL 憑證基本上也基於這個 &lt;a href="http://srp.stanford.edu/design.html">Stanford 的論文&lt;/a>來實現的，不過中間遭遇了很多問題。&lt;/p>
&lt;p>因為遊戲使用的是「論文版本」也就是完全參照論文去實現，但是網路上像是 1Password 的 Golang 版本或者 Mozilla 的 Node.js 版本，都是基於 RFC5054 的版本差異上來說就是 Salt 在客戶端的先後順序。&lt;/p>
&lt;p>論文版本是由客戶端先發送 Public Key 到伺服器換取 Salt 跟伺服器的 Public Key 在繼續後面的運算，但是 RFC 版本使用的則是客戶端先發送請求初始化連線，再從伺服器拿到 Public Key 和 Salt 這些資訊，最後再生成 Public Key 發給伺服器後做後續的運算。&lt;/p>
&lt;p>兩個版本順序剛好是相反的，也讓我很難用其他語言實作來驗證看看。&lt;/p>
&lt;blockquote>
&lt;p>其實 RFC 還有其他版本，不過目前主流的應該是 RFC5054 的這個版本。另外還有一個好處是當伺服器更改了計算的基準（N, g）的時候，因為伺服器發回來的也包含這兩個數值，所以就不需要修改客戶端，至少在安全性跟方便性都有所提高。&lt;/p>
&lt;/blockquote>
&lt;h2 id="效能調校">效能調校&lt;/h2>
&lt;p>因為 Poka 支援了伺服器，所以我們實際上是有 24 Core &amp;amp; 24G RAM 的伺服器，連硬碟都是用有著 98K IOPS 的 SSD 理論上是不應該卡頓的⋯⋯&lt;/p>
&lt;p>不過根據我前兩天在 Digital Ocean 用 $5 和 $15 的機器測試的狀況，大概是 60 人跟 300 人會明顯卡頓，但是換到了 Poka 的機器上硬體至少提升了有十幾倍，卻還是卡在 500 多人就很不合理。&lt;/p>
&lt;p>中間我們做了很多嘗試，像是利用 Docker 可以限制使用的 CPU 核心之類的設定將 DB 集中在某個 CPU 上之類，還有調整記憶體限制等等，最後才發現了一筆異常的數值。&lt;/p>
&lt;p>因為 SSD 的關係遊戲每個 SQL 操作大概是在 0.0001s 左右，但是有一個很頻繁的 SQL 操作大概花上 0.2s 左右經過補上 Index 的處理後，遊戲直接達到 1000 人左右都不卡頓的狀況。&lt;/p>
&lt;blockquote>
&lt;p>當時有玩家還在猜該不會當初遊戲公司死掉也跟這個少掉的 Index 有關吧？不過理論上以當時的玩家數量，不太可能少處理這點。&lt;/p>
&lt;/blockquote>
&lt;p>就我跟 Poka 的評估，目前使用的伺服器即使到了 3000 多人也應該能支撐住才對。不過到了最近玩家人數開始穩定的減少，推測差不多應該會停在一個負擔不太大的數值上吧 XD&lt;/p>
&lt;blockquote>
&lt;p>畢竟很多玩家都是來懷舊的⋯⋯&lt;/p>
&lt;/blockquote>
&lt;h2 id="小結">小結&lt;/h2>
&lt;p>雖然已經盡量寫的簡單，但是似乎文章還是有點太長 XD&lt;/p>
&lt;p>下一篇會再聊一下後續的處理，也就是經過我修改過的 Docker 版本提供了選擇性客製化的功能以及我們怎麼在經營遊戲上處理盡量讓玩家有一個相對好的體驗、以及對 HTML5 化的規劃跟實驗。&lt;/p></content></item><item><title>快速閱讀頁遊 Unlight 開源後的原始碼</title><link>https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/</link><category>
Ruby,Unlight,Game,ActionScript,筆記</category><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/</guid><description>&lt;p>最近一款有點年紀的頁遊 &lt;a href="https://zh.wikipedia.org/zh-tw/Unlight">Unlight&lt;/a> 在停止營運後幾年，突然公佈說要開放原始碼跟圖片素材。&lt;/p>
&lt;p>這款遊戲嚴格說起來並沒有像我們熟悉的端遊、手遊之類的那樣華麗，但是非常有特色的人物設計跟對戰系統倒是讓很多玩家即使在好幾年後仍然在期待他能復活。&lt;/p>
&lt;p>作為一個曾經的玩家，其實也是非常期待的，不過這次的開放原始碼路線大概是復活無望。不過從這幾天公開的資料來看，圖片、音效到客戶端和伺服端都公開的狀況下，還是很有希望被熱血的玩家復活的。&lt;/p>
&lt;p>另一方面，既然伺服器是透過 Ruby 撰寫的，身為使用 Ruby 的開發者在遊戲類應用不常見的狀況下，能可以作為學習素材肯定是要看過一遍的。&lt;/p></description><content>&lt;p>最近一款有點年紀的頁遊 &lt;a href="https://zh.wikipedia.org/zh-tw/Unlight">Unlight&lt;/a> 在停止營運後幾年，突然公佈說要開放原始碼跟圖片素材。&lt;/p>
&lt;p>這款遊戲嚴格說起來並沒有像我們熟悉的端遊、手遊之類的那樣華麗，但是非常有特色的人物設計跟對戰系統倒是讓很多玩家即使在好幾年後仍然在期待他能復活。&lt;/p>
&lt;p>作為一個曾經的玩家，其實也是非常期待的，不過這次的開放原始碼路線大概是復活無望。不過從這幾天公開的資料來看，圖片、音效到客戶端和伺服端都公開的狀況下，還是很有希望被熱血的玩家復活的。&lt;/p>
&lt;p>另一方面，既然伺服器是透過 Ruby 撰寫的，身為使用 Ruby 的開發者在遊戲類應用不常見的狀況下，能可以作為學習素材肯定是要看過一遍的。&lt;/p>
&lt;h2 id="概觀">概觀&lt;/h2>
&lt;p>大概是在七月底的時候 Unlight 的 &lt;a href="https://unlight-world.com">官網&lt;/a> 突然復活，並且出現了一些開放素材的資訊。大約在昨天半夜（8/3 ~ 8/4）有人貼出了 &lt;a href="https://github.com/unlightcpa">Unlight 的 GitHub&lt;/a> 就此大家就開始期待是否有人能夠將他重建出來。&lt;/p>
&lt;p>開始使用之前，需要先確認授權的形式。&lt;/p>
&lt;ul>
&lt;li>原始碼 - MIT 授權&lt;/li>
&lt;li>素材（圖片、音樂）- CC BY-ND 4.0&lt;/li>
&lt;/ul>
&lt;p>以原始碼來說基本上算是可以自由使用跟修改，算是很寬鬆的條款。而圖片素材部分則是需要註明作者，主要受限的地方是「禁止改作」的部分，因為目前釋出的檔案大多以 SWF 為主（裡面含有一些動畫檔案）所以如果想要抽取出圖片後修改為適合手遊、HTML5 的應用時，是否不會跟授權牴觸就是需要注意的部分。&lt;/p>
&lt;h2 id="架構語言">架構、語言&lt;/h2>
&lt;p>原始碼部分包含了 &lt;a href="https://zh.wikipedia.org/zh-tw/ActionScript">ActionScript 3.0&lt;/a> 和 &lt;a href="https://www.ruby-lang.org/zh_tw/">Ruby&lt;/a> 兩個部分，AS3 的部分主要是用於客戶端，而 Ruby 則是提供伺服器。&lt;/p>
&lt;blockquote>
&lt;p>考慮到 Unlight 的時代背景，採用 Flash + Ruby 的方式其實跟目前大家熟悉的 HTML5 頁遊是比較不一樣的，他比較接近於端遊的類型在伺服器和客戶端之間溝通，網頁部分可以視為下載客戶端的載體。&lt;/p>
&lt;/blockquote>
&lt;p>客戶端部分目前推測「缺少非常多檔案」因為看起來有使用一些第三方的套件，官方也沒有提供任何文件說明，所以看起來是暫時無法「產出客戶端」的情況。而伺服端就看起來比較容易設定起來，至少有 &lt;code>Gemfile&lt;/code> 描述了需要安裝的 Ruby 套件，可以輕鬆的設定起來。&lt;/p>
&lt;h2 id="客戶端">客戶端&lt;/h2>
&lt;p>目前從 &lt;code>app/client&lt;/code> 目錄下看到的資訊來看，是一些原始的 ActionScript 原始碼，但是假設要編譯的話基本上會需要透過像是 &lt;a href="https://zh.wikipedia.org/zh-tw/Adobe_Flash_Builder">Flash Builder&lt;/a> 或者 &lt;a href="https://www.adobe.com/devnet/flex/flex-sdk-download.html">Flex SDK&lt;/a> 來做編譯，但是前者目前基本上是無法正常取得（可以透過 Creative Cloud 的知識庫找到載點）後者雖然可以取得，但是只能編譯單個 ActionScript 檔案。&lt;/p>
&lt;p>但是目錄下目前並沒有關於如何編譯的說明，唯一知道的是在 GitHub 上的 &lt;a href="https://github.com/unlightcpa/Unlight/issues/2">Issue&lt;/a>（推測是原作者）表示無法在比較新版的 Flex 編譯，不過實際上要怎麼編譯還是未知的。&lt;/p>
&lt;blockquote>
&lt;p>我在我自己的 macOS 上安裝了 Flash Builder 但是 Java 版本已經過新無法啟動，網路上提供的手動指定 JVM 路徑的方式也無法正常開啟，網路上有一個說法是透過 Flash Builder 打開專案之後就能夠自動編譯。&lt;/p>
&lt;/blockquote>
&lt;p>另外一個疑點是 Client 端裡面的檔案，像是 &lt;code>Config.as&lt;/code> 或者 &lt;code>News.as&lt;/code> 這類檔案，都可以看到讀取某些 XML 設定檔的資訊，像是下面這段節錄。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-actionscript" data-lang="actionscript"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nx">Config&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="nx">XMLData&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="nx">_TRANS_CONFIG_URL&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;/public/config.xml&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="nx">__URL&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_TRANS_CONFIG_URL&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="nx">__VERSION&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;multi_servers_111003&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這些檔案我們都會看到像是 &lt;code>import flash.net.URLRequest;&lt;/code> 的片段，明顯是用來抓取某些資料的，不過目前卻不知道這些 XML 資料需要提供哪些資訊，以及似乎沒有實際呼叫的地方，表示可能有一些行為是還未完善的。&lt;/p>
&lt;blockquote>
&lt;p>在寫這篇文章時發現是從 &lt;code>XMLData&lt;/code> 繼承來的，不過即使能夠呼叫並讀取設定檔等資訊，實際上要怎麼運行還是個問題。&lt;/p>
&lt;/blockquote>
&lt;p>另一方面是在伺服器端（待會會提到）的地方有設計一個加密機制，玩家跟伺服器交換資料的時候是會經過加密的（保護及防止作弊）而實際上玩家的每一個動作都會被轉會成 Command（指令）的概念去跟伺服器互動，但是目前在客戶端裡面找不到任何編碼指令的程式碼。&lt;/p>
&lt;blockquote>
&lt;p>前面提到 Unlight 比較類似傳統端遊的做法是因為他不是透過 HTTP 請求（網頁）的方式連線，而是直接透過 TCP 連線對伺服器連線後互動，考慮這種方式在 Flash 遊戲還盛行的時期，還算是合理且常見的作法。&lt;/p>
&lt;/blockquote>
&lt;p>另外就是客戶端理論上要有讀取前面素材包裡面的 SWF 檔案的片段，目前看起來也暫時還沒有發現是在哪裡定義的（也可能是透過使用的外部套件）&lt;/p>
&lt;h3 id="伺服端">伺服端&lt;/h3>
&lt;p>這部分算是我比較熟悉的部分，目前工作大部分時間都是使用 Ruby 來開發，所以把它跑起來算是相對客戶端輕鬆的。&lt;/p>
&lt;p>先看 &lt;code>Gemfile&lt;/code> 這個檔案，我們可以大概知道他使用了哪些技術（從目錄結構上可以馬上判斷出不是採用 Ruby on Rails 開發的）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">source&lt;/span> &lt;span class="ss">:rubygems&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;dalli&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;~&amp;gt;2.0.2&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;eventmachine&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;mysql2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;0.3.7&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;oauth&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;0.4.5&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;RocketAMF&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;0.2.1&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;rspec&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;2.11.0&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;sequel&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;4.0&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;RubyInline&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;3.12.4&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;sqlite3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;~&amp;gt;1.3.11&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;daemons&amp;#39;&lt;/span>
&lt;span class="n">gem&lt;/span> &lt;span class="s1">&amp;#39;gmp&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>寫法上來說很明顯是相對舊版本的 Ruby 所開發的，不過 Ruby 核心團隊對於「向下相容性」的堅持，我們使用較新的 Ruby 2.6.3 都還是能正常使用。&lt;/p>
&lt;p>裡面大概可以看出來使用了 Memcached / MySQL / OAuth 等技術，實際上用的第三方套件不多，這點我個人就蠻佩服日本的遊戲開發者，他們在這類技術上都是很扎實的一點一點製作出來。&lt;/p>
&lt;blockquote>
&lt;p>不過以比較商業的角度上來看，善用套件是很有用的，有不少日本手遊公司都是使用 Ruby on Rails 來開發。不過礙於遊戲相關的程式碼在技術圈是相對封閉的，所以很多時候都會依賴很多電腦科學的基礎知識來架構出遊戲。&lt;/p>
&lt;/blockquote>
&lt;p>因為是快速導讀，所以就不贅述這些套件的應用。從 &lt;code>Gemfile&lt;/code> 我們是可以大致上看出來使用的資料庫、優化技術跟串些的應用（Ex. OAuth 大概是跟當年跑在 Facebook 上用來串接的機制有關）&lt;/p>
&lt;p>接下來看一下目錄結構&lt;/p>
&lt;ul>
&lt;li>&lt;code>bin/&lt;/code> - 各種啟動伺服器的指令&lt;/li>
&lt;li>&lt;code>data/&lt;/code> - 遊戲的資料（伺服器的紀錄檔也會在這）&lt;/li>
&lt;li>&lt;code>db/&lt;/code> - 空的，根據原始碼的說明使用 &lt;code>csv&lt;/code> 模式當資料庫會放在這&lt;/li>
&lt;li>&lt;code>lib/&lt;/code> - 空的，專案中有一些計算是利用 C 輔助的，他會在執行時產生一些 C 相關的檔案置入&lt;/li>
&lt;li>&lt;code>script/&lt;/code> - 一些輔助腳本，像是匯入遊戲資料（Ex. 道具、角色素質等）&lt;/li>
&lt;li>&lt;code>src/&lt;/code> - 伺服器的本體&lt;/li>
&lt;/ul>
&lt;p>一般來說我會先找可以描述整個資料結構的目錄看，所以先稍微看了一下 &lt;code>data/&lt;/code> 和 &lt;code>src/model&lt;/code> 兩個目錄，裡面大致上就是描述了 Unlight 這款遊戲是怎樣做數值設定跟紀錄玩家的操作，根據我工作的經驗設計的好壞其實很大的影響整個系統的穩定和維護，另外最重要的是這是最快可以大致瞭解作者想法的方式。&lt;/p>
&lt;h2 id="目錄bin">目錄：bin/&lt;/h2>
&lt;p>裡面看起來很多檔案，但是不要被嚇到，大部分的檔案機制都是類似的。會這樣設定可能是方便在不同伺服器上面開設不同的服務，或者做簡易的分流用的。&lt;/p>
&lt;blockquote>
&lt;p>印象中當時停止營運的時候我有用當時負責的客戶（手遊公司）的營運花費，用等比例的方式推算 Unlight 的遊戲規模，大概推算是一個月營運大概會是花費 100 ~ 200 萬台幣左右，這個目錄下大概有 100 個檔案左右，假設每個檔案都是獨立一台伺服器我們用 &lt;a href="https://aws.amazon.com/tw/">Amazon AWS&lt;/a> 上面的雲端伺服器數字非常不精確的推算一下，用一般正式伺服器可能會選用的 m 系列機器的 m4.large 規格，大概會花到 20 萬左用（&lt;a href="https://calculator.s3.amazonaws.com/index.html?nc2=h_ql_pr#r=NRT&amp;amp;s=EC2&amp;amp;key=files/calc-8d0494a1ee2ae3d0f1a990397358bd3f1e581769&amp;amp;v=ver20190731tO">試算&lt;/a>）這可能還不包過資料庫、當時的伺服器單價相對高等問題，加上人事跟營運成本，一個月營運的花費確實有機會接近到 100 萬台幣。&lt;/p>
&lt;/blockquote>
&lt;p>那麼這些檔案內容是怎樣的，我們用登入伺服器（&lt;code>authserver&lt;/code>）這個檔案看看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="ch">#!/usr/local/bin/ruby&lt;/span>
&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;rubygems&amp;#39;&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;daemons&amp;#39;&lt;/span>
&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ss">:app_name&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;ul_authserver&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">:dir_mode&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="ss">:normal&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">:dir&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;pids&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ss">:backtrace&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kp">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># :monitor =&amp;gt; true,&lt;/span>
&lt;span class="ss">:log_output&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kp">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expand_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">__FILE__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gsub!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/bin/authserver&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;/src&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="no">Dir&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expand_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">__FILE__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gsub!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;authserver&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="no">Daemons&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/authentication.rb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基本上結構的規則都是差不多的，提供這個伺服器的基本設定，然後用 &lt;code>Daemons&lt;/code> 這個套件把伺服器啟動（常駐執行）而執行的檔案就是裡面指定的像是 &lt;code>authentication.rb&lt;/code> 這些檔案，等一下我們會再討論 &lt;code>src/&lt;/code> 目錄時一起看。&lt;/p>
&lt;h2 id="目錄script">目錄：script/&lt;/h2>
&lt;p>我們把非程式的部分跳過，因為那些都是一些數據資料，雖然人類直接閱讀會有點吃力。但是習慣之後還是能閱讀的部分，大多數遊戲公司的企劃應該都有能力閱讀和修改。&lt;/p>
&lt;p>這部分主要是維運需要的的腳本，因為比較雜亂就不特別討論，我們稍微看一下 &lt;code>import_csv_data.rb&lt;/code> 這個檔案，假設我們想要將遊戲設定起來，就需要將 &lt;code>data/&lt;/code> 目錄下面的遊戲資料匯入，就會需要呼叫這個檔案。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">if&lt;/span> &lt;span class="sb">`pwd`&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chomp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;/home/unlight/svn/trunk/app/server&amp;#34;&lt;/span>
&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;このスクリプトはここで使用してはいけません&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">OptionParser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>
&lt;span class="vg">$VER_OVERWRITE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kp">false&lt;/span>
&lt;span class="vg">$VER_NUMBERING&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kp">false&lt;/span>
&lt;span class="vg">$VER_RESTART&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kp">false&lt;/span>
&lt;span class="n">over_text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;（ドロップモード：すべて捨てて作り直します。時間がかかりますが正確です ）&amp;#34;&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-n&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;--numbering&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="vg">$VER_NUMBERING&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kp">true&lt;/span>
&lt;span class="n">over_text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;（ナンバリングモード：数値で指定されたファイルのみ更新します）&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;-r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;--restart&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="vg">$VER_RESTART&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kp">true&lt;/span>
&lt;span class="n">over_text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;（再開モード：数値で指定されたファイル以降を更新します）&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">opt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">ARGV&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vg">$VER_NUMBERING&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="vg">$VER_RESTART&lt;/span>
&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;Option n, r は同時に指定出来ません。&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="vg">$arg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">ARGV&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shift&lt;/span>
&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;serverに存在するcsvdataでインポートしますか (sb)&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">over_text&lt;/span>
&lt;span class="vg">$arg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">gets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chomp&lt;/span>
&lt;span class="vi">@m_set&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;span class="no">LANGUAGE_SET&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/_tcn$|_en$|_scn$|_kr$|_fr$|_ina$|_thai$/&lt;/span>
&lt;span class="no">MESSAGES&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;sb&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;SandBox&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="no">DATABASES&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;192.168.1.14:5001&amp;#34;&lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="s2">&amp;#34;SandBox&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面這段主要只是一些讀取匯入設定相關的資訊，我在試跑的時候遇到的問題其實是說明跟描述都不太明確，反而沒有搞懂操作，之後詳細閱讀之後再細看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">def&lt;/span> &lt;span class="nf">csv_import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">local&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="no">Find&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./data/csv&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="k">next&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">directory?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這段就是匯入的本體，會將檔案找出來後匯入，基本上匯入程式大多大同小異就是了⋯⋯&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>script/&lt;/code> 目錄下的東西大多很雜，其實也不會試運行伺服器馬上會需要的部分，實際上可以先略過，除了匯入資料的部分。不過經過測試發現過程中會呼叫某個方法，而這個方法目前是找不到的，這也表示有可能除了匯入會失敗之外，遊戲運行在某些情況下也會失敗。&lt;/p>
&lt;/blockquote>
&lt;h2 id="目錄src">目錄：src/&lt;/h2>
&lt;p>這個目錄下還有不少資料夾，我們可以稍微看一下&lt;/p>
&lt;ul>
&lt;li>&lt;code>constants/&lt;/code> - 遊戲中的常數，也就是一些固定的數值（Ex. 新手任務的編號）&lt;/li>
&lt;li>&lt;code>controller/&lt;/code> - 遊戲的控制器，目前還不確定用途，不過主要是跟玩家操作有關（Ex. 發送聊天訊息）&lt;/li>
&lt;li>&lt;code>model/&lt;/code> - 遊戲資料的處理程式，用來讀取玩家、怪物等資料，以及數值的更新（Ex. 等級提升）&lt;/li>
&lt;li>&lt;code>net/&lt;/code> - 伺服器跟客戶端溝通的機制，基本上只是處理一段加密的操作&lt;/li>
&lt;li>&lt;code>protocol/&lt;/code> - 伺服器的本體，裡面定義了各種類型的伺服器 Ex. 登入伺服器、戰鬥伺服器等&lt;/li>
&lt;li>&lt;code>rule/&lt;/code> - 遊戲的規則，基本上是描述一些像是 AI、抽卡的機制&lt;/li>
&lt;/ul>
&lt;p>基本上蠻多檔案內容都蠻多的，這邊只簡單介紹伺服器啟動的部分（目前有讀的部分）&lt;/p>
&lt;p>基本上不管是哪種伺服器，都會繼承 &lt;code>Unlight&lt;/code> 這個物件（&lt;code>src/protocol/unlight.rb&lt;/code>）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">module&lt;/span> &lt;span class="nn">Unlight&lt;/span>
&lt;span class="k">module&lt;/span> &lt;span class="nn">Protocol&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ULServer&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="no">EventMachine&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Connection&lt;/span>
&lt;span class="c1"># これ以上前に反応していなかった切る&lt;/span>
&lt;span class="no">CONNECT_LIVE_SEC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3600&lt;/span> &lt;span class="c1"># 1時間&lt;/span>
&lt;span class="c1"># 何回のコマンドエラーで切断するか&lt;/span>
&lt;span class="no">COMMAND_ERROR_MAX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">#&lt;/span>
&lt;span class="kp">attr_accessor&lt;/span> &lt;span class="ss">:player&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="ss">:last_connect&lt;/span>
&lt;span class="c1"># クラスの初期化&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Unlight 使用的是當時 Ruby 用來做一些連線機制常用的 &lt;code>EventMachine&lt;/code> 套件，所以會直接繼承 &lt;code>EventMachine::Connection&lt;/code> 實作，基本上是為了借用 EventMachine 的一些機制。&lt;/p>
&lt;blockquote>
&lt;p>因為筆者本身沒有使用 EventMachine 所以無法太詳細描述，不過以當時的時間點來看，使用 EventMachine 是一個很不錯的選擇，因為能負擔的玩家數量是遠比其他方式更高，而且也更好用。&lt;/p>
&lt;/blockquote>
&lt;p>在 &lt;code>unlight.rb&lt;/code> 檔案中會看到這段&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby"> &lt;span class="c1"># データの受信&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">receive_data&lt;/span> &lt;span class="n">data&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data2command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@command_list&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="k">unless&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty?&lt;/span>
&lt;span class="n">do_command&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>簡單說不管是哪種伺服器，在收到資料後會做一個「解碼」的動作將客戶端傳輸的指令（Command）轉換成像是 &lt;code>[:register, 'xxx@example.com', 'Aotoki']&lt;/code> 的格式，再由不同伺服器（Ex. AuthServer）來處理。&lt;/p>
&lt;p>我們在看到 &lt;code>src/&lt;/code> 目錄下的這些 Ruby 檔案，其實大多是將前面提到的 &lt;code>EventMachine&lt;/code> 啟動的部分（也就是前面 &lt;code>bin/&lt;/code> 呼叫的檔案）以「大廳（Lobby）」這個檔案為例子（&lt;code>src/lobby.rb&lt;/code>）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">module&lt;/span> &lt;span class="nn">Unlight&lt;/span>
&lt;span class="kp">include&lt;/span> &lt;span class="no">Protocol&lt;/span>
&lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">12002&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_descriptor_table_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># ソケットMaxを設定&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">epoll&lt;/span> &lt;span class="c1"># Epollを使用するように設定。&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="no">LobbyServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setup&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_server&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">SV_PORT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LobbyServer&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LobbyServer Start: port[&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="no">SV_PORT&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># タイマの制度を上げる&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_quantum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 1分に一回でソケットの生き死にをチェック&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">PeriodicTimer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">proc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">begin&lt;/span>
&lt;span class="no">LobbyServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">check_connection&lt;/span>
&lt;span class="k">rescue&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="n">e&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LobbyServer: [check_connection:] fatal error &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">backtrace&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="no">DB_CONNECT_CHECK&lt;/span>
&lt;span class="c1"># 7時間に一回でDBとの接続をチェック&lt;/span>
&lt;span class="no">EM&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">PeriodicTimer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">proc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">begin&lt;/span>
&lt;span class="no">LobbyServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">check_db_connection&lt;/span>
&lt;span class="k">rescue&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="n">e&lt;/span>
&lt;span class="no">SERVER_LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LobbyServer: [check_db_connection:] fatal error &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">backtrace&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這段就是將 EventMachine 跑起來，然後根據伺服器類型（Ex. LobbyServer）去做呼叫，並且執行對應的任務。&lt;/p>
&lt;p>最後我們看一下 &lt;code>src/net&lt;/code> 下面的檔案，裡面用了一個叫做 &lt;a href="http://srp.stanford.edu/design.html">SRP&lt;/a> 的演算法實作，他會用在登入伺服器的時候加密玩家的登入密碼，而其他一般指令則會用 &lt;code>crypt.rb&lt;/code> 這個檔案做編碼處理，如果想要保護伺服器的互動避免外掛或者惡意玩家，可以嘗試改變這個檔案的計算機制。&lt;/p>
&lt;h2 id="運作">運作&lt;/h2>
&lt;p>大致上看過一輪伺服器跟客戶端之後，我們來總結一下整個伺服器的運作。&lt;/p>
&lt;ul>
&lt;li>&lt;code>bin/authserver&lt;/code> =&amp;gt; 啟動伺服器，呼叫 &lt;code>authentication.rb&lt;/code> 等待連線&lt;/li>
&lt;li>&lt;code>authentication.rb&lt;/code> =&amp;gt; 等待連線，有資料的話透過 &lt;code>AuthServer&lt;/code> 處理&lt;/li>
&lt;li>&lt;code>AuthServer&lt;/code> =&amp;gt; 收到操作後基於指令轉換為方法（一般定義在 Controller 裡面）&lt;/li>
&lt;li>Controller =&amp;gt; 根據指令執行動作，可能會呼叫 Model / Rule 協助處理&lt;/li>
&lt;li>&lt;code>AuthServer&lt;/code> =&amp;gt; 發送結果給玩家&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>AuthServer&lt;/code> 因為指令比較少所以沒有定義 Controller 但是像是 LobbyServer 之類的就有定義&lt;/p>
&lt;/blockquote>
&lt;p>到此為止我們大致上對伺服端有一個概念，另外值得一提的是前面在看 &lt;code>Gemfile&lt;/code> 看到的 &lt;code>RocketAMF&lt;/code> 套件，似乎可以直接轉換 Ruby 的資料變成 Flash 可以讀取的格式，不過目前還暫時看不出來在哪裡有被使用，也可能是透過指令帶入給客戶端值些呼叫（類似伺服器的行為）&lt;/p>
&lt;h2 id="後記">後記&lt;/h2>
&lt;p>雖然是很粗略的掃過一次原始碼，不過大致上對整個伺服器的運作已經有一個大致上的概念。回到現實面來看，以目前公開的資訊想要用現有的檔案去重新建置一個 Unlight 伺服器大概是蠻困難的，但是如果基於目前已知的程式跟運作，重新開發過一套有類似或者改進的系統，應該已經是有可能的。&lt;/p>
&lt;p>跟單機遊戲不同的地方是連線遊戲為了保證公平性，需要將遊戲的規則判定都坐在伺服器上面，即使目前看起來不管是伺服端還是客戶端都有缺少部分檔案，但是整體上來說伺服器已經算是最接近完整的部分，至少大部分遊戲的邏輯跟機制都能夠被找到。&lt;/p>
&lt;p>九月左右還有鐵人賽，最近應該會評估一下 30 天左右要寫什麼主題，也許基於 Unlight 的伺服器來討論開發遊戲伺服器會是個不錯的題目。&lt;/p></content></item><item><title>你大概沒機會遇到的 Bug - 跟 Ruby Committer 聊 Enumerator 跟 Fiber</title><link>https://blog.frost.tw/posts/2019/07/30/Talk-with-the-Ruby-Committer-about-Enumerator-and-Fiber-the-bug-you-may-never-touch/</link><category>
RubyConfTW,Bug,Ruby,Enumerator,Fiber</category><pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/30/Talk-with-the-Ruby-Committer-about-Enumerator-and-Fiber-the-bug-you-may-never-touch/</guid><description>&lt;p>今年 &lt;a href="https://2019.rubyconf.tw/">RubyConf Taiwan&lt;/a> 嘗試辦了 After Hack 這個活動，也因此有機會可以跟 Ruby 語言的 Commiter 聊一些有趣的問題。&lt;/p>
&lt;p>當天我的預定是把活動這幾天寫的 Gem 認真的補完測試，不過沒想到還剩下一個多小時就做完了，那就順便來思考一下 &lt;a href="https://tamashii.io">Tamashii&lt;/a> 專案能怎樣去改進，在今年的演講中大家應該都對 Fiber 有一個認識，而這個也許是一個不錯的選項。&lt;/p>
&lt;p>所以就馬上去看了一下講者（Samuel）的 &lt;a href="https://github.com/socketry/async">Async&lt;/a> 這個 Gem 做了些什麼事情，因為剛講完關於 Enumerator 的演講，所以自然地看到了一段引起我興趣的說明。&lt;/p>
&lt;blockquote>
&lt;p>Due to limitations within Ruby and the nature of this library, it is not possible to use to_enum on methods which invoke asynchronous behavior. We hope to fix this issue in the future.&lt;/p>
&lt;/blockquote>
&lt;p>既然作者本人就在現場，而且 Issue 的內容也看不太出來發生什麼問題，那麼就直接問吧！&lt;/p></description><content>&lt;p>今年 &lt;a href="https://2019.rubyconf.tw/">RubyConf Taiwan&lt;/a> 嘗試辦了 After Hack 這個活動，也因此有機會可以跟 Ruby 語言的 Commiter 聊一些有趣的問題。&lt;/p>
&lt;p>當天我的預定是把活動這幾天寫的 Gem 認真的補完測試，不過沒想到還剩下一個多小時就做完了，那就順便來思考一下 &lt;a href="https://tamashii.io">Tamashii&lt;/a> 專案能怎樣去改進，在今年的演講中大家應該都對 Fiber 有一個認識，而這個也許是一個不錯的選項。&lt;/p>
&lt;p>所以就馬上去看了一下講者（Samuel）的 &lt;a href="https://github.com/socketry/async">Async&lt;/a> 這個 Gem 做了些什麼事情，因為剛講完關於 Enumerator 的演講，所以自然地看到了一段引起我興趣的說明。&lt;/p>
&lt;blockquote>
&lt;p>Due to limitations within Ruby and the nature of this library, it is not possible to use to_enum on methods which invoke asynchronous behavior. We hope to fix this issue in the future.&lt;/p>
&lt;/blockquote>
&lt;p>既然作者本人就在現場，而且 Issue 的內容也看不太出來發生什麼問題，那麼就直接問吧！&lt;/p>
&lt;h2 id="關於-fiber">關於 Fiber&lt;/h2>
&lt;p>詳細的部分可以參考之前寫過的 &lt;a href="https://blog.frost.tw/posts/2018/06/26/Talk-about-ruby-s-fiber-Part-1/">Fiber 簡介&lt;/a> 以下只做簡單的介紹方便跟上這篇文章的內容，另外因為這幾年很多語言都在努力的更新，雖然 Ruby 是一個相容性非常好的語言，但是還是有不少變化是隱含的。&lt;/p>
&lt;blockquote>
&lt;p>以文章中的 4K 堆疊為例，今年另一位講者（&lt;a href="https://github.com/dsh0416">Delton Ding&lt;/a>）在 &lt;a href="https://twitter.com/DeltonDing/status/1155853101586214918">Twitter&lt;/a> 提醒我這個特性在 2010 年和 2017 年都修改過，在 Ruby 2.5 之後的版本是不會產生，而改用指標的方式來處理。&lt;/p>
&lt;/blockquote>
&lt;p>Fiber 機制用很簡單的方式說明，就是我們可以在單一的 Thread 下面，再做一次切割來切換執行順序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="c1"># A: 做某些事情&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="c1"># I/O Blocking 先跳出給其他人做事&lt;/span>
&lt;span class="c1"># B: 繼續做事情&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="c1"># 執行 Fiber (A 區塊）&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span>
&lt;span class="c1"># 繼續執行（B 區塊）&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以前我們會需要用切分 Thread 的方式來對應 I/O Blocking 的情況，現在我們可以用一些 Non-Blocking 的操作來判斷是否有賭塞現象，進而控制執行的流程。&lt;/p>
&lt;h2 id="enumerator-中的-fiber">Enumerator 中的 Fiber&lt;/h2>
&lt;p>今年我自己的演講主要是著重在 Enumerator 的生成與運作上，所以討論了 Ruby 能用哪些技巧去做到讓 &lt;code>yield&lt;/code> 行為暫時不發生，以及讓某些動作能夠被「延遲（&lt;code>#lazy&lt;/code>）」執行。&lt;/p>
&lt;p>當我跟 Samuel 聊到這個 Enumerator 的 Bug 時候，我問了一句「Which ruby version this will happen?」得到的是「All versions」的解答，然後我馬上就知道這是我「沒有讀」的那一個部分，也就是關於 Enumerator 如何去迭代數值的部分。&lt;/p>
&lt;blockquote>
&lt;p>寫這篇文章的時候我再去看了一次 &lt;code>enumerator.c&lt;/code> 裡面有出現 Fiber 的區段，基本上應該是有使用到 &lt;code>#next&lt;/code> 的情況會發生，如果是一些 &lt;code>#zip&lt;/code> 和 &lt;code>#map&lt;/code> 的情況，因為不一定會去呼叫到 &lt;code>#next&lt;/code> 就不會產生問題。&lt;/p>
&lt;/blockquote>
&lt;p>那麼，到底是在哪裡產生了 Fiber 呢？&lt;/p>
&lt;p>&lt;code>enumerator.c&lt;/code>（Ruby 2.6.2）裡面只有一個 &lt;code>fiber_new&lt;/code> 我們照呼叫的順序去來追蹤，首先會看到 &lt;code>enumerator_next&lt;/code> 這個實作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">enumerator_next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">vs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enumerator_next_values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ary2sv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這邊會把 &lt;code>enumerator_next_values&lt;/code> 回傳的數值找出第一個（如果是陣列）或者直接回傳，基本上就是把下一個元素找出來。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">enumerator_next_values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">enumerator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enumerator_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">vs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lookahead&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">vs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lookahead&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lookahead&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">vs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">get_next_values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後這邊會拿當下作用的 Enumerator 來去找接下來會出現的數值，所以我們再繼續往下看到 &lt;code>get_next_values&lt;/code> 這個方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">get_next_values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">enumerator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_exc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">rb_exc_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_exc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_fiber_current&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fib&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">rb_fiber_alive_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">next_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">vs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_fiber_resume&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">curr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_exc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">dst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qnil&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lookahead&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">feedvalue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">rb_exc_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_exc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">vs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>到了這段，我們終於發現了 Fiber 的蹤跡，稍微來看一下發生了哪些事情。&lt;/p>
&lt;ol>
&lt;li>呼叫 &lt;code>Fiber.current&lt;/code> 取得當下作用中的 Fiber&lt;/li>
&lt;li>&lt;strong>如果 Enumerator 的 Fiber 不存在或者執行完畢&lt;/strong>，就做 &lt;code>next_init&lt;/code> 這個動作&lt;/li>
&lt;li>對 Enumerator 的 Fiber 呼叫 &lt;code>#resume&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>因為 &lt;code>#resume&lt;/code> 的回傳值是 &lt;code>Fiber.yield&lt;/code> 傳入的參數，所以我們只要再找到 Enumerator 的 Fiber 就能了解是怎樣運作的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span>
&lt;span class="nf">next_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">enumerator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_fiber_current&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">dst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_fiber_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lookahead&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回到 &lt;code>next_init&lt;/code> 這段，我們會發現 Ruby 將 &lt;code>next_i&lt;/code> 的方法當作是 Fiber 執行的區段來呼叫（就是我們 Fiber.new 給的 Block）&lt;/p>
&lt;p>繼續往下追會看到 &lt;code>next_i&lt;/code> 和 &lt;code>next_ii&lt;/code> 兩個方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">next_ii&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RB_BLOCK_CALL_FUNC_ARGLIST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">enumerator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enumerator_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">feedvalue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qnil&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_ary_new4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">rb_fiber_yield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">feedvalue&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">feedvalue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">feedvalue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">feedvalue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qundef&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">feedvalue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">next_i&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">enumerator&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enumerator_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">nil&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Qnil&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_block_call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">id_each&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_ii&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_exc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rb_exc_new2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb_eStopIteration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;iteration reached an end&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">rb_ivar_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">stop_exc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">id_result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">rb_fiber_yield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">nil&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先看 &lt;code>next_i&lt;/code> 這個方法，他會去呼叫我們定義的 Enumerator 的 &lt;code>#each&lt;/code> 方法來做迭代，跟我們對 Enumerator 的理解上是一致的，而迭代的行為（給 &lt;code>#each&lt;/code> 的 Block）就是 &lt;code>next_ii&lt;/code> 本身。
繼續看到 &lt;code>next_ii&lt;/code> 這個方法，可以理解為他就是單純的呼叫 &lt;code>Fiber.yield&lt;/code> 而已，所以我們可以把這段轉換成下面的 Ruby 來理解。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">each&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="n">item&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是說，每次我們用 &lt;code>#next&lt;/code> 的時候，Ruby 會產生一個 Fiber 然後每執行一次迭代就用 &lt;code>Fiber.yield&lt;/code> 跳出來，直到都沒有任何元素可以被迭代後，再產生 &lt;code>StopIteration&lt;/code> 的 Exception 同時做最後一次的 &lt;code>Fiber.yield&lt;/code>&lt;/p>
&lt;p>我們可以用 Ruby簡單模擬這個行為&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># frozen_string_literal: true&lt;/span>
&lt;span class="nb">require&lt;/span> &lt;span class="s1">&amp;#39;fiber&amp;#39;&lt;/span>
&lt;span class="c1"># :nodoc:&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">FiberNext&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="vi">@items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">items&lt;/span>
&lt;span class="vi">@fiber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">create_fiber&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">next&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">unless&lt;/span> &lt;span class="vi">@fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">alive?&lt;/span>
&lt;span class="vi">@fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kp">private&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">create_fiber&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="vi">@items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">each&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="n">item&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">enum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">FiberNext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">apple&lt;/span> &lt;span class="n">water&lt;/span> &lt;span class="n">flashlight&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mi">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;Next: &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>讀到這裡，不得不感嘆一下 Ruby Commiter 們用如此漂亮的方式設計了一個機能，我們都知道 Enumerator 對應的 &lt;code>#each&lt;/code> 裡面只要給了 &lt;code>yield&lt;/code> 基本上就是一個無法停止的狀態，他會不斷呼叫我們給的 Block 直到沒有 &lt;code>yield&lt;/code> 再被呼叫，所以在 Ruby 裡面這算是一種「迭代」&lt;/p>
&lt;p>但是想要控制迭代的進度，用步進的方式進行呢？如果採用一般的方式可能要做很多動作才能達成，此時 Fiber 這種可以暫停某個位置的執行跳去做其他任務，再跳回去的機制就變得非常實用。以應用案例來說，我想這大概也是非常漂亮的一個學習參考，以我過去對 Fiber 的理解是沒辦法想到這樣的使用方式的。&lt;/p>
&lt;h2 id="被少考慮的情境">被少考慮的情境&lt;/h2>
&lt;p>前情提要終於結束了，回到我們的主題，那個你不會遇到的 Bug 到底是什麼？&lt;/p>
&lt;p>在 Samuel 對 Ruby 的 &lt;a href="https://github.com/ruby/ruby/pull/2002#issuecomment-515749562">PR&lt;/a> 中你可以看到一段使用 &lt;code>#to_enum&lt;/code> 和 &lt;code>Fiber&lt;/code> 的程式碼，這段是當天再向我解釋時給的一個範例。&lt;/p>
&lt;p>我稍微整理一下，讓大家比較好看到問題&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">def&lt;/span> &lt;span class="nf">items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="ss">:apple&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="c1"># 我想在這跳出我的 Fiber&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="ss">:water&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="ss">:flashlight&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">enum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_enum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:items&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="mi">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;Next: &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>執行的結果卻是這樣的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>elct9620&lt;span class="o">]&lt;/span> Desktop % ruby fiber.rb
Next: apple
Next:
Next: water
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>照正常的迭代器運作，不應該是把 &lt;code>:apple&lt;/code>, &lt;code>:water&lt;/code> 和 &lt;code>:flashlight&lt;/code> 印出來，為什麼多了一個 &lt;code>nil&lt;/code> 的數值呢？&lt;/p>
&lt;p>如果我們把 &lt;code>Fiber.yield&lt;/code> 改成 &lt;code>Fiber.yield :oops&lt;/code> 執行看看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="o">[&lt;/span>&lt;span class="n">elct9620&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="no">Desktop&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">ruby&lt;/span> &lt;span class="n">fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rb&lt;/span>
&lt;span class="ss">Next&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">apple&lt;/span>
&lt;span class="ss">Next&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">oops&lt;/span>
&lt;span class="ss">Next&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">water&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>問題就出在 &lt;code>Fiber.yield&lt;/code> 竟然變得跟 &lt;code>yield&lt;/code> 一樣，這是怎麼一回事？&lt;/p>
&lt;p>回想一下前面介紹 Enumerator 在做 &lt;code>#next&lt;/code> 的時候，是不是會產生一個新的 Fiber 然後用那個 Fiber 去做事情？&lt;/p>
&lt;p>我們把前面那段產生 &lt;code>#next&lt;/code> 的 Fiber 區段找出來，然後代入 &lt;code>#items&lt;/code> 方法，會變成怎樣呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="c1"># ...&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="c1"># @items.each do |item|&lt;/span>
&lt;span class="n">items&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="c1"># 第一次 =&amp;gt; item = (yield :apple)&lt;/span>
&lt;span class="c1"># 第一次 =&amp;gt; Fiber.yield :oops&lt;/span>
&lt;span class="c1"># 第二次 =&amp;gt; item = (yield :water)&lt;/span>
&lt;span class="c1"># 第三次 =&amp;gt; item = (yield :flashlight)&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="n">item&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大家有沒有發現，我們在第一次到第二次迭代的時候，被偷做了一次 &lt;code>Fiber.yield&lt;/code> 然後他就跑回去變成 &lt;code>#resume&lt;/code> 的回傳值，然後 &lt;code>#next&lt;/code> 行為的次數就大亂了，歸咎原因在於他在執行的時候被 Ruby 判斷為「屬於 Enumerator 的 Fiber」&lt;/p>
&lt;p>所以如果我們修改成像下面這樣執行，反而就不會出問題&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">def&lt;/span> &lt;span class="nf">items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="ss">:apple&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="c1"># 我想在這跳出我的 Fiber&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="ss">:water&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="ss">:flashlight&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">enum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to_enum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:items&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">items&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">|&lt;/span>
&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;Next: &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span> &lt;span class="c1"># 因為被正確 `Fiber.yield` 所以要再做一次讓他能繼續&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為沒有使用 &lt;code>#next&lt;/code> 所以不會產生一個 Fiber 也就不會有被判斷錯誤的問題。&lt;/p>
&lt;h2 id="解決方案與-fiber-的切換機制">解決方案與 Fiber 的切換機制&lt;/h2>
&lt;p>目前我們看到的 PR 算是一個暫時性的解法，Samuel 告訴我這跟目前 Fiber 的設計有關係，所以只能先處理掉這個問題（大概會是 2.7 or 2.8 之類的會好）目前 PR 上已經是另一個版本，也就是最後展示給我會動的版本。中間也還有使用像是 &lt;code>Fiber.transfer&lt;/code> 之類的方式做切換，就能指定應該要跳回哪一個 Fiber 上。&lt;/p>
&lt;p>不過 Samuel 告訴我的想法我還不太清楚他想表達的是哪一個，不過只能說目前大致上有一個解決方法可以用。&lt;/p>
&lt;ol>
&lt;li>Enumerator 的 Fiber 要能跟普通的 Fiber 區分開來&lt;/li>
&lt;li>Fiber 要加入一些類似 Call Stack 的機制，用來判斷要跳回去的 Fiber（以解釋來說比較像是多存一個指標）&lt;/li>
&lt;/ol>
&lt;p>最後，我們來談談目前（Ruby 2.6.2）的 Fiber 切換機制是怎樣的。&lt;/p>
&lt;p>目前已知 &lt;code>Fiber.yield&lt;/code> &lt;code>Fiber.transfer&lt;/code> 和 &lt;code>#resume&lt;/code> 三個方法可以做切換，那麼來看一下這三個的實作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">rb_fiber_resume&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">fibval&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">rb_fiber_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fiber_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fibval&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">fiber_is_root_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">rb_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb_eFiberError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;double resume&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">transferred&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">rb_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb_eFiberError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;cannot resume transferred Fiber&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">fiber_switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">rb_fiber_yield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">fiber_switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">return_fiber&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">rb_fiber_transfer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VALUE&lt;/span> &lt;span class="n">fibval&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">fiber_switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fiber_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fibval&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>仔細一看，除了 &lt;code>#resume&lt;/code> 有做一些檢查去避免重複執行之外，基本上都是做同樣的事情。（也就是文章前面提到的在新版的 Fiber 已經採用指標切換）&lt;/p>
&lt;p>而 &lt;code>Fiber.yield&lt;/code> 和 &lt;code>Fiber.transfer&lt;/code> 的差異幾乎是只剩下「是否能指定 Fiber」這點，這也是 Samuel 有提到可能可以用 &lt;code>Fiber.transfer&lt;/code> 去解決 Enumerator 裡面的 Fiber 問題的原因，因為我們可以利用這樣的方式「手動指定」而不是交由 Ruby 自己判斷，那麼就能讓我們指定正確的 Fiber 去繼續執行。&lt;/p>
&lt;p>至於為什麼會選到錯誤的 Fiber 執行，我們看一下 &lt;code>fiber_siwtch&lt;/code> 和 &lt;code>return_fiber&lt;/code> 大概就可以猜到原因。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;span class="nf">fiber_switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb_fiber_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">is_resume&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">VALUE&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">rb_context_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cont&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fib&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cont&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">rb_thread_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">th&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GET_THREAD&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// 略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">is_resume&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">fib&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fiber_current&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 略
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="n">rb_fiber_t&lt;/span>&lt;span class="o">*&lt;/span>
&lt;span class="nf">return_fiber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">rb_fiber_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fib&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fiber_current&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">rb_fiber_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">rb_thread_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">th&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GET_THREAD&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">rb_fiber_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">root_fiber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">th&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">root_fiber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">VM_ASSERT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root_fiber&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">root_fiber&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">fib&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">rb_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb_eFiberError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;can&amp;#39;t yield from root fiber&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">root_fiber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">fib&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>簡單說當我們呼叫 &lt;code>#resume&lt;/code> 的時候，會把當下的 Fiber 標記成前一個 Fiber，而做 &lt;code>Fiber.yield&lt;/code> 的時候就會因為有紀錄，就把這個 Fiber 當作前一個目標做切換。&lt;/p>
&lt;p>過程大概像是這樣：&lt;/p>
&lt;ol>
&lt;li>Fiber.new （我們的）&lt;/li>
&lt;li>#resume （我們的）&lt;/li>
&lt;li>#next （產生 Enumerator 的 Fiber）&lt;/li>
&lt;li>Fiber.yield =&amp;gt; 找到的是 Enumerator 的 Fiber&lt;/li>
&lt;/ol>
&lt;p>所以在這中間，我們的 Fiber 已經不被我們自定義的迭代方法中的 &lt;code>Fiber.yield&lt;/code> 認識。&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>在 After Hack 回到家之後，才發現原來是被 Commiter 直接一對一教學了一個多小時，算是很不錯的經驗。大概也是因為克服了這類心理上的障礙，所以即使聽得蠻吃力的但還是能夠繼續嘗試，我想之後的活動大概不會有不敢用英文對話的困擾了吧！&lt;/p>
&lt;p>最大的收穫大概是有 Commiter 帶你看了一部分的原始碼，還有去理解這些國外的高手是怎樣思考問題的。至少以台灣人來說算是不錯的經驗，以比例來看台灣人不多的狀況下能遇到的高手是固定的但是如果有像是研討會這類活動，我們就有機會接觸到篩選出來的高手，把握機會跟這些人交流就能很快地學到新東西跟進步，畢竟算是短時間的讓台灣的高手比例上升吧 XD&lt;/p>
&lt;p>雖然會覺得能早點突破心理障礙就能更快接觸到，不過有時候很多知識還沒準備齊全（像是嘗試過 Fiber 和了解基本原理等等）也蠻難能問對問題，可以的話真的蠻需要平常多準備一些問題或者寫下來，才不會遇到機會都沒辦法問。&lt;/p>
&lt;blockquote>
&lt;p>不過我自己也沒有這個習慣，但是看起來還是要準備一點會比較好呢 XD&lt;/p>
&lt;/blockquote></content></item><item><title>RubyConf Taiwan 2019 會後感想、議程概覽</title><link>https://blog.frost.tw/posts/2019/07/29/My-experience-after-RubyConf-Taiwan-2019/</link><category>
RubyConfTW,Ruby,感想,心得</category><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/29/My-experience-after-RubyConf-Taiwan-2019/</guid><description>&lt;p>跟前幾年一樣基本上就是工作人員，這幾年參加研討會也都比較沒有在仔細聽了，所以大多是邊顧邊寫點程式。&lt;/p>
&lt;p>比較不一樣的大概是今年更累了，從週四下午場佈到 Pre Party 然後兩天的活動、Official Party 最後到今年嘗試的 After Hack 幾乎是四天左右的連續接力，每天早上醒來都要先懷疑自己是否能撐過這一天。&lt;/p></description><content>&lt;p>跟前幾年一樣基本上就是工作人員，這幾年參加研討會也都比較沒有在仔細聽了，所以大多是邊顧邊寫點程式。&lt;/p>
&lt;p>比較不一樣的大概是今年更累了，從週四下午場佈到 Pre Party 然後兩天的活動、Official Party 最後到今年嘗試的 After Hack 幾乎是四天左右的連續接力，每天早上醒來都要先懷疑自己是否能撐過這一天。&lt;/p>
&lt;p>基本上就跟之前差不多，照時間來看整個活動。&lt;/p>
&lt;h2 id="pre-party">Pre Party&lt;/h2>
&lt;p>今年是由 &lt;a href="https://piccollage.com/">PicCollage&lt;/a> 贊助 Pre Party 的活動，去到活動場地的時候很確定以前去過幾次，但是一直沒有想起來是到哪間公司。不過以前有一次的 RubyConf Taiwan 也是在這棟大樓的某間公司辦過 Party 的樣子。&lt;/p>
&lt;p>PicCollage 準備的食物真的好評，非常好吃。然後 Ruby 社群舉辦這種 Party 活動的重點是跟人交流，這場除了有抓新同事去跟 Matz 打個招呼之外，基本上就都還是講中文。蠻意外的是兩年前跟女人迷合作的聊天機器人講座來參加的人，都已經畢業變成 PicCollage 的員工，看起來我離學生時代越來越遠了⋯⋯&lt;/p>
&lt;p>第一天晚上基本上算是暖身，大概就是稍微閒聊，然後跟一些認識的朋友打個招呼就這樣結束了。&lt;/p>
&lt;h2 id="the-future-of-ruby">The Future of Ruby&lt;/h2>
&lt;p>這場因為早上狀況蠻多的所以沒有聽到太多，尤其是 &lt;a href="https://tamashii.io">Tamashii&lt;/a> 打卡機遇到了一些狀況，雖然都是很好排除的問題，不過大概也凸顯了過去一年都沒有維護的情況，幾乎都是平常沒有使用跟調整造成的問題。&lt;/p>
&lt;p>Matz 這幾年講的 Keynote 都偏向 Ruby 3 的目標跟方向，還有 Ruby Commiter 努力的成果。這次有投稿 &lt;a href="https://2019.rubyworld-conf.org">Ruby World Conference&lt;/a> 所以就看看能不能在十一月再聽一次。&lt;/p>
&lt;h2 id="rethinking-the-view-layer-with-components">Rethinking the View Layer with Components&lt;/h2>
&lt;p>這場因為&lt;a href="https://ryudo.tw/">慕凡&lt;/a>在今年 &lt;a href="https://rubykaigi.org/2019">RubyKaigi&lt;/a> 有跟我提過，所以大概是有一個概念的。今年感覺都沒有很集中，但是又感覺都大概懂，很微妙的狀態。&lt;/p>
&lt;p>簡單來說是在討論 Rails 在 View 層的實作，目前我們的測試都是仰賴 Feature 之類的去驗證畫面是否正常的。
這邊是將 View 分解成 Component（元件）的形式，將一些細碎的部分用 Ruby 來實作，有點類似 Decorator 的感覺，但更接近 React 的元件概念。&lt;/p>
&lt;p>利用這種方式我們就可以針對性地對 View 做單元測試，以後端來說算是很先進的想法。&lt;/p>
&lt;h2 id="ruby-with-types">Ruby with types&lt;/h2>
&lt;p>因為我在 1001 負責錄影，所以都是聽這間的。這場主要在討論對 Ruby 增加型別支援會是怎樣子的，雖然有考慮蠻多東西的。不過我覺得整體上跟 Stripe 提出的 &lt;a href="https://sorbet.org/">Sorbet&lt;/a> 比起來讓 Ruby 的語法整個變複雜難懂很多。反而是 Sorbet 這種有點選用類型的 DSL 能保有一定程度的相容性，又可以改善一些開發上的問題。&lt;/p>
&lt;blockquote>
&lt;p>不過 Sorbet 的難點可能會變成在一些 IoT 類型的應用要導入需要一些 Cross Compile 的處理，有可能會變成卡住的點。但是這方面又是 IoT 應用的一個尷尬的地方，很多地方都是需要利用 C Extension 去做才能盡可能的在 Ruby 裡面做事情。&lt;/p>
&lt;/blockquote>
&lt;h2 id="protect-your-copyrighted-ruby-code-in-distribution">Protect Your Copyrighted Ruby Code in Distribution&lt;/h2>
&lt;p>這場我沒怎麼跟上，反正後面就變成瑪力歐了，大致上是在講有什麼方式可以讓 Ruby 原始碼不會被直接的看到這件事情。&lt;/p>
&lt;p>不過我個人是認為這算是一種一體兩面的東西吧，尤其是現在很多應用都轉到 Web 和雲端的情況下，這種套裝軟體的模式是否是合適的。&lt;/p>
&lt;blockquote>
&lt;p>對一些商用的 Gem 可能會有影響，不過沒有聽很詳細所以就這樣吧 XD&lt;/p>
&lt;/blockquote>
&lt;h2 id="scalable-applications-with-jruby">Scalable Applications with JRuby&lt;/h2>
&lt;p>這場我沒在聽（印象薄弱）不過感覺有點是在介紹 JRuby 之後的一些發展吧，像是會要把 Fiber 之類的加進去支援。&lt;/p>
&lt;h2 id="road-to-white-mages">Road to white mages&lt;/h2>
&lt;p>到這個時候我已經開始在寫新的 Gem 了，這場主要是在講怎麼 Debug 程式。其實 Ruby 在這幾年針對 Debug 的輔助增加了不少特性，用來解決一些問題的時候是真的滿重要的技巧。&lt;/p>
&lt;p>比較簡單的就是現在大多數時候可以直接問 Ruby 某個 Method 是在哪裡定義的（尤其是接手專案又被魔改 Patch 的情況）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="nb">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:puts&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">source_location&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用法大概像這樣，這場介紹不少這類技巧，我大概要之後補看影片了 XD&lt;/p>
&lt;h2 id="the-journey-to-one-million">The Journey to One Million&lt;/h2>
&lt;p>聽說很精彩，因為我也沒在聽所以不太清楚發生什麼事情。不過講者 Samuel 大概是我今年講最多話的外國人了 XD&lt;/p>
&lt;p>主要是在講用 Ruby Fiber 機制開發的 Web Server 能達到處理 100 萬連線的過程，這幾天仔細看 Ruby Core 的 Mailing List 才發現是 Commiter 等級的超級大大。&lt;/p>
&lt;p>裡面有一段是一結束就被慕凡問，我後面跑去問了好幾個熟人也都不知道。&lt;/p>
&lt;p>Fiber 我當初會有興趣是因為他跟 Goroutine 很類似，所以我就跑去研究，去年到日本員工旅遊的時候有去參加 &lt;a href="https://asakusarb.doorkeeper.jp/">Asakusa.rb&lt;/a> 活動的時候有問了一下那邊的大大，然後再經過幾個月的整理歸納出一個大概的概念，才剛好能搞懂這段問題。&lt;/p>
&lt;blockquote>
&lt;p>去年是寫了好幾篇關於 &lt;a href="https://blog.frost.tw/posts/2018/06/26/Talk-about-ruby-s-fiber-Part-1/">Fiber&lt;/a> 的文章，不過現在回去看其實我的了解還是很不足的。&lt;/p>
&lt;/blockquote>
&lt;p>其實 Fiber 有一個問題是他要做 Context Switch 而做這件事情是有代價的，這種機制（在一個 Thread 內做切換）叫做 Coroutine（協程）在 C 或是 C++ 都能實作出來，而他的特色是會把 Context 保存下來，因為要這樣才能確保切換回去的時候還是在同一個狀態下繼續執行。&lt;/p>
&lt;p>而這件事情就會跟記憶體使用有關係，如果頻繁地切換就會有效能問題，也就是這樣切換的代價是否比開 Thread 還低。&lt;/p>
&lt;p>像是 Context 是怎麼保存的（Ruby 有一個 context 資料結構，他可能不是整個 Ruby 保存而是以 Block 為單位之類的）還有要在什麼時機點做切換，如果我們都沒有 I/O Blocking 的狀況下，切換是否有效益等等。&lt;/p>
&lt;p>簡單來說就是你使用 Fiber 跑出來的效果好不好，取決於你對 Process / Thread 這些東西的機制了解有多少，然後因為 Fiber 還很不成熟，所以你要自己做一些原本 OS 會幫你做的事情，才能讓 Fiber 跑得很快。&lt;/p>
&lt;h2 id="official-party">Official Party&lt;/h2>
&lt;p>今年感覺已經完全可以無視語言障礙，反正聽不懂就乾杯，所以可以比較順的跟外國人交流。&lt;/p>
&lt;p>比較特別的大概是以前的同時有的已經是掛 Director、主管或是跑去 Google 這種看起來就超厲害的公司工作，相比起來我好像蠻普通的（笑）&lt;/p>
&lt;p>這場有跟 Pixiv 的 CTO 稍微聊到天，不過有點可惜大概是對不太到點所以沒能聊起來，但這大概也跟我英文聽力還不夠好有關係，不然感覺應該都是能聊技術才對。&lt;/p>
&lt;p>另外就是有去找 Samuel 問關於 Fiber 的問題，因為之前做的 &lt;a href="https://blog.frost.tw/posts/2018/08/21/Does-the-Fiber-have-any-benefit-for-Ruby/">Fiber 改善 HTTP 效能&lt;/a> 測試，我後來做了很多檢驗都跟我預期的結果差異不少。&lt;/p>
&lt;p>這次綜合了前面的演講和我的猜測，算是獲得一個驗證就是之前少測試了一個情況，而這個情況應該才是 Fiber 表現最好的情況。之後有空大概還是得再次實作出來做一次測試，才能檢驗我的假設是否正確。&lt;/p>
&lt;h2 id="compacting-gc-for-mri">Compacting GC for MRI&lt;/h2>
&lt;p>網站上的講題不知道是不是當天的講題，因為這次很忙所以我只能在這個時間對口譯所以是完全沒聽到的。&lt;/p>
&lt;blockquote>
&lt;p>聽說有人在 Offical Party 跟大神許願，所以題目是早上突然改變的⋯⋯&lt;/p>
&lt;/blockquote>
&lt;h2 id="從-enumerator-看-ruby-的迭代器">從 Enumerator 看 Ruby 的迭代器&lt;/h2>
&lt;p>我的講題，其實當我完成簡報最後的部分（在前一天晚上）我就知道這場大概是要絕望了 XD&lt;/p>
&lt;p>整體上來說有一種 JavaScript 到處亂跳的 Callback 的感覺，所以我很難解釋，又沒有時間讓我思考怎樣畫圖才能動作，所以最後就是台下大家一臉呆滯。&lt;/p>
&lt;p>簡單說就是討論 Enumerator 是怎麼來的，然後 Enumerator::Generator 和 Enumerator::Yielder 為什麼要存在，以及 Enumerator::Lazy 是怎樣應運用跟運作，結束後還好有 &lt;a href="https://medium.com/@c9s">c9s&lt;/a> 大大提問，雖然只是確認一些細節，但是至少讓我感覺到安慰，畢竟後面這種混亂的狀態還有人能搞懂⋯⋯&lt;/p>
&lt;blockquote>
&lt;p>總而言之，之後我會想辦法再寫幾篇文章討論這個，然後盡可能的詳細一點。&lt;/p>
&lt;/blockquote>
&lt;h2 id="開拓者們建立鐵道的辛酸血淚史">開拓者們建立鐵道的辛酸血淚史&lt;/h2>
&lt;p>這場我沒有很認真聽，不過講者的公司真的是蠻拼的去嘗試這些東西。&lt;/p>
&lt;blockquote>
&lt;p>其實我覺得 Trailblazer 的問題是他的文件停留在 1.0 版，然後又蠻囉唆的，其實能適用的情況不一定是我們想像那麼美好。但是想法上是很不錯的，很值得學習。&lt;/p>
&lt;/blockquote>
&lt;h2 id="suit-up-for-frontend-and-backend-development">Suit up for frontend and backend development&lt;/h2>
&lt;p>大概是一場不用認真聽也知道在講什麼的演講，因為這就是目前我在做的專案辛酸血淚史的統合。雖然演講中沒有提到太多那個專案，不過裡面大部分的經驗跟技巧都是從那個專案學到很多教訓後整理出來的。&lt;/p>
&lt;p>主要就是在討論怎麼拆分 Form / Presenter 等物件，之前才寫一篇的&lt;a href="https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/">關於 Rails 中的 Form Object / Presenter 這些物件該怎麼用&lt;/a>系列文章其實也是在講這個，只是看的角度不太一樣，之後也會繼續的補完這系列。&lt;/p>
&lt;blockquote>
&lt;p>關於那個很崩潰的專案，給我的感覺是太久沒寫超糟的程式，所以回去反思到底是怎樣變糟的。雖然客戶方面的問題蠻多的，但是也反過來讓我把很多過去難以釐清跟不知道怎麼判斷的東西理解出來，算是把整個架構技能向上提升了一個等級吧 XD&lt;/p>
&lt;/blockquote>
&lt;h2 id="using-aws-lambda-with-ruby-on-a-large-scale-system">Using AWS Lambda with Ruby on a large-scale system&lt;/h2>
&lt;p>我沒認真聽，大致上就是在想說在 Lambda 上跑 Ruby 的故事。&lt;/p>
&lt;h2 id="whats-new-in-rails-6">What&amp;rsquo;s new in Rails 6?&lt;/h2>
&lt;p>一樣沒認真聽，雖然原本是想要認真聽一下 Rails 6 有什麼新功能的，不過跟前面那一場差不多都是我心流狀態，已經完全集中在寫 Gem 了 XD&lt;/p>
&lt;h2 id="virtual-machines-their-common-parts-and-what-makes-them-special">Virtual Machines: their common parts and what makes them special&lt;/h2>
&lt;p>最後一場，這場我就有比較專注一點在聽。我覺得厲害的地方是能把蠻難搞懂的概念，用很簡單的例子舉出來。不過蠻可惜的是這段知識因為前幾年的 RubyKaigi 有在討論 Register Based VM 應用在 Ruby 上的可能性，所以我算是有去補充了這塊知識，嚴格說起來就是演講的內容剛好都在我懂的範圍內。&lt;/p>
&lt;p>不過有拿 PHP7 改善效能後的設計來跟 Ruby 比較我覺得是很好的，因為我們大多只關注 Ruby 本身，但是也許其他語言有相同的問題需要解決，而且已經找到一個好方案如果沒有去看看的話，可能就浪費時間在某些沒有太大意義的地方上。&lt;/p>
&lt;h2 id="after-hack-day">After Hack Day&lt;/h2>
&lt;p>這場活動主要是希望讓台灣的開發者可以多嘗試開發一些東西，或者對 Ruby 相關專案做貢獻。另外就是藉由這次機會，讓大家可以跟國外的開發者做技術上的交流，很多都是在台灣不容易遇到的高手。&lt;/p>
&lt;p>上午主要是自我介紹跟簡單展示一下專案，雖然完全沒有照我跟 &lt;a href="https://medium.com/@st0012">Stan&lt;/a> 預想的情況進行，不過我覺得因為算是一個非正式活動，大家能交流跟互動是最好的。就結果上來說，我個人認為是還不錯的，大家都有稍微跟身邊的外國人互動、提問。&lt;/p>
&lt;p>因為 RubyConf Taiwan 兩天我都在寫 Gem 但是還沒有測試，所以我今天大部分時間都在把 &lt;a href="https://github.com/elct9620/hahamut">Hahamut&lt;/a> 這個 Gem 的測試補完，主要是發現如果設計得夠好，其實測試會很容易寫。這大概也驗證了我開始了解測試怎麼寫的時候，認為如果測試發現很難測，那就一定是設計上有問題要改進。&lt;/p>
&lt;p>後面大概四點快五點，我跑去翻 Samuel 寫的 Async Gem 裡面有一個關於 Enumerator 的問題被特別提出來，因為我的主題就是討論 Enumerator 所以就打開來看了一下，但是又沒有跟上討論的點就只好去問本人。&lt;/p>
&lt;p>然後就這樣得到了一個半小時的 Commiter 一對一教學的機會，這個問題是一個在所有 Ruby 版本（1.9 之後有 Fiber）都會有的問題，他又很剛好是我在讀 Enumerator 原始碼的時候被我跳過的部分，簡單說就是 Enumerator 其實是有用 Fiber 的。&lt;/p>
&lt;p>但是，因為 Ruby 目前的 Fiber 機制不夠完善，造成了下面的情況&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">def&lt;/span> &lt;span class="nf">iterate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">yield&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Fiber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">to_enum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:iterate&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_a&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>照 Fiber 的邏輯，應該是要 &lt;code>#to_a&lt;/code> 得到 &lt;code>[1]&lt;/code> 然後 &lt;code>f.resume&lt;/code> 得到一個 &lt;code>2&lt;/code> 的回傳值，但是因為 &lt;code>to_enum&lt;/code> 會產生一個 Fiber 區段，造成 &lt;code>Fiber.yield&lt;/code> 實際上是跟 &lt;code>yield 1&lt;/code> 的效果一樣，結果就變成 &lt;code>#to_a&lt;/code> 得到 &lt;code>[1, 2]&lt;/code> 然後 &lt;code>f.resume&lt;/code> 是 &lt;code>nil&lt;/code> 的狀況。&lt;/p>
&lt;p>後面的討論（應該是單方面聽解說）就是圍繞在這個情境下要怎麼處理，還有 Samuel 的 &lt;a href="https://github.com/ruby/ruby/pull/2002">PR&lt;/a> 怎麼暫時性的解決，而這個解法其實不算好。就再講到 &lt;code>Fiber.yield&lt;/code> 和 &lt;code>#resume&lt;/code> 的行為是怎樣實作的，以及目前 Ruby 缺少了怎樣的機制才造成這個問題的發生等等。&lt;/p>
&lt;p>非常有趣，不過我想大概也不是我目前能幫忙解決的 XD&lt;/p>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>整體上來說，經過這幾年參加國外研討會跟在台灣能有跟外國人交流的機會。其實有慢慢體會到 Ruby 社群文化的優點，這大概是相比其他語言社群一個很棒的優點。就是我們是盡量嘗試去跟外國的工程師接觸跟交流的，雖然還是要看個人，不過至少以&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>本身公司文化來說，我們內部員工會盡量做這件事情是好的。&lt;/p>
&lt;p>其實這樣說起來，以前大學參加研討會會嘗試跟講者、外國人交流，也許是從 RubyConf Taiwan 學來的，雖然整體下來我可能花了五六年才能達到完全不怕去跟外國人對話，但是就結果上來說是很棒的。而且能跟參與語言本身開發的工程師討論技術，收穫是遠比自己研究多上非常多的。&lt;/p>
&lt;p>另外就是解釋技術的技巧，外國講者在解釋上我認為都有不少很用心的地方，盡可能讓這些東西能更容易被理解。至少相比之下，我的簡報跟演講大概就沒有這麼好懂了⋯⋯&lt;/p></content></item></channel></rss>