<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 弦而時習之</title><link>https://blog.frost.tw/posts/</link><description>Recent content in Posts on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>淺談用 Ruby on Rails 開發遊戲</title><link>https://blog.frost.tw/posts/2021/04/25/the-overview-of-game-development-in-ruby-on-rails/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2021/04/25/the-overview-of-game-development-in-ruby-on-rails/</guid><description>&lt;p>最近剛好被人問到使用 Ruby on Rails 應該如何開發遊戲，因為是個很有趣的題目所以就利用週末的時間來簡單討論一下這個問題。雖然是以 Ruby on Rails 作為案例，不過這些經驗大致上是適用於所有程式語言的。&lt;/p></description></item><item><title>TDD 與持續重構課程心得</title><link>https://blog.frost.tw/posts/2021/02/21/experience-of-tdd-continuous-refactoring/</link><pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2021/02/21/experience-of-tdd-continuous-refactoring/</guid><description>&lt;p>年初上完&lt;a href="https://blog.frost.tw/posts/2021/01/10/experience-of-unit-testing-effectively-with-legacy-code/">針對遺留代碼加入單元測試的藝術&lt;/a>後，這週末又上了另一門相關的課程。在開始上課後發現很大的突破自己以往的觀念，同時也多出很多想法以及想嘗試的事情。&lt;/p></description></item><item><title>針對遺留代碼加入單元測試的藝術課程心得</title><link>https://blog.frost.tw/posts/2021/01/10/experience-of-unit-testing-effectively-with-legacy-code/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2021/01/10/experience-of-unit-testing-effectively-with-legacy-code/</guid><description>&lt;p>大概在 2019 年底就有考慮要來報名，結果一直拖到 2020 才下定決心。寫測試這件事情雖然很早就知道，不過一直到出社會開始工作後才逐漸的接觸，而且最開始的時候其實寫了很多糟糕的測試，直到這幾年逐漸摸索才有一個比較有系統的測試撰寫方式。&lt;/p>
&lt;p>但是透過自學比較大的問題就是知識很多時候是沒有系統的，大多是碎片的形式同時我自己也不太擅長將這些東西歸納整理，也就會出現一些盲點。也因此這次參加課程主要有兩個目的，一個是看看是否適合作為公司內部訓練的選項建議老闆，另一方面就是我自己學東西的習慣，反覆的練習基礎來達到熟練一個技能。&lt;/p></description></item><item><title>作為工程師，我們與專業的距離</title><link>https://blog.frost.tw/posts/2020/09/28/The-distance-to-become-a-professional-programmer/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/09/28/The-distance-to-become-a-professional-programmer/</guid><description>&lt;p>不知不覺工作已經四年左右了，如果是從開始接觸程式語言計算的話似乎快要二十年。這幾年也開始擔任公司負責面試的主管，也看到越來越多工程師培訓班的出現以及更多的人挑戰轉職工程師。在這樣的狀況下，每次跟同事交流，我總是覺得我們不夠專業。&lt;/p>
&lt;p>這也一直讓我在思考，作為一個「專業」的工程師應該要滿足什麼條件？&lt;/p></description></item><item><title>COSCUP 2020 速記</title><link>https://blog.frost.tw/posts/2020/08/03/COSCUP-2020-Note/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/08/03/COSCUP-2020-Note/</guid><description>&lt;p>距離上一篇文章已經好幾個月了，手邊還有一些有趣的東西想寫不過實在太忙。每年參加完研討會都會寫一篇心得來記錄一下，不過我後面幾個月可能還要準備日本的 RubyKaigi（線上版）、鐵人賽跟在等投稿結果的 JSDC、MOPCON 等，應該是暫時沒辦法跟大家分享這幾個月找到的有趣技術。&lt;/p></description></item><item><title>GitLab 是如何讓 SSH Server 和 Git 並存而不影響安全性</title><link>https://blog.frost.tw/posts/2020/06/20/How-to-secure-SSH-Server-when-GitLab-add-git-user/</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/06/20/How-to-secure-SSH-Server-when-GitLab-add-git-user/</guid><description>&lt;p>這次第四屆的 &lt;a href="https://astro.5xruby.tw/">Astro Camp&lt;/a> 有學員嘗試做了 GitHub 的架構，也就是能夠在遠端建立 Git 專案並且能夠在本機上傳檔案。&lt;/p>
&lt;p>不過在和當助教的同事跟學員聊到 &lt;code>git&lt;/code> 使用者可以登入伺服器進行任意操作的安全性問題時，在前陣子的一些測試發現實際上我自己的假設（特製的 SSH Server）是有問題的，而這個解決方法實際上也比我們想像的還容易。&lt;/p></description></item><item><title>TGONext: 追蹤和技術債</title><link>https://blog.frost.tw/posts/2020/05/11/TGONext-Tracing-and-Technical-Debt/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/05/11/TGONext-Tracing-and-Technical-Debt/</guid><description>&lt;p>在 TGONext 期間我們基本上有 4 ~ 5 次的聚會，而這次算是表定上的最後一次聚會。在可能是最後一次的聚會，我們先討論了幾個原本沒有要討論的主題。&lt;/p>
&lt;p>這次聚會中，我們會討論關於日誌追蹤跟如何處理技術債。&lt;/p></description></item><item><title>做一個 Rails Form Helper 相容的 Form Object</title><link>https://blog.frost.tw/posts/2020/05/03/Build-a-Form-Helper-capable-Form-Object-in-Rails/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/05/03/Build-a-Form-Helper-capable-Form-Object-in-Rails/</guid><description>&lt;p>當我們的 Rails 專案邊複雜的時候，Form Object 算是一個常見的方法。不過網路上的教學似乎大多都沒有能夠相容 Rails 的 Form Helper 的版本。&lt;/p>
&lt;p>所以我就開始思考，有沒有辦法法在比較少的修改下去支援 Form Helper 呢？&lt;/p></description></item><item><title>複習 Rails 的 Autoloading 和 Reloading</title><link>https://blog.frost.tw/posts/2020/04/28/Review-the-Rails-Autoloading-and-Reloading/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/04/28/Review-the-Rails-Autoloading-and-Reloading/</guid><description>&lt;p>在幾年前我有一篇文章討論 &lt;a href="https://blog.frost.tw/posts/2017/03/06/The-Rails-auto-reload-trap/">Autoloading&lt;/a> 的問題，這幾天剛好有同事在 Autoloading 和 Reloading 上也有類似的問題。&lt;/p>
&lt;p>所以我決定寫一篇文章來複習 Rails 5 和 6 的 Autoloading 的機制。&lt;/p></description></item><item><title>TGONext: 資料庫變遷跟架構改變</title><link>https://blog.frost.tw/posts/2020/04/03/TGONext-Database-Migration-and-Architecture-Changing/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/04/03/TGONext-Database-Migration-and-Architecture-Changing/</guid><description>&lt;p>這次在開始討論關於架構的主題之前，我們的倒是讓我們提出一些問題。&lt;/p>
&lt;p>剛好在兩次聚會的期間，我的客戶因為一些錯誤的計畫讓 Migration 失敗了，所以我提出了關於在不停機的狀況下做 Migration 的規劃問題。&lt;/p></description></item></channel></rss>