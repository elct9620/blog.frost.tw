<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 弦而時習之</title><link>https://blog.frost.tw/posts/</link><description>Recent content in Posts on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 23 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>TGONext: 規劃高併發服務</title><link>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</guid><description>&lt;p>昨天是 &lt;a href="https://next.tgonetworks.org/">TGONext&lt;/a> 的第一次聚會，在這個活動中我們會向台灣的一些高階主管學習。在開場結束後我們的導師 &lt;a href="https://blog.gcos.me/">Ant&lt;/a> 讓我們投票選出幾個想在這半年的時間內討論的題目。基本上我們預定討論四個主題，而「高併發」是我們的第一個主題。&lt;/p></description></item><item><title>撰寫一個合適的 RSpec 測試</title><link>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</guid><description>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p></description></item><item><title>淺談在 Google Cloud Platform 讓 Ruby on Rails 實現簡單的 Immutable Infrastructure 部署</title><link>https://blog.frost.tw/posts/2020/01/07/An-overview-of-deploy-Ruby-on-Rails-to-Google-Cloud-Platform-uses-simple-immutable-infrastructure/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/01/07/An-overview-of-deploy-Ruby-on-Rails-to-Google-Cloud-Platform-uses-simple-immutable-infrastructure/</guid><description>&lt;p>去年雙十一活動的時候有一個算是比較急的專案是要做活動網站，當時評估了一下之後決定來嘗試透過 CI 自動生成 GCE 的自訂映像檔然後搭配 Auto Scale 來做部署。&lt;/p>
&lt;p>會選擇這樣的方式主要是因為 Rails 或者大多數開發框架的部署工具預設大多是不適合 Auto Scale 的，像是 Capistrano 大多數是手動填入伺服器位置（之前也有實作過透過 GCP API 自動填入）比較適合雲端服務的作法其實就是是製作成一個映像檔來處理，也因此像是 Docker Image 這類型容器化技術在這方面是相對容易做的。&lt;/p>
&lt;p>不過考量到容器化本身也還有一些調整問題才適合使用，再加上雲端服務的選擇是使用 GCP 來提供服務，並不像 AWS ECS 有專門針對容器的服務（可能是我不知道）而是提供 K8S 的方案，對一個短期活動來說在整個專案成員都沒有經驗的前提下學習成本還是偏高的。&lt;/p>
&lt;p>因此相對適合的做法是用之前我準備好的 &lt;a href="https://www.ansible.com/">Ansible&lt;/a> 腳本，搭配 &lt;a href="https://www.packer.io/">Packer&lt;/a> 這套工具直接在 GCP 上面生成一個自訂的映像檔然後直接更新 Instance Group 的設定讓他以新版本 Scale 起來，就能做到基本上網站不斷掉的更新（Health Check 和 Scale 規則需要調整好）&lt;/p>
&lt;p>我們大概花了約一天多的時間快速搭起來，這次的開發時間約兩週中間是透過放額外的人力去支援搭建這個部署流程。&lt;/p></description></item><item><title>如何透過 Service Account 來取得 Google API 的 OAuth2 Token</title><link>https://blog.frost.tw/posts/2019/12/29/How-to-use-Service-Account-to-exchange-Google-OAuth2-API-token/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/12/29/How-to-use-Service-Account-to-exchange-Google-OAuth2-API-token/</guid><description>&lt;p>前陣子在嘗試一些比較少見的 Google API 時發現，在 Google 提供的 Ruby Gem 裡面並不支援這個 API 的實作，這表示需要自己去想辦法解決如何去呼叫這個 API 的問題。&lt;/p>
&lt;p>不過呼叫 API 需要 Access Token 才能夠使用，以往我們都是依靠第三方套件或者 Google 官方提供的 Gem 直接呼叫，似乎很少去直接實作客戶端。另一方面我們對 OAuth2 的認識大多是做 SSO（Single Sign On）而非這種伺服器對伺服器的呼叫。&lt;/p>
&lt;p>以 Google 這種規模的公司，如果是直接使用一般 OAuth2 的伺服器對伺服器的作法似乎也不太適合，而 Google 提供的解決方案就是 Service Account 了！&lt;/p></description></item><item><title>Ruby World Conference 2019 見聞</title><link>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</guid><description>&lt;p>今年把在六月到八月做的一個小專案拿去投稿 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a> 意外的獲得了 15 分鐘的時間，於是又展開了一次日本出差之旅，剛好彌補一下今年因為客戶專案需要趕上線而無法參加 &lt;a href="https://rubykaigi.org/">RubyKaigi&lt;/a> 的遺憾。&lt;/p>
&lt;p>跟 RubyKaigi 不太一樣的地方是 Ruby World Conference 雖然叫做「World Conference」但是除了台上的講者之外，幾乎都是日本人（而且是稍微有年紀的大叔）去參加的。&lt;/p></description></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （二）</title><link>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</guid><description>&lt;p>寫完&lt;a href="https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/">上篇&lt;/a>後就開始員工旅遊、鐵人賽（&lt;a href="https://ithelp.ithome.com.tw/users/20065771/ironman/2734">從讀遊戲原始碼學做連線遊戲&lt;/a>）反而一直都沒有時間把下篇寫完，離 COSCUP 都已經過了一個多月自己都忘記還剩什麼沒有寫在文章裡面。&lt;/p>
&lt;p>中間在鐵人賽的部分花了一些時間把目前理解到關於 Unlight 的一些基本設計整理出來，後面則是實作。至於近期也已經開始在搭建 HTML5 版本的底層設計，還有 mruby 的&lt;a href="https://github.com/elct9620/mruby.wasm">整合&lt;/a>（因為想提供 Mod 功能到遊戲中）等等東西都在進行中，十一月還要飛日本一趟參加 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a>，可以說是完全都閒不下來。&lt;/p>
&lt;p>總之，讓我們在來看看 COSCUP 這場演講的後續吧 XD&lt;/p></description></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （一）</title><link>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</guid><description>&lt;p>在 &lt;a href="https://coscup.org/2019/">COSCUP&lt;/a> 分享了這兩週左右（8/3 ~ 8/17）把一款決定開放原始碼的網頁遊戲，從無法啟動到恢復伺服器開始運作的一些經驗跟大家分享。
不過看起來還是有很多人沒有機會來聽，雖然之後因為會把一部分重心放在這款遊戲上，所以應該還是有不少機會，但還是簡單的來彙整一下今天講的東西。&lt;/p>
&lt;p>上一篇&lt;a href="https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/">快速閱讀 Unlight 原始碼&lt;/a>大致上有提到了我在當時看到原始碼的看法跟概觀。有興趣的話可以搭配&lt;a href="https://speakerdeck.com/elct9620/2019-coscup-fu-huo-ge-browser-game-unlight-kai-yuan-shi-jian">演講簡報&lt;/a>一起讀這篇文章。&lt;/p>
&lt;p>另外，這次整個遊戲運作起來除了我自己本身對 Ruby / ActionScript 有一定的了解外，也要感謝一下我們這個團隊（&lt;a href="https://unlight.app">Open Unlight&lt;/a>）的初期成員 Poka 和舞鶴，給我硬體上的支援跟對其他玩家的客服支援，不然有時候真的很難同時處理這些事情。&lt;/p></description></item><item><title>快速閱讀頁遊 Unlight 開源後的原始碼</title><link>https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/</guid><description>&lt;p>最近一款有點年紀的頁遊 &lt;a href="https://zh.wikipedia.org/zh-tw/Unlight">Unlight&lt;/a> 在停止營運後幾年，突然公佈說要開放原始碼跟圖片素材。&lt;/p>
&lt;p>這款遊戲嚴格說起來並沒有像我們熟悉的端遊、手遊之類的那樣華麗，但是非常有特色的人物設計跟對戰系統倒是讓很多玩家即使在好幾年後仍然在期待他能復活。&lt;/p>
&lt;p>作為一個曾經的玩家，其實也是非常期待的，不過這次的開放原始碼路線大概是復活無望。不過從這幾天公開的資料來看，圖片、音效到客戶端和伺服端都公開的狀況下，還是很有希望被熱血的玩家復活的。&lt;/p>
&lt;p>另一方面，既然伺服器是透過 Ruby 撰寫的，身為使用 Ruby 的開發者在遊戲類應用不常見的狀況下，能可以作為學習素材肯定是要看過一遍的。&lt;/p></description></item><item><title>你大概沒機會遇到的 Bug - 跟 Ruby Committer 聊 Enumerator 跟 Fiber</title><link>https://blog.frost.tw/posts/2019/07/30/Talk-with-the-Ruby-Committer-about-Enumerator-and-Fiber-the-bug-you-may-never-touch/</link><pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/30/Talk-with-the-Ruby-Committer-about-Enumerator-and-Fiber-the-bug-you-may-never-touch/</guid><description>&lt;p>今年 &lt;a href="https://2019.rubyconf.tw/">RubyConf Taiwan&lt;/a> 嘗試辦了 After Hack 這個活動，也因此有機會可以跟 Ruby 語言的 Commiter 聊一些有趣的問題。&lt;/p>
&lt;p>當天我的預定是把活動這幾天寫的 Gem 認真的補完測試，不過沒想到還剩下一個多小時就做完了，那就順便來思考一下 &lt;a href="https://tamashii.io">Tamashii&lt;/a> 專案能怎樣去改進，在今年的演講中大家應該都對 Fiber 有一個認識，而這個也許是一個不錯的選項。&lt;/p>
&lt;p>所以就馬上去看了一下講者（Samuel）的 &lt;a href="https://github.com/socketry/async">Async&lt;/a> 這個 Gem 做了些什麼事情，因為剛講完關於 Enumerator 的演講，所以自然地看到了一段引起我興趣的說明。&lt;/p>
&lt;blockquote>
&lt;p>Due to limitations within Ruby and the nature of this library, it is not possible to use to_enum on methods which invoke asynchronous behavior. We hope to fix this issue in the future.&lt;/p>
&lt;/blockquote>
&lt;p>既然作者本人就在現場，而且 Issue 的內容也看不太出來發生什麼問題，那麼就直接問吧！&lt;/p></description></item><item><title>RubyConf Taiwan 2019 會後感想、議程概覽</title><link>https://blog.frost.tw/posts/2019/07/29/My-experience-after-RubyConf-Taiwan-2019/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/29/My-experience-after-RubyConf-Taiwan-2019/</guid><description>&lt;p>跟前幾年一樣基本上就是工作人員，這幾年參加研討會也都比較沒有在仔細聽了，所以大多是邊顧邊寫點程式。&lt;/p>
&lt;p>比較不一樣的大概是今年更累了，從週四下午場佈到 Pre Party 然後兩天的活動、Official Party 最後到今年嘗試的 After Hack 幾乎是四天左右的連續接力，每天早上醒來都要先懷疑自己是否能撐過這一天。&lt;/p></description></item><item><title>巴哈姆特 Chatbot 之亂：用 Ruby on Rails 接收 Webhook</title><link>https://blog.frost.tw/posts/2019/07/26/The-bahamut-chatbot-receiving-the-webhook/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/26/The-bahamut-chatbot-receiving-the-webhook/</guid><description>&lt;p>六月底的時候發現巴哈姆特似乎想為他們推出的 Messaging APP （哈哈姆特）舉辦一個聊天機器人的比賽，看到之後想說還算蠻有趣的，所以我就跟朋友很隨意的組成一個團隊來開發。&lt;/p>
&lt;p>跟大多數我們熟悉串接 Chatbot 的機制是類似的，我們可以用 Webhook 的方式接收一個來自使用者發送的訊息，然後再透過程式處理後回傳訊息給使用者。&lt;/p></description></item><item><title>用 CloudFlare Workers 製作簡單的 Uptime Status 頁面</title><link>https://blog.frost.tw/posts/2019/07/09/Build-a-simple-uptime-status-page-use-CloudFlare-Workers/</link><pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/09/Build-a-simple-uptime-status-page-use-CloudFlare-Workers/</guid><description>&lt;p>最近跟朋友弄了一個透過 Chatbot 做出手遊效果的專案，沒出什麼意外的話大概能在九月看到一個雛形。不過既然是手遊類型的遊戲，更新資料跟維護其實就會遇到一些困難點。&lt;/p>
&lt;p>如果是線上遊戲或者手遊，大多數只要在公告後把玩家切斷連線然後升級過程中避免玩家連上就好。不過因為是 Chatbot 所以除非能做到不停機升級，不然是很困難的。
如此一來，讓玩家知道遊戲（機器人）正在更新，處於無法使用的狀態，就是一個重要的關鍵。&lt;/p></description></item><item><title>Ruby 中 Constant 和 Class 的關係</title><link>https://blog.frost.tw/posts/2019/06/18/The-relationship-between-constant-and-class-in-ruby/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/06/18/The-relationship-between-constant-and-class-in-ruby/</guid><description>&lt;p>下班前&lt;a href="https://kaochenlong.com/">龍哥&lt;/a>說在 Mailing List 看到了一段 Code 很有趣。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>
&lt;span class="nb">p&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="c1">#=&amp;gt; #&amp;lt;Class:0x0000558d34f68b48&amp;gt;&lt;/span>
&lt;span class="nb">p&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="c1">#=&amp;gt; nil&lt;/span>
&lt;span class="n">B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="nb">p&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#39;B&amp;#39;&lt;/span>
&lt;span class="n">C&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="nb">p&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="c1">#=&amp;gt; &amp;#39;B&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>裡面 &lt;code>C = a&lt;/code> 到底發生了什麼事情，是很值得討論的，因為有了線索是 &lt;code>rb_const_set&lt;/code> 可以找到原因，所以就利用下班時間來讀看看這段。&lt;/p>
&lt;blockquote>
&lt;p>關於前面的用法可以參考之前寫過的&lt;a href="https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/">自由的 Ruby 類別&lt;/a>來了解原因。&lt;/p>
&lt;/blockquote></description></item><item><title>關於 Rails 中的 Form Object / Presenter 這些物件該怎麼用（一）</title><link>https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/</guid><description>&lt;p>前陣子在 Review 新專案中同事的程式碼時，發現同事對像是 Service Object / Form Object 這類物件不太有概念。不過這個新專案因為是接手其他公司的專案，所以有不少地方要微調。至少那個值得吐槽的「因為 Controller 程式碼太長不知道放哪裡，就都丟去 Service Object 好了！」的神奇用法，完全沒有幫助改善程式碼。&lt;/p>
&lt;p>也因為這個機會，我用了一點時間跟專案的同事分享了一下我對這些物件的看法。畢竟當出我也是搞不太懂，不過隨著了解物件導向和 Ruby 的語言特性，從這些角度切入後，就比較能理解該怎麼使用。&lt;/p></description></item><item><title>利用 Ruby 的 Lambda 做條件判斷</title><link>https://blog.frost.tw/posts/2019/05/20/Use-Ruby-s-Lambda-as-case-when-condition/</link><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/05/20/Use-Ruby-s-Lambda-as-case-when-condition/</guid><description>&lt;p>週末在思考一些 Ruby 特性可以應用的小技巧時，想到龍哥大概跟我講了三次以上的一個特性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">other&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">fn&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1"># =&amp;gt; false&lt;/span>
&lt;span class="n">fn&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1"># =&amp;gt; true&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>剛好最近工作的專案上有個問題，似乎挺適合用這個技巧。&lt;/p></description></item><item><title>如何在沒有任何設定下產生 Rails 的 Docker Image</title><link>https://blog.frost.tw/posts/2019/03/20/The-zero-configure-dockerfile-for-rails/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/03/20/The-zero-configure-dockerfile-for-rails/</guid><description>&lt;p>前陣子看到 &lt;a href="https://thoughtbot.com/">Throughbot&lt;/a> 這間在 Ruby 圈 算是蠻有名的公司做了一個叫做 &lt;a href="https://github.com/thoughtbot/suspenders">Suspenders&lt;/a> 的 Gem 主要是對 Rails 擴充，簡單說就是基於原本的 &lt;code>rails new&lt;/code> 做了一個替代品，而這個替代品會自動幫你先做好一些原本要手動做的事情。&lt;/p>
&lt;p>像是安裝好常用的 Gem、套版之類的，想了一下覺得&lt;a href="https://5xruby.tw">五倍&lt;/a>其實也很需要，不少新專案也都是從我這邊經手初始化的，有一個這樣的工具會省下不少時間。&lt;/p>
&lt;p>所以 &lt;a href="https://github.com/5xRuby/bankai">Bankai&lt;/a> （卍解） 這個 Gem 就樣做出來了，裡面基本上就是設置好在五倍大多數時候用的標配 Ex. GitLab CI 設定、RSpec 等等&lt;/p>
&lt;p>但是又發現好像不太夠用，有些時候有 Docker 會方便很多，但是 Bankai 現在做不到！&lt;/p></description></item><item><title>我在 Ruby 埋了一個陷阱 - Signal 的應用</title><link>https://blog.frost.tw/posts/2019/03/12/I-make-a-trap-in-the-Ruby-the-usage-of-Signal/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/03/12/I-make-a-trap-in-the-Ruby-the-usage-of-Signal/</guid><description>&lt;p>在 Ruby 之中，其實隱藏了很多非常實用的標準函式庫，而 Signal 就是其中一個。&lt;/p>
&lt;p>我們在寫 Ruby 大多數時候都是 Ruby on Rails 框架的應用，但是你們有想過當我們在一些 Gem 運行的時候，使用 Ctrl + C 為什麼不會出現錯誤嗎？&lt;/p>
&lt;p>例如我們常常用到的 &lt;code>irb&lt;/code> 和 &lt;code>pry&lt;/code> 為什麼按下 Ctrl + C 的時候不是直接中斷，卻還能繼續運作？&lt;/p></description></item><item><title>Rails 串接 ProxmoxVE API 自動化教學用虛擬機分配</title><link>https://blog.frost.tw/posts/2019/02/19/Automatic-VM-allocate-using-Proxmox-VE-and-Rails/</link><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/02/19/Automatic-VM-allocate-using-Proxmox-VE-and-Rails/</guid><description>&lt;p>之前有一段時間因為用 KVM 手動管理&lt;a href="https://5xruby.tw">五倍&lt;/a>的虛擬機花上不少時間，評估之後我們就調整成 ProxmoxVE 來管理，至少在大多數的情況有 GUI 是很方便的。&lt;/p>
&lt;p>不過使用的權限還是限制在有權限管理機器的人身上，最近剛好有不少新同事加入，想讓他們練習部署伺服器。&lt;/p>
&lt;p>所以就有了這樣的問題：&lt;/p>
&lt;p>&lt;strong>可以讓同事自己申請虛擬機來練習嗎？&lt;/strong>&lt;/p></description></item><item><title>探索 Ruby 的 each 方法（一）</title><link>https://blog.frost.tw/posts/2019/02/13/Deep-into-ruby-s-each-method-Part-1/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/02/13/Deep-into-ruby-s-each-method-Part-1/</guid><description>&lt;p>原本是想討論 Enumerable 這個 Module 的機制跟運作原理，不過越寫越發現光是一篇文章很難講明白。&lt;/p>
&lt;p>所以就一邊查資料跟 Ruby 原始碼，慢慢的把 Enumerable / Enumerator 這兩個讓 &lt;code>#each&lt;/code> 運作起來的機制討論清楚。&lt;/p>
&lt;p>在 Ruby 裡面我們已經很熟悉使用 &lt;code>#each&lt;/code> 來對陣列相關的物件進行操作，不過在大部分的語言我們都需要透過迴圈的方式來取出陣列的元素，那麼 &lt;code>#each&lt;/code> 這個方法到底是怎麼讓我們用這麼方便的機制來操作陣列的呢？&lt;/p></description></item><item><title>你看懂五倍紅寶石粉專上的 Ruby 版台灣共識了嗎？</title><link>https://blog.frost.tw/posts/2019/01/14/Do-you-understand-the-Ruby-version-Taiwan-Consensus-on-5xruby-s-fanpage/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/01/14/Do-you-understand-the-Ruby-version-Taiwan-Consensus-on-5xruby-s-fanpage/</guid><description>&lt;p>最近「台灣共識」很熱門，公司的粉專也分享了 Ruby 版的台灣共識。&lt;/p>
&lt;p>我們在公司內部的群組大家其實討論了蠻久，如果只是單純的去實作跟其他語言一樣的內容，不就沒有意義了嗎？&lt;/p>
&lt;p>我們之所以會選擇用 Ruby 來當作工作上的工具，就表示他有一些特別的地方吸引我們。&lt;/p>
&lt;p>所以，上面用了哪些 Ruby 技巧讓我們一起來分析看看！&lt;/p></description></item><item><title>用 Ruby 來尋找區網中的 Airplay、Chromecast</title><link>https://blog.frost.tw/posts/2018/12/25/Use-Ruby-to-find-the-Airplay-or-Chromecast-device/</link><pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/12/25/Use-Ruby-to-find-the-Airplay-or-Chromecast-device/</guid><description>&lt;p>從雲端開始熱門起來後，為了能能讓提供不同服務的伺服器能夠被自動的偵測，我們在許多雲端相關的工具都會看到 Service Discovery 這個名詞。&lt;/p>
&lt;p>不過，除了雲端上的服務能夠透過這樣的機制互相「發現」對方，我們也可以在區網中用類似的方法找到「提供服務」的裝置。&lt;/p>
&lt;p>這就要從 mDNS (Multicast DNS) 和 DNS-SD (DNS-based Service Discovery) 開始談起。&lt;/p></description></item><item><title>為什麼要學習 Bootstrap 呢？</title><link>https://blog.frost.tw/posts/2018/11/27/Why-we-choose-the-Bootstrap/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/11/27/Why-we-choose-the-Bootstrap/</guid><description>&lt;p>最近在工作上或者跟有在做網站開發的朋友聊天，都剛好會討論到 &lt;a href="https://getbootstrap.com/">Bootstrap&lt;/a> 這個 CSS 框架。&lt;/p>
&lt;p>在業界，我想大部分的公司也大多會以 Bootstrap 為基礎來開發網站，而這幾年網路上可以買到的版型也多以 Bootstrap 為主。&lt;/p>
&lt;p>從這些跡象看起來，會使用 Bootstrap 很重要，中間的過程跟原因是什麼呢？&lt;/p></description></item><item><title>轉職工程師：尋找自己的價值</title><link>https://blog.frost.tw/posts/2018/11/06/Become-a-programmer-Find-your-own-value/</link><pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/11/06/Become-a-programmer-Find-your-own-value/</guid><description>&lt;p>這系列的文章已經稍微討論過我自己在學習寫程式過程中的&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">心態&lt;/a>、&lt;a href="https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/">方法&lt;/a>跟&lt;a href="https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/">困難&lt;/a>，最後就來討論最後一個我認為很重要的問題。&lt;/p>
&lt;p>不論學了什麼，或者有多麽厲害的技術，作為一個工程師我們的價值在哪裡？&lt;/p></description></item><item><title>轉職工程師：為什麼馬上就遇到瓶頸？</title><link>https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/</link><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/</guid><description>&lt;p>前面已經討論了&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">起步的心態&lt;/a>跟&lt;a href="https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/">起步的方法&lt;/a>兩個問題，好不容易開始寫程式了，卻發現⋯⋯&lt;/p>
&lt;p>&lt;strong>照著教學做，但是沒有教學就完全不會&lt;/strong>&lt;/p>
&lt;p>不管是去上更多的課，還是看更多的教學，怎麼樣都無法擺脫這個問題。這到底是什麼原因呢？&lt;/p></description></item><item><title>客製化你樹莓派上運行的 Linux</title><link>https://blog.frost.tw/posts/2018/10/09/Customize-a-linux-for-your-raspberrypi/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/10/09/Customize-a-linux-for-your-raspberrypi/</guid><description>&lt;p>最近因為手邊有一個工作以外的專案需要搭配硬體做一些 IoT 類型的應用，雖然之前在五倍紅寶石開發的 Tamashii 系列應用已經足以應對在這個專案上開發所需的解決方案，但是依舊缺少了一些功能。&lt;/p>
&lt;p>也就是我們過去並沒有考慮到的，如果裝置是交給一般使用者的狀況下，如何在透過網路的前提將裝置更新。&lt;/p>
&lt;p>這是很多硬體都會有的功能，但是就目前而言 Tamashii 並不支援。&lt;/p></description></item><item><title>轉職工程師：要學什麼才好？</title><link>https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/</guid><description>&lt;p>上一篇文章&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">輸在起跑點&lt;/a>已經稍微討論過心態上的問題，所以馬上就是要怎麼開始的問題。&lt;/p>
&lt;p>大部分的人不論之前有沒有經驗，一定會冒出「要學什麼語言？」「某某語言很熱門是不是應該去學？」之類的問題。&lt;/p>
&lt;p>很多時候，我認為這不是真正的問題。&lt;/p></description></item><item><title>轉職工程師：輸在起跑點</title><link>https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/</guid><description>&lt;p>工作到現在差不多兩年多，因為公司業務的關係偶爾也會跟同事討論在學習當工程師或者寫程式上的經驗。所以打算寫一個系列的文章，跟大家分享一下我從學程式到成為一個工程師的過程，是怎麼樣的。&lt;/p>
&lt;p>這是第一篇，我想用「輸在起跑點」來當開始。&lt;/p></description></item><item><title>怎麼選第一份工作？</title><link>https://blog.frost.tw/posts/2018/09/10/How-to-choose-your-first-job/</link><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/09/10/How-to-choose-your-first-job/</guid><description>&lt;p>從退伍到工作差不多過了兩年，這段時間有不少經驗我想已經足夠跟大家分享。這篇算是一個前導的文章，想來跟大家分享「第一份工作」的重要性。&lt;/p>
&lt;blockquote>
&lt;p>重點是技能成長那段，討論薪水的地方太長可以跳過喔 XD&lt;/p>
&lt;/blockquote></description></item><item><title>淺談 Ruby 的 Fiber（九）</title><link>https://blog.frost.tw/posts/2018/09/05/Talk-about-ruby-s-fiber-Part-9/</link><pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/09/05/Talk-about-ruby-s-fiber-Part-9/</guid><description>&lt;p>這篇文章我們會把 Broadcast （廣播）功能實作出來，如此一來我們就擁有了可以將訊息透過 Fiber 實作的伺服器廣播給其他使用者的功能。&lt;/p>
&lt;p>而這系列文章也就到此告一段落。&lt;/p></description></item><item><title>使用 Fiber 能給 Ruby 帶來好處嗎？</title><link>https://blog.frost.tw/posts/2018/08/21/Does-the-Fiber-have-any-benefit-for-Ruby/</link><pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/08/21/Does-the-Fiber-have-any-benefit-for-Ruby/</guid><description>&lt;p>關於 Fiber 的&lt;a href="https://blog.frost.tw/posts/2018/06/26/Talk-about-ruby-s-fiber-Part-1/">系列文&lt;/a>寫到現在也已經一個半月了，除了分享自己在使用 Fiber 的經驗之外，我也更加的熟悉 Fiber 的使用。&lt;/p>
&lt;p>不過，這真的是有益於現有的專案嗎？&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（八）</title><link>https://blog.frost.tw/posts/2018/08/14/Talk-about-ruby-s-fiber-Part-8/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/08/14/Talk-about-ruby-s-fiber-Part-8/</guid><description>&lt;p>到這篇為止，我們已經完成了將 Fiber 應用在程式中的基本雛型，現在只需要將上週未完成的錯誤處理，我們就能獲得一個可以正常發送訊息到伺服器的伺服器。&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（七）</title><link>https://blog.frost.tw/posts/2018/08/07/Talk-about-ruby-s-fiber-Part-7/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/08/07/Talk-about-ruby-s-fiber-Part-7/</guid><description>&lt;p>上週我們開始重構 Fiber 的結構，透過一個統一的 &lt;code>Selector&lt;/code> 物件來選取這個「當下」可以進行 I/O 操作的物件。&lt;/p>
&lt;p>不過，我們原本預期是因為使用 &lt;code>rescue&lt;/code> 來捕捉錯誤控制流程才讓他運行不正常，經過一週的思考後，卻發現事情跟預想的不太一樣。&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（六）</title><link>https://blog.frost.tw/posts/2018/07/29/Talk-about-ruby-s-fiber-Part-6/</link><pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/07/29/Talk-about-ruby-s-fiber-Part-6/</guid><description>&lt;p>經過前面幾篇文章的介紹，我們已經初步的了解 Fiber 的性質。這系列的文章目標是利用 Fiber 實現再不透過 Thread 或者 Process 的情境，來實現支援多人連線的 TCP 聊天伺服器。&lt;/p>
&lt;p>從這一篇開始，我們就要正式的來挑戰完整的實作了！&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（五）</title><link>https://blog.frost.tw/posts/2018/07/24/Talk-about-ruby-s-fiber-Part-5/</link><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/07/24/Talk-about-ruby-s-fiber-Part-5/</guid><description>&lt;p>經過&lt;a href="https://blog.frost.tw/posts/2018/07/17/Talk-about-ruby-s-fiber-Part-4/">上次&lt;/a>的嘗試，我們已經開始對於 Fiber 的性質有一些了解，目前還需要解決已經結束的 Fiber 被呼叫，以及來不及處理的問題。&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（四）</title><link>https://blog.frost.tw/posts/2018/07/17/Talk-about-ruby-s-fiber-Part-4/</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/07/17/Talk-about-ruby-s-fiber-Part-4/</guid><description>&lt;p>在上週的&lt;a href="https://blog.frost.tw/posts/2018/07/10/Talk-about-ruby-s-fiber-Part-3/">文章&lt;/a>我們注意到 Fiber 的使用並不是那麼容易的，因為我們需要自行管理每一個 Fiber 被恢復（&lt;code>#resume&lt;/code>）的時機，這週就繼續來挑戰吧！&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（三）</title><link>https://blog.frost.tw/posts/2018/07/10/Talk-about-ruby-s-fiber-Part-3/</link><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/07/10/Talk-about-ruby-s-fiber-Part-3/</guid><description>&lt;p>延續&lt;a href="https://blog.frost.tw/posts/2018/07/03/Talk-about-ruby-s-fiber-Part-2/">上一篇&lt;/a>文章的實作，我們已經有一個簡易的 Thread 版本 TCP Socket 伺服器可以運作，那麼該怎麼用 Fiber 修改呢？&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（二）</title><link>https://blog.frost.tw/posts/2018/07/03/Talk-about-ruby-s-fiber-Part-2/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/07/03/Talk-about-ruby-s-fiber-Part-2/</guid><description>&lt;p>&lt;a href="https://blog.frost.tw/posts/2018/06/26/Talk-about-ruby-s-fiber-Part-1/">第一篇&lt;/a>我們已經大致上了解 Fiber 的運作原理，不過要能夠實際上的掌握跟應用，我認為是需要靠實作來熟悉的。&lt;/p>
&lt;p>所以，這一篇我們先來講學習 Socket 最常見的 TCP 伺服器實作吧！&lt;/p></description></item><item><title>淺談 Ruby 的 Fiber（ㄧ）</title><link>https://blog.frost.tw/posts/2018/06/26/Talk-about-ruby-s-fiber-Part-1/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/06/26/Talk-about-ruby-s-fiber-Part-1/</guid><description>&lt;p>前陣子再研究 Ruby 從 1.9.3 就開始提供的 Fiber 該怎麼使用，不過網路上的資料大多都只是簡單的討論。那麼 Fiber 到底是什麼呢？這系列的文章會詳細的介紹 Fiber 的基本概念，還有一些可以應用的方式。&lt;/p></description></item><item><title>如何在國外演講</title><link>https://blog.frost.tw/posts/2018/06/19/How-do-I-prepare-a-speech/</link><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/06/19/How-do-I-prepare-a-speech/</guid><description>&lt;p>今年在 &lt;a href="https://rubykaigi.org/2018">RubyKaigi&lt;/a> 有一場 Lightning Talk 分享，在後台準備跟等待上場的時候發現一件事情。&lt;/p>
&lt;p>&lt;strong>前面的人都邊發抖邊講&lt;/strong>&lt;/p>
&lt;p>所以這篇文章來分享一下我的方法跟心得。&lt;/p></description></item><item><title>RubyKaigi 2018 會後心得</title><link>https://blog.frost.tw/posts/2018/06/12/The-RubyKaigi-2018-Experience/</link><pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/06/12/The-RubyKaigi-2018-Experience/</guid><description>&lt;p>今年的 RubyKaigi 比去年提早不少，作為 Ruby 開發者最大的盛會，今年也不意外的延續去年探討 Ruby 3 的可能性跟更多 Ruby 的深度應用。也因次，不意外的讓大家都聽的似懂非懂，而且還讓我感覺一年比一年的難度更高。&lt;/p>
&lt;p>總之，來看看今年的 RubyKaigi 吧！&lt;/p></description></item><item><title>我的 Chrome 會說話</title><link>https://blog.frost.tw/posts/2018/05/30/My-Chrome-can-speak/</link><pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/30/My-Chrome-can-speak/</guid><description>&lt;p>這是很多年前的事情了，當時看到別人的 Chrome 竟然會說話，讓我震驚了很久。但是花了很多年都沒有找到要怎麼做，不過最近因為一些關係，我終於知道了他的秘密！&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（八）</title><link>https://blog.frost.tw/posts/2018/05/28/Getting-started-deploy-your-Ruby-on-Rails-Part-8/</link><pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/28/Getting-started-deploy-your-Ruby-on-Rails-Part-8/</guid><description>&lt;p>前面幾篇文章已經把所有關於 Ruby 和資料庫都設定完成，最後一個階段就是要把 Nginx 設定好，並且讓 Let&amp;rsquo;s Encrypt 可以正確的被設定，讓網站支援 SSL 功能。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（七）</title><link>https://blog.frost.tw/posts/2018/05/20/Getting-started-deploy-your-Ruby-on-Rails-Part-7/</link><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/20/Getting-started-deploy-your-Ruby-on-Rails-Part-7/</guid><description>&lt;p>現在伺服器還沒辦法下載到 Ruby on Rails 專案的原始碼用來部署，這一篇會介紹該如何把原始碼下載回來，並且在伺服器上將相關的 Ruby Gem 都安裝好。&lt;/p></description></item><item><title>關於我怎麼準備人生第一次的履歷和面試</title><link>https://blog.frost.tw/posts/2018/05/14/About-my-first-time-interview-and-resume/</link><pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/14/About-my-first-time-interview-and-resume/</guid><description>&lt;p>最近又到了畢業的季節，今年比較不一樣的大概是我有稍微幫幾個學弟妹看了一下履歷。還有公司今年暑期實習生的履歷，我也都看了一遍。&lt;/p>
&lt;p>看完之後就發現，跟當初退伍前準備的情況不一樣，我們肯定搞錯重點了 XD&lt;/p>
&lt;p>總之，這不是一篇雞湯文，是雞精文！&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（六）</title><link>https://blog.frost.tw/posts/2018/05/07/Getting-started-deploy-your-Ruby-on-Rails-Part-6/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/07/Getting-started-deploy-your-Ruby-on-Rails-Part-6/</guid><description>&lt;p>經過前面五篇的教學，我們距離將 Ruby on Rails 部署到伺服器上越來越接近了。上一階段我們在本機段將部署的設定做完之後，這一篇文章會回到伺服器將部署所需的設定補齊，讓 Capistrano 可以正確的將程式碼部署到伺服器。&lt;/p></description></item><item><title>RubyElixirConfTW 2018 會後感想</title><link>https://blog.frost.tw/posts/2018/05/01/The-RubyElixirConfTW-2018-Experience/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/01/The-RubyElixirConfTW-2018-Experience/</guid><description>&lt;p>Ruby Conference Taiwan 到今年已經是第七年了，印象中我大概是從 2013 年左右開始參加了，應該也有四五次。今年也加入了 Elixir 一起合辦，因為是&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>的員工，所以也當了兩年的工作人員。&lt;/p>
&lt;p>那麼，就看看今年有什麼新鮮的事情吧！&lt;/p></description></item><item><title>如何在 2018 年被詐騙</title><link>https://blog.frost.tw/posts/2018/04/24/How-to-be-scammed-in-2018/</link><pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/04/24/How-to-be-scammed-in-2018/</guid><description>&lt;p>這是關於某天晚上接到詐騙電話的分析，因為過程中太多細節的東西讓人掉入陷阱，跟同事聊過之後覺得還是寫一篇文章記錄會比較好，至少不會有人又踩到這樣的坑。&lt;/p>
&lt;p>這篇文章重點也很簡單，&lt;strong>「不要以為你不會被騙」&lt;/strong>&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（五）</title><link>https://blog.frost.tw/posts/2018/04/15/Getting-started-deploy-your-Ruby-on-Rails-Part-5/</link><pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/04/15/Getting-started-deploy-your-Ruby-on-Rails-Part-5/</guid><description>&lt;p>到&lt;a href="https://blog.frost.tw/posts/2018/04/10/Getting-started-deploy-your-Ruby-on-Rails-Part-4/">第四篇&lt;/a>為止，我們已經有了可以運行 Ruby on Rails 的環境，不過到底該怎麼在伺服器上跑起來呢？&lt;/p>
&lt;p>絕對不是&lt;strong>把程式碼複製到伺服器&lt;/strong>這種簡單的做法，或者說這樣的做法在更新上是很沒有效率的！&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（四）</title><link>https://blog.frost.tw/posts/2018/04/10/Getting-started-deploy-your-Ruby-on-Rails-Part-4/</link><pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/04/10/Getting-started-deploy-your-Ruby-on-Rails-Part-4/</guid><description>&lt;p>從&lt;a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">第一篇&lt;/a>到&lt;a href="https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/">第二篇&lt;/a>的說明，加上&lt;a href="https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/">第三篇&lt;/a>我想大家已經對編譯自己的環境稍為熟悉。&lt;/p>
&lt;p>為了要可以用 Passenger 作為網站伺服器，我們需要自行編譯 Nginx 讓他可以使用 Passenger 模組。&lt;/p></description></item><item><title>在 2018 年我所知道的區塊鏈</title><link>https://blog.frost.tw/posts/2018/04/02/The-blockchain-I-know-about-in-2018/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/04/02/The-blockchain-I-know-about-in-2018/</guid><description>&lt;p>上週同事突然在公司的聊天群組中討論起區塊鏈到底是不是屬於分散式系統（Distributed System）因為去年年底爆紅的關係，我也稍微了解了一下區塊鏈的運作，就被同事說會不會晚上就有文章出來了。&lt;/p>
&lt;p>雖然不是當天晚上就在寫，不過了解區塊鏈的運作倒是很有幫助我們冷靜下來對應這個新名詞。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（三）</title><link>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/</link><pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/</guid><description>&lt;p>經過&lt;a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">第一篇&lt;/a>和&lt;a href="https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/">第二篇&lt;/a>的說明，我想大家現在應該都有辦法順利的透過 SSH 進入自己的伺服器。&lt;/p>
&lt;p>在第二篇的最後，我們針對 Ruby 環境預先做了準備，接下來就是安裝 Ruby 環境的時候了！&lt;/p></description></item><item><title>使用 Turbolinks 時 Google Analytics 並沒有正確運作</title><link>https://blog.frost.tw/posts/2018/03/24/Google-Analytics-not-correct-when-using-turbolinks/</link><pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/24/Google-Analytics-not-correct-when-using-turbolinks/</guid><description>&lt;p>最近因為在&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>配合同事做官網的 SEO 優化，比較常見的行銷工具像是 Google Analytics 之類的就一起拿出來玩。&lt;/p>
&lt;p>實驗的對象首選當然是自己的網站，不過在調整的時候卻發現有一些情況有點異常。&lt;/p></description></item><item><title>自由的 Ruby 類別（二）</title><link>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/</link><pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/</guid><description>&lt;p>&lt;a href="https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/">上一篇文章&lt;/a>已經討論過關於 Ruby 中的類別是怎樣運作的，這篇文章則會來討論如何拓展 Ruby 類別。&lt;/p>
&lt;p>大部分的人寫 Ruby 有很大的原因是因為 Rails 但是上面像是 &lt;code>has_many&lt;/code> 跟 &lt;code>before_action&lt;/code> 這些可以直接在類別上做的事情，很明顯不是 Ruby 內建的，到底是怎麼運作的呢？&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（二）</title><link>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/</link><pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/</guid><description>&lt;p>延續&lt;a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">上一篇&lt;/a>文章的內容，我們需要先在伺服器上進行設定，讓伺服器可以正確的安裝 Ruby 環境。如此一來，我們才能夠將 Ruby on Rails 部署到伺服器上面。&lt;/p>
&lt;p>為了完成這些前置作業，我們還需要針對伺服器的設定進行完善的準備才行。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（一）</title><link>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/</link><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/</guid><description>&lt;p>最近在公司發現其實不少同事都還沒有實際部署過一台伺服器的經驗，在有人負責 DevOps 的情況下，也許真的不太需要。又或者因為還是初級工程師的關係，沒有那個權限可以去安裝一次伺服器。甚至其實一直都使用著 Heroku 或者 AWS CodeDeploy 等服務的便利性，而沒有嘗試自己安裝一次。&lt;/p>
&lt;p>不管是基於甚麼原因，總之先來安裝一次吧！&lt;/p></description></item><item><title>Apartment 與 Globalize 隱藏在方便背後的陷阱</title><link>https://blog.frost.tw/posts/2018/03/18/The-easy-way-not-best-way-learn-from-Apartment-and-Globalize/</link><pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/18/The-easy-way-not-best-way-learn-from-Apartment-and-Globalize/</guid><description>&lt;p>手邊有一個專案剛好是需要滿足「多網站」並且每個網站都能夠「多語言切換」這兩個條件，在這兩個解決方案中最好處理的就是 Apartment 和 Globalize 這兩個 Ruby Gem 了。&lt;/p>
&lt;p>不過，在某些情況卻變成了問題。幸好運氣不錯的是還在開發階段，還有辦法將這個問題透過替換 Gem 進行修正。&lt;/p></description></item><item><title>管理 Ruby on Rails 外部 Assets 的小技巧</title><link>https://blog.frost.tw/posts/2018/03/18/A-tips-for-manage-ruby-on-rails-s-vendor-assets/</link><pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/18/A-tips-for-manage-ruby-on-rails-s-vendor-assets/</guid><description>&lt;p>在工作的時候經常會需要套用一些佈景主題，主要大多是因為客戶還在 MVP (最小可行產品) 的階段，只需要可以表現其商業價值運作的系統即可。不過，如果我們依照 Ruby on Rails 預設的方式把外部的佈景相關檔案分類後放到 &lt;code>vendor/assets&lt;/code> 目錄下，反而會變得難以管理。&lt;/p></description></item><item><title>Ruby 中該如何 Raise 一個錯誤</title><link>https://blog.frost.tw/posts/2018/01/09/How-ruby-raise-an-error/</link><pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/01/09/How-ruby-raise-an-error/</guid><description>&lt;p>前幾天的晚上朋友在 Facebook 上問了一個問題。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">raise&lt;/span> &lt;span class="no">HTTPError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Not Found&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="k">raise&lt;/span> &lt;span class="no">HTTPError&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Not Found&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哪個比較快？也因為這樣，我們意外的發現 Ruby 對上面兩段程式碼的定義上其實是不太一樣的。&lt;/p></description></item><item><title>Stripe 的 Idempotency Key 設計機制</title><link>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/</guid><description>&lt;p>週末看到一篇 Stripe 工程師所寫的文章，是一篇關於 Idempotency Key （幂等鍵）的設計機制。因為是一篇非常棒的文章，而且裡面的概念除了可以應用在 API 設計之外，很多程式設計上需要解決的問題都可以透過這個概念來處理。&lt;/p>
&lt;p>原文非常的長而且很詳細，這篇文章只會做簡單的重點整理。&lt;/p>
&lt;p>有興趣的話可以打開&lt;a href="https://brandur.org/idempotency-keys">原文&lt;/a>來讀，是一篇很有用的文章。&lt;/p>
&lt;blockquote>
&lt;p>作者是很厲害的工程師，部落格上的文章都是非常精實的技術文。&lt;/p>
&lt;/blockquote></description></item><item><title>在 PostgreSQL 中使用遞迴查詢來找尋父節點</title><link>https://blog.frost.tw/posts/2017/10/23/Use-PostgreSQL-s-recursive-query-to-find-ancestors/</link><pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/23/Use-PostgreSQL-s-recursive-query-to-find-ancestors/</guid><description>&lt;p>老爸的公司在去年設計了一個紅利積點的消費回饋機制，裡面採用了樹狀的結構。用來改善傳統多層次傳銷造成的下線提供好處給上線，而下線卻需要去找更多下線來獲取回饋的異常機制。&lt;/p>
&lt;p>不過這個設計有一個問題，就是他比傳統的樹成長的速度還會再更快些。也就表示在 Rails 裡面現有用來解決樹狀結構的一些套件並不適合使用。&lt;/p></description></item><item><title>自由的 Ruby 類別（一）</title><link>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/</link><pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/</guid><description>&lt;p>以前還在讀書的時候，常常會思考所謂的「自由」是什麼，想著以後一定要過著自由的生活。不過現實就是到了社會，依舊還是有許多限制讓你無法自由自在。&lt;/p>
&lt;p>不過，在 Ruby 中的類別卻是非常自由的。&lt;/p>
&lt;p>有稍微接觸過 Ruby 的人應該都知道幾個特性：&lt;/p>
&lt;ul>
&lt;li>物件導向語言&lt;/li>
&lt;li>一切都是物件&lt;/li>
&lt;/ul></description></item><item><title>在 RubyKaigi 2017 年後的反思</title><link>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/</link><pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/</guid><description>&lt;p>在這幾個月，感覺到自己好像快要突破這一階段的瓶頸，所以做了一些調整試試看能不能順利的突破，同時也到了每年公司參與 RubyKaigi 的時期。&lt;/p>
&lt;p>要說的話，今年的 RubyKaigi 整體的方向對我來說很不一樣，因為有不少關於 RubyKaigi 底層的議程被提出來，這在台灣舉辦研討會需要照顧到不同客群的人總會需要有一些取捨。&lt;/p>
&lt;p>不過，對日本——Ruby 的發源地來說，因為有不同類型的研討會互補，反而可以在不同的研討會上，著重不同的情境來討論。&lt;/p></description></item><item><title>用 Redux 跟 GraphQL 玩 Rails 5.1</title><link>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/</guid><description>&lt;p>上週五在處理網址續費的時候，發現幫老爸公司管理的網址已經多到一個程度。所以就決定把手邊可以轉移的服務都往 Gandi 丟過去。畢竟粗略估算可以達到 Grid B 的費率（實際上只有九五折）不過考量到有 API 能夠管理，以及一些自動化的手段，雖然相對還是稍微貴了一點，但是省去後續不少麻煩確實是有利的。&lt;/p>
&lt;p>也因為這樣，就打算以串 Gandi 的 API 來練手一下，原本是想做完管理 Domain 的部分，不過沒想到在實作一些技術面上的東西花了不少時間，只做完簡單的價格查詢。&lt;/p></description></item><item><title>Rails 的 Auto Reload 機制所產生的錯誤</title><link>https://blog.frost.tw/posts/2017/03/06/The-Rails-auto-reload-trap/</link><pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/03/06/The-Rails-auto-reload-trap/</guid><description>&lt;p>最近公司的專案使用到了 &lt;a href="https://github.com/makandra/active_type">ActiveType&lt;/a> 這套 Gem 用來輔助在專案逐漸複雜下 Model 會出現的問題。這是由 &lt;a href="https://leanpub.com/growing-rails">Growing Rails Application in Practice&lt;/a> 這本書的作者在書中介紹中的技巧，不過卻意外的讓我們遇到了關於 Auto Reload 機制所產生的問題。&lt;/p></description></item><item><title>可維護的 CSS</title><link>https://blog.frost.tw/posts/2017/03/05/Talk-about-maintainable-css/</link><pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/03/05/Talk-about-maintainable-css/</guid><description>&lt;p>這週的 CSS Weekly 以及幾個前端相關的電子報都提到了叫做 &lt;a href="https://maintainablecss.com/">Maintainable CSS&lt;/a> 的專案，乍看之下還以為是討論可維護 CSS 專案的文章，沒想到是一種 CSS 框架。&lt;/p>
&lt;p>幾年前 Responsive Web Design 和 Single Web Application 開始熱門起來的時候，大家也注意到網站使用的 CSS 逐漸複雜。所以開始有像是 OOCSS、SMACSS、BEM 等等理論出現，綜合來看這些技巧對於維護網站的樣式上都是很有幫助的。&lt;/p>
&lt;p>會寫這篇文章是因為 Maintainable CSS 在很多地方上跟我自己使用的方式類似，而我目前採用的則是 SMACSS 跟 BEM 的混合版本，所以就打算來分享一下自己的經驗和技巧。&lt;/p></description></item><item><title>Afte PHPConf 2016</title><link>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/</link><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/</guid><description>&lt;p>PHPConf 是退伍後參加的第三個研討會。雖然現在已經沒有什麼在寫 PHP 了，不過寫了好幾年的語言還是會想關注一下最近的狀況。&lt;/p>
&lt;p>今年其實沒有聽到很多議程，只聽了三場議程而已。
大部分的時間都用在跟講師聊天，不過另一方面也感受到這幾年很多活動都已經不是以前認識的人去參加。這大概就是對我們這群人來說，一個研討會的內容能帶給我們的東西已經不夠了。&lt;/p>
&lt;p>雖然以前會覺得自己還能夠一直參加，不過實際上當研討會分享的東西大多能靠自己學會跟吸收的時候，就沒有那麼重要。有機會的話，去做分享也是繼續參與的一個階段，能力可及的話我也會盡可能多做分享。&lt;/p></description></item><item><title>在 RubyKaigi 2016 後的新視野</title><link>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/</link><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/</guid><description>&lt;p>八月份退伍後，馬上就加入了&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>。而隨之而來的，剛好是在九月份為期九天的員工旅遊，一個非常充實的員工旅遊。&lt;/p>
&lt;p>實際上，我們只有三天左右在日本遊玩。原本的行程會穿插著與日本 Ruby 社群的交流，以及三天的 RubyKaigi 行程。&lt;/p>
&lt;p>這次的旅遊算是增長了不少見識，讓我想到高中快畢業時第一次知道了 COSCUP 之後瘋狂地參加各種語言的研討會，幾乎一年每個月都在跑研討會。印象沒錯的話，大概是 2013 年才參與到 RubyConf 也因為參加了 RubyConf 的活動，退伍前後蠻多工作機會都是來自 Ruby 圈的，算是整個程式經歷中給我幫助最多的社群了吧。&lt;/p></description></item><item><title>使用 GitLab CI 整合 SonarQube</title><link>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/</link><pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/</guid><description>&lt;p>之前都在偷懶沒有寫網誌，剛好這次端午連假比較長。
所以想做測試跟實驗的部分都做完了，就來寫一篇關於 GitLab CI 整合的經驗分享。&lt;/p>
&lt;p>文章中大致上會涵蓋這些部分：&lt;/p>
&lt;ul>
&lt;li>GitLab CI 基本使用&lt;/li>
&lt;li>Rancher建置環境&lt;/li>
&lt;li>SonarQube 基本使用&lt;/li>
&lt;li>GitLab CI 整合環境&lt;/li>
&lt;/ul>
&lt;p>文章會以我在建構 CI 環境的過程中來講解，一些安裝跟配置的部分會直接跳過。&lt;/p></description></item><item><title>從入伍後讀的一些書</title><link>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/</guid><description>&lt;p>入伍之後一直擔心自己的技術會退步，所以其實有好幾個月的時間都很焦慮。
不過運氣不錯的是，所處的單位算是不錯的，現在的區隊長管理方式也讓我有不少時間可以充分利用。&lt;/p>
&lt;p>這邊就簡單介紹一下到目前約八個月多所讀的書，大部分時間都是利用睡前跟午睡時間去讀的，一次大約十到二十分鐘，反而因為軍隊規律的生活變成每天讀書的習慣，意外讀了不少。&lt;/p></description></item><item><title>Deis 架構分析（二）</title><link>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</guid><description>&lt;p>延續&lt;a href="https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/">上一篇&lt;/a>的內容，這篇文章要先來討論比較好懂的 &lt;code>Router&lt;/code> 部分。&lt;/p>
&lt;p>首先，在 Deis 的設計裡面，基本上所有的服務都是包成一個 Image 作為 Continaer 在 CoreOS 運行的。就這點來看，其實是非常符合 Mircoservice 架構的設計。同時我們也可以很輕鬆地將這些服務獨立出來使用，這篇文章討論的 &lt;code>Router&lt;/code> 除了原本的用途外，也很適合用來學習透過 etcd 部署自動化更新設定檔的環境。&lt;/p>
&lt;p>Deis 的原始碼都放在一起，其中 &lt;a href="https://github.com/deis/deis/tree/master/router">Router&lt;/a> 部分是裡面的一個子目錄，那麼就讓我們開始了解運行的架構吧！&lt;/p></description></item><item><title>微妙的 Unreal Engine 4 語言偵測機制</title><link>https://blog.frost.tw/posts/2016/02/02/unreal-engine-4-locale-detect-make-me-confuse/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/02/02/unreal-engine-4-locale-detect-make-me-confuse/</guid><description>&lt;p>最近因為我們團隊將&lt;a href="https://make.moe">遠古神話&lt;/a>上架到 Steam 上面的關係，收到不少歐美玩家表示需要英文語言的支援。
其實這方面也是當初考慮不周的問題，也剛好碰到了國軍的過年年假有比較多的時間可以處理。&lt;/p>
&lt;p>原本預期是一天之內就解決這個問題，不過現實上倒是花了不少額外的功夫去處理。
這也是我們使用 Unreal Engine 4 一直以來的問題，雖然承襲了 UDK 眾多強大的功能，但是卻還未完全的成熟。
從約兩到三個月就會改版一次，而且加入大量功能的情況來看，還有許多需要解決的問題。&lt;/p>
&lt;blockquote>
&lt;p>過去 Epic Games 自己使用也許沒什麼問題，但是當發布成一個工具的時候，就多了非常多細節要處理。&lt;/p>
&lt;/blockquote></description></item><item><title>Deis 架構分析（一）</title><link>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</guid><description>&lt;p>最近隨著 Container 技術的成熟，以及 CoreOS 等工具的出現。開始有一些 PaaS 的工具出現，而 &lt;a href="https://deis.io">Deis&lt;/a> 就是其中一個。&lt;/p>
&lt;p>Deis 本身是受到 &lt;a href="https://heroku.com">Heroku&lt;/a> 所啟發的開源 PaaS 專案，透過 Deis 可以輕鬆的建構 Heroku-like 的 PaaS 環境，若是有能夠管理伺服器的人員，其實可以考慮以這種方式部屬網站。相對 Heroku 來說，基本的 CoreOS Cluster 只要三台機器，以 Linode 2GB 的方案來看，甚至還比 Heroku 單個 2x dyno 還便宜呢！&lt;/p>
&lt;p>關於 Deis 的架構，在官方的&lt;a href="https://docs.deis.io/en/latest/understanding_deis/architecture/">文件&lt;/a>已經有做出說明，所以這系列的文章著重在閱讀原始碼以及探討關於 Deis 是如何實踐 Heroku-like 的 PaaS 環境。&lt;/p>
&lt;blockquote>
&lt;p>我本身是 Heroku 的重度使用者，因為透過 git 管理以及豐富的 Addon 在開發時其實是非常方便的。
不過有時候還是會受到一些限制，這時候 Deis 就提供了很大的幫助。不過這類 PaaS 工具其實還不能說非常成熟，使用上還是會有不少問題，透過了解底層的機制來建構一個自己的版本，在某些情境反而更加容易控制跟維護。&lt;/p>
&lt;/blockquote></description></item><item><title>在 TpGS 2016 展出後的計劃</title><link>https://blog.frost.tw/posts/2016/01/30/the-plan-after-tpgs-2016/</link><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/01/30/the-plan-after-tpgs-2016/</guid><description>&lt;p>去當國軍也快半年了，遊戲的專案幾乎沒什麼進展。
還一直覺得自己在退步，在多媒體、資訊這些變換快速的產業，要當國軍真的是很吃虧啊 XD&lt;/p>
&lt;p>這次鼓起勇氣，去挑戰去年不敢嘗試看看的台北電玩展。
雖然不是面對大眾的 B2C 展區，畢竟我們的目標是去找合作機會跟拓展人脈。
不過這次的展出也算是收穫良多，至少有機會跟一些前輩好好聊天，也碰到許多不一樣的獨立遊戲開發者。
雖然廠商方面大多是提供開發者服務為面向的，但是至少也了解到不少關於亞洲地區業界的狀況。&lt;/p>
&lt;p>今年我們團隊 &lt;a href="https://basaltic.tw">Basaltic Studio&lt;/a> 做了兩件事：&lt;/p>
&lt;ol>
&lt;li>參加 TpGS 2016&lt;/li>
&lt;li>在 Steam 釋出作品&lt;/li>
&lt;/ol>
&lt;p>釋出作品也是也是一個很大的挑戰，這邊就針對今年的計畫好好談談吧！&lt;/p></description></item><item><title>Heroku Cedar 14 - 用 Docker 客製化環境</title><link>https://blog.frost.tw/posts/2015/06/16/heroku-cedar-14-docker-customized-environment/</link><pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/06/16/heroku-cedar-14-docker-customized-environment/</guid><description>&lt;p>最近 Heroku 推出了 &lt;a href="https://blog.Heroku.com/archives/2015/5/5/introducing_heroku_Docker_release_build_deploy_heroku_apps_with_docker">Docker 支援&lt;/a>，也因此我馬上就去試玩了這個功能。&lt;/p>
&lt;p>這篇文章會簡單介紹 Heroku Docker 的運作，以及可以運用的方式。&lt;/p>
&lt;p>文章大致上會涵蓋這些內容：&lt;/p>
&lt;ul>
&lt;li>Heroku Docker Plugin 的運作&lt;/li>
&lt;li>建構客製化環境的 Dockerfile&lt;/li>
&lt;li>利用 Docker 製作 Buildpacks&lt;/li>
&lt;/ul></description></item><item><title>Unreal Engine 4 的自動化測試</title><link>https://blog.frost.tw/posts/2015/06/12/unreal-engine-4-automation-testing/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/06/12/unreal-engine-4-automation-testing/</guid><description>&lt;p>最近幾年做測試似乎變成一個非常熱門的議題，而且也逐漸的被大多開發者了解到做測試的優點。不過，一般的軟體可以做測試倒是沒有什麼問題，那麼遊戲該怎麼做測試呢？&lt;/p>
&lt;p>我自己認為這是一個很難探討的問題，大部份的遊戲就基於不確定性而變得有趣。在充滿不確定的情境下，要做測試就變得非常困難了。&lt;/p>
&lt;p>不過，還是有像是基本的公式計算、數值檢查等等可以做基本的檢查，雖然無法完全的對遊玩上做完整的測試。但是至少可以確保功能上與數值上是以正確的數值做計算。&lt;/p>
&lt;p>那麼，就來談談 Unreal Engien 4 的自動化測試工具 &lt;code>Automation Tools&lt;/code> 吧！&lt;/p></description></item><item><title>SDL 筆記：產生視窗與繪製圖像</title><link>https://blog.frost.tw/posts/2015/05/29/sdl-notes-create-window-and-draws-the-image/</link><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/05/29/sdl-notes-create-window-and-draws-the-image/</guid><description>&lt;p>沒有想到最後還是走上了遊戲開發這條路，同學給我的影響真的很大，而且大家都有一個共同的目標和夢想的感覺很不錯。
雖然讓我下定決心的是因為和同學在合作上太過於順利，讓我們不禁懷疑「正常的團隊運作是這樣嗎？」才讓我決定要跟他們一起做遊戲。&lt;/p>
&lt;p>雖然現在有 Unity3D 跟我們團隊使用的 Unreal Engine 4 但是程式自學，又是受設計教育的我在技術上總是會差人一截，最好的方法莫過於從一些基礎的東西去練習，然後了解底層的運作方式。&lt;/p>
&lt;blockquote>
&lt;p>做 Web 的時候常常會有人在爭辯到底該先學 Framework 還是先學手刻網站這個問題，我認為是「成就感」跟「個人特質」的問題，以我自己來說我建立成就感的個人特質是「先有成果」所以就很適合從 Framework (Game Engine) 學起，當我熟練之後自然會想補足之前缺漏的知識（因此要看個性，有些人就是要 Hardcode 才能有成就感啊！）&lt;/p>
&lt;/blockquote>
&lt;p>知道 SDL 的時間點已經忘記了，印象中只記得國中的時候買過幾本遊戲開發的書卻因為讀不來而沒有繼續學下去。&lt;/p>
&lt;blockquote>
&lt;p>印象中 SDL 應該就是當時在書上看到的，不過書名實在想不起來。只知道是一本綠色封面的書，日本人寫的。&lt;/p>
&lt;/blockquote>
&lt;p>關於入門的學習 &lt;a href="https://www.willusher.io/pages/sdl2/">Willusher&lt;/a> 這個網站的 SDL 入門教學來開始學習，畢竟 SDL2 的文字教學（個人不是很喜歡看影片）似乎不好找，又充斥著 SDL(SDL1) 的教學有時候還挺混亂的！&lt;/p></description></item><item><title>說好的 Modern Web 2015 心得</title><link>https://blog.frost.tw/posts/2015/05/18/modern-web-experience-in-2015/</link><pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/05/18/modern-web-experience-in-2015/</guid><description>&lt;p>今年原本以為沒有機會參加，不過運氣很好的在申請學生專案的時候順利通過審核。&lt;/p>
&lt;p>這次的活動由 iThome 主辦，相較過去社群主導舉辦的研討會有許多地方變得不錯，但也有許多地方變得更差。
變得好的地方大概就是行前通知蠻勤勞的（雖然捷運出口寫錯 XD）還有會有工作人員協助安排位置這幾點都是很不錯的，不過相較於過去社群主導的情況，我認為還是社群比較有經驗應該多多跟社群合作去處理這些問題。&lt;/p>
&lt;p>至於變差的部分，單純覺得是「想學社群的模式卻沒有學好」的感覺，今年我雖然有感受到一點點社群的感覺但是整理來說還是很企業的，雖然沒有什麼不好，不過工作人員的選用讓我覺得有點微妙。司儀跟主持人都很生疏而且咬字不清，有餘剩的時間也沒有幫忙講者確認是否有人想提問跟控制時間。&lt;/p>
&lt;p>另外一個算是心願吧，希望活動能像社群活動一樣是快樂的！開場的時候有說到「來參加這個活動是來休息的」如果單純地聽演講其實沒有太大休息的效果，今年可能是會眾組成的關係所以大家都不太能放開的笑（社群場很常見，也許只是剛好今年講者都不搞笑）另一方面也許是 iThome 的活動本身有濃厚的企業場次味道，大家不敢笑（以前參加過一次微軟的 Hackathon 大家也都不敢笑，下面一排微軟主管壓力很大 XD）&lt;/p>
&lt;p>整體來說不算太差，只是我真的蠻糾結主持人不會主持的問題啊 XD
（介紹時講點有趣的東西可以幫助講者舒緩心情，結束的時候配合講者善用時間就夠拉～）&lt;/p>
&lt;blockquote>
&lt;p>另外就是有朋友聊到，議程安排都是把「同類型」放同一時間，據說不少人因為只聽得懂某一類（Ex. 前端、設計）結果變成聽完一個時段後就不知道能聽什麼，選要聽哪個的時候也很難決定（都想聽，仔細想想我也是這樣 XD）&lt;/p>
&lt;/blockquote>
&lt;p>然後正文開始，糾結這個好像沒用 XD&lt;/p>
&lt;blockquote>
&lt;p>我今年就回家發正念祈禱 iThome 下次會導入社群的團隊幫忙他們辦吧！&lt;/p>
&lt;/blockquote></description></item><item><title>2015 新一代感想</title><link>https://blog.frost.tw/posts/2015/05/06/2015-yodex-impressions/</link><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/05/06/2015-yodex-impressions/</guid><description>&lt;p>參加完新一代就差不多是要等畢業了（茶&lt;/p>
&lt;p>文章開始之前，一定要先靠北一下新一代，呼籲大家在該死的投票時不要因為去參加新一代&lt;strong>很方便&lt;/strong>就不選自己辦校外展，辦校外展雖然比較累但是至少還可以學個策展的經驗，也不會被人規劃超小的場地繳根本沒有減半一樣的場地費，還不用把門票錢送給人家，也不用因為贊助商獎項很多變成當人家充場面的工具人，傻傻等那只有 8% 比例的獎項頒完。&lt;/p>
&lt;blockquote>
&lt;p>不過你們沒被陰過，不懂這感覺。沒關係，參加一次就懂了！反正是最後一次麻⋯⋯
是說評審的評分標準，最好還是送個不會入圍的 DEMO 去，自己另外曝光還比較賺喔～～&lt;/p>
&lt;/blockquote>
&lt;p>看到這行就是我要開始寫了拉 XD&lt;/p></description></item><item><title>mRuby on Web</title><link>https://blog.frost.tw/posts/2015/04/10/mruby-on-web/</link><pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/04/10/mruby-on-web/</guid><description>&lt;p>忙裡偷閒玩了一下 Emscripten 將 mRuby 拉到 Web 上面運行。&lt;/p>
&lt;p>最初是看到 &lt;a href="https://Github.com/xxuejie/webruby">WebRuby&lt;/a> 這個專案的應用 &lt;a href="https://joshnuss.github.io/mruby-web-irb/">Webirb&lt;/a> 才決定要挑戰將 mruby 丟到 Web 上面跑。&lt;/p>
&lt;blockquote>
&lt;p>其實這個過程中 WebRuby 給我很多參考方向，才讓我得以順利完成 mruby on Web 的挑戰。&lt;/p>
&lt;/blockquote></description></item><item><title>在 SITCON 2015 之後</title><link>https://blog.frost.tw/posts/2015/03/08/after-the-sitcon-2015/</link><pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/03/08/after-the-sitcon-2015/</guid><description>&lt;p>昨天（03/07）是 SITCON 2015 也是我在 SITCON 擔任工作人員的最後一年。
明年就要畢業了，算是終於退休了⋯⋯（大概會被自動升級成顧問）&lt;/p>
&lt;p>這篇文章應該不會寫太長，我還要去填坑 XD&lt;/p></description></item><item><title>Open Frameworks 與 MRuby</title><link>https://blog.frost.tw/posts/2015/02/18/open-frameworks-and-mruby/</link><pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/02/18/open-frameworks-and-mruby/</guid><description>&lt;p>自從畢製開始與同學開發遊戲後，我就開始喜歡嘗試運用一些工具如 HTML5、Mono、Processing 等來製作一些屬於自己的「遊戲框架」&lt;/p>
&lt;p>自從上次嘗試使用 Mono 與 MRuby 結合後，這次在與朋友的閒聊中回想起了 Open Frameworks 這套工具。
Open Frameworks 基本上被稱為是 C++ 版本的 Processing 就各方面來說比 Processing 改進不少，至少就我這幾天的體驗來看，以我目前的實力已經可以純熟運用了！&lt;/p>
&lt;blockquote>
&lt;p>過去曾有一段時間嘗試玩過，但是因為沒有 Project Generator 輔助建構專案，再加上與 C++ 其實不是那麼的熟悉，因而放棄。這次透過 Unreal Engine 的經驗，以及上次 MRuby 的整合讓我順利的開始使用 Open Frameworks。&lt;/p>
&lt;/blockquote>
&lt;p>這篇文章主要會分享我使用 Open Frameworks 開啟一個 Ruby 檔案，並且執行裡面的方法在介面中繪製圖像的做法。
目前我認為這個方法其實還不太完善，不過作為初次的嘗試可以算是一個不錯的成果。&lt;/p></description></item><item><title>React.js + Parse 實做簡易留言板</title><link>https://blog.frost.tw/posts/2015/02/18/reactjs-parse-doing-simple-message-board/</link><pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/02/18/reactjs-parse-doing-simple-message-board/</guid><description>&lt;p>前一陣子 SITCON 文創組冬季訓練最後一天，我安排了這個課程給我們的新成員。
雖然 SITCON 文創組看似是個需要「技術」的團隊，不過現實上我們倒是花很多時間在思考跟設計上，沒辦法找到設計相關科系的新成員稍稍遺憾。&lt;/p>
&lt;p>不過因為有製作網站的需求，因此安排了這個課程，透過學習 React.js 以及結合 Parse 去熟悉一些基本的前端技巧。&lt;/p>
&lt;p>注意事項：&lt;/p>
&lt;ol>
&lt;li>文中的範例全部都以 CoffeeScript 撰寫&lt;/li>
&lt;li>本文不會提及 Browserify 的配置與應用（當天有介紹過，練習時是使用我配置好的 gulp task）&lt;/li>
&lt;li>這是在不考慮 UI/UX 以及美術的前提下製作的&lt;/li>
&lt;li>文中不會解釋太多 React.js / Flux 的基本概念（請上官網 or ReactJS.tw 社團學習）&lt;/li>
&lt;/ol>
&lt;p>那麼，就開始吧！&lt;/p></description></item><item><title>將遊戲場景帶入網頁</title><link>https://blog.frost.tw/posts/2015/01/13/bring-the-games-scene-into-webpage/</link><pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/01/13/bring-the-games-scene-into-webpage/</guid><description>&lt;p>昨晚公開了畢業製作的官網「&lt;a href="https://www.make.moe">遠古神話 - The Lost Mythologies&lt;/a>」並且使用了「全景攝影技術」在網站上。&lt;/p>
&lt;blockquote>
&lt;p>喜歡我們的話請到&lt;a href="https://www.facebook.com/Basaltic.Studio?fref=nf">粉絲專頁&lt;/a>幫我們按個讚 XD&lt;/p>
&lt;/blockquote>
&lt;p>沒想到反應還蠻熱烈的，雖然官網目前也只有全景預覽以及 LOGO 而已，不過似乎造成了一點點話題。&lt;/p>
&lt;p>那麼，這個效果到底是如何做出來的呢？這篇文章就會簡單的說明。&lt;/p>
&lt;p>主要的目標大致上有：&lt;/p>
&lt;ul>
&lt;li>順暢的瀏覽&lt;/li>
&lt;li>清晰的畫面&lt;/li>
&lt;li>全景圖片的製作&lt;/li>
&lt;/ul></description></item><item><title>Container Summit 2014：未來的雲端</title><link>https://blog.frost.tw/posts/2014/12/12/container-summit-2014-the-future-of-the-cloud/</link><pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/12/12/container-summit-2014-the-future-of-the-cloud/</guid><description>&lt;p>其實原本沒有打算參加的，不過最後還是禁不起誘惑選擇參加這場活動。&lt;/p>
&lt;p>主要是因為有兩場議程是我希望在近期解決的問題，因此現場聽講肯定會是一個比較好的方法。&lt;/p>
&lt;p>&lt;img src="https://user-image.logdown.io/user/52/blog/52/post/245946/FyIvUNQnSRa5aNaLWzK3_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-12%20%E4%B8%8B%E5%8D%8811.26.55.png" alt="螢幕快照 2014-12-12 下午11.26.55.png">&lt;/p>
&lt;p>實際上，我其實算是蠻早接觸 Docker 的使用者，不過當時除了建建 Container 之外也不能做些什麼，因此很自然的就沒有多加在意了（現在使用起來發現 Docker 多了不少功能和改進⋯⋯）&lt;/p>
&lt;p>之後也有 Docker.Taipei 的活動，不過也沒有深入接觸，算是蠻可惜的⋯⋯&lt;/p>
&lt;p>不過，這次活動結束之後我認為善用 Docker 應該會成為一個很有利的技術。&lt;/p></description></item><item><title>TGDF 2014：重燃的遊戲夢</title><link>https://blog.frost.tw/posts/2014/12/07/tgdf-2014-i-want-to-make-a-game-again/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/12/07/tgdf-2014-i-want-to-make-a-game-again/</guid><description>&lt;p>心得文沒有趁熱寫果然很容易忘記，這次來嘗試使用炫砲的標題來開始這篇文章。&lt;/p>
&lt;p>這次會參加 TGDF（台北遊戲開發者論壇）其實是因為到了大三確定要做遊戲，卻每次都因為這類活動都在上課日，礙於請假問題而沒有去參加（組員都不太喜歡請假）現在大四課比較少，就跟老師請個假去參加了！&lt;/p>
&lt;p>雖然是擔任志工，不過基本上規劃還算不錯，人力需求非常的低有蠻多時間可以去聽演講。&lt;/p>
&lt;p>關於這部分，一方面是餐飲的部分由參加者自行處理，另一方面是協辦單位也有提供人力支援。再加上場地永遠只會有兩道門可以進出，讓志工人數的需求減少到非常低。&lt;/p>
&lt;p>那麼，就來看看今年的議程吧！&lt;/p></description></item><item><title>PHPConf 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/10/19/after-phpconf-2014-experience/</link><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/10/19/after-phpconf-2014-experience/</guid><description>&lt;p>這次參加 PHPConf 不是以會眾的身份，而是以講師的身份參加。回想起來，三年前左右因為朋友的推薦參加了 COSCUP 接著得知了 PHPConf 然後就開始陸陸續續的參加各種社群的活動。&lt;/p>
&lt;p>三年前左右，剛好是我升上大學的時候。那時其實已經經歷過好幾次的瓶頸，光靠自學其實是很難學好一項技能的。除了老師之外，我想就是社群這種平行交流的地方可以獲取「書本」跟「文字資料」以外的知識，很多東西真的要靠交談、人與人之間的友情，才能夠得到一些「特別的經驗」或者「特別的方法」&lt;/p>
&lt;p>當了三年多的聽眾，我在這短短的時間內透過每一個 Conference 獲得了各種不同的技能與技巧，在今年的 PHPConf 我了解到我已經從一個「接收者」變成一個「分享者」的角色，正好也是在我即將從大學畢業的這個階段。&lt;/p>
&lt;p>正因為我是受到「社群的恩惠」而成長，所以我想在之後我還是會繼續投入社群的活動。以一個工作人員，或者是講師的角色來做這件事情，即使不是每一個人都能透過這種方式成長，但是在未來，讓 Conference 繼續經營下去、舉辦的更好，都有可能多幫助到一個像我這樣受到社群滋潤而成長的人，這也是我從 SITCON 擔任工作人員的經驗，還有從 COSCUP、PHPConf、RubyConf、JSDC、WebConf 這些活動所體會到的。&lt;/p>
&lt;p>總而言之，我會盡可能以工作人員的身份來參與未來幾年的社群活動，是時候該回饋給社群了 XD&lt;/p>
&lt;p>那麼，來談談今年 PHPConf 的議程吧！&lt;/p></description></item><item><title>JSDC 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/10/13/after-jsdc-2014-experience/</link><pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/10/13/after-jsdc-2014-experience/</guid><description>&lt;p>總覺得因為大四忙著畢業製作反而沒有太多時間寫文章，不過參加 Conference 總是會習慣寫篇心得記錄一下今年發生的事情，反而讓網誌充滿了心得啊 XDD&lt;/p>
&lt;blockquote>
&lt;p>我快要變成寫心得高手拉！！&lt;/p>
&lt;/blockquote>
&lt;p>今年的 JSDC 有很大的轉變，其實我覺得這是一件「非常有勇氣」的事情。自從我接觸社群、Conference 到現在也有四年多，正好在這段時間台灣的社群活動也越來越熱烈，從剛開始一年只會參加兩三次活動，到今年我平均一周大概就有一天會到臺北。就可以看到社群的發展，以及許多人熱血的在付出。&lt;/p>
&lt;p>不過，從規模、參與者、活動品質個個面相來看，社群也開始面臨一些需要轉變的問題。跟三、四年前不同，我們也很多地方已經無法用過去小規模的方式去舉辦，而國外講者的比例也逐漸地增加，某一方面而言是這些活動已經有一定的知名度，已經逐漸無法用過去的方式來舉辦（這也是最近我們 SITCON 籌備團隊少數幾位組長開始在爭辯的問題，我們該何去何從、該如何改變以繼續發展下去等等⋯⋯）&lt;/p>
&lt;p>所以，就這一點而言我認為 JSDC &lt;strong>非常勇敢的&lt;/strong>幫大家做一次嘗試，嘗試用國際等級的票價、嘗試讓議程更加的國際化（除了 JSDC 之外，我只有在 RubyConf 碰過這麼多國外講者）、嘗試讓活動的品質提高。&lt;/p>
&lt;p>簡單來說，要踩雷的話，總有一個人先去踩看看，這個人就是 JSDC 的籌備團隊。&lt;/p></description></item><item><title>Unreal Engine 4 - 用 C++ 自訂 Pawn 物件</title><link>https://blog.frost.tw/posts/2014/10/05/unreal-engine-4-using-cpp-customize-pawn-object/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/10/05/unreal-engine-4-using-cpp-customize-pawn-object/</guid><description>&lt;p>雖然 MRuby in C# 系列暫時沒辦法繼續撰寫，但是 Unreal Engine 4 系列大概會在畢業製作完成之前，陸陸續續地以筆記的形式更新出來。&lt;/p>
&lt;p>實際上，用 Unreal Engine 4 開發遊戲是不太需要用 C++ 來處理的，內建的 Blueprints 功能就具備非常優質的設計，也算是整個引擎中不論美術、程式都會經常接觸的功能。其特色就是人人都能懂，美術可以用來控制動畫、程式可以用來設計 AI 跟遊戲，上手的難度也非常低。&lt;/p>
&lt;p>那麼，會遭遇使用 C++ 來處理的情況是什麼呢？&lt;/p>
&lt;p>基本上可以分成兩種，第一種就是效能問題，目前還沒有碰過，不過以 C++ 撰寫的程式碼肯定會比較順暢（雖然我很懷疑 Blueprints 所編譯的成品就能產生接近 C++ 等級的效能）&lt;/p>
&lt;p>第二種則是 Unreal Engine 初期沒有考慮到，或者還未支援的的部分。像是在 4.5 的 UMG (Unreal Motion Graphics) 功能推出之前，需要用到 Slate UI 來輔助建構遊戲界面，就勢必得用 C++ 才能解決。&lt;/p>
&lt;p>總而言之，這篇文章在討論的就是第二種情況，我們需要的功能還未在 Unreal Engine 4 上面「好好的」運作。&lt;/p>
&lt;p>註：程式結構太複雜這點，原本想算進去。不過因為 Blueprints 不論註解還是開 Functions 都能做到，很難用這點來說是一種缺點⋯⋯&lt;/p></description></item><item><title>MRuby in C# - 因 RPG Maker 的慘劇（二）</title><link>https://blog.frost.tw/posts/2014/09/28/mruby-in-csharp-the-tragedy-of-rpg-maker-2/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/09/28/mruby-in-csharp-the-tragedy-of-rpg-maker-2/</guid><description>&lt;p>前一篇文章討論了關於 C# 執行一段 Ruby 程式碼並且取得執行結果（字串）的做法。
不過，光是這樣在 C# 使用 MRuby 的意義並不大，我們需要結合 Ruby 的 DSL 特性，讓自製的 RPG Maker 可以更加簡單的被用於製作遊戲（最終目的）&lt;/p>
&lt;p>也因此，我們需要能夠讓 C# 中的一些 API 可以在 Ruby 中被呼叫以及使用。
那麼，能夠從 C# 定義 Ruby 的 Module / Class 和 Method 就非常的重要，因為如果無法這樣做，那麼就無法讓 Ruby 執行 C# 的程式碼。&lt;/p></description></item><item><title>Zigfu 跨平台的 Kinect SDK</title><link>https://blog.frost.tw/posts/2014/09/13/zigfu-kinect-across-the-platform-sdk/</link><pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/09/13/zigfu-kinect-across-the-platform-sdk/</guid><description>&lt;p>之前和系上老師借了一個多學期的 Kinect 卻只有做完用 Mac 連接 Kinect 並且搭配 Unity3D 的功課，就一直沒有成果。
暑假也即將結束，緊接而來的就是全力投入在畢業製作，不過在此之前，還是得先把答應老師的功課做完。&lt;/p>
&lt;p>雖然時間不足以製作一款遊戲，但是將 Zigfu 這款非常好用的工具使用介紹完整的說明，我想多少也算是能夠完成一部份的任務了！&lt;/p>
&lt;hr>
&lt;p>Zigfu 基本上是設計給 Web 使用的，因此目前支援是 JavaScript 和 Unity3D 兩款（Flash 過了半年依舊開發中⋯⋯）
不過 Zigfu 卻替 Mac 使用者解決了一個問題，就是 OpenNI / OpenNI2 的安裝，沒有驅動就無法使用 Kinect 是 Mac 用戶的痛。&lt;/p>
&lt;blockquote>
&lt;p>不過很可惜的是，目前最新的 Mac 驅動只能順利與 Kinect 溝通一分鐘左右，之後就是當機。
也因此，這系列的文章都是針對 Windows 所說明的，但是成品對 Mac 的支援是確定的，即使會當掉⋯⋯&lt;/p>
&lt;/blockquote>
&lt;p>至於 Zigfu 大致上做了什麼呢？
將驅動程式包裝起來，協助使用者安裝（Windows 使用者需要自己安裝驅動）並且提供 ZDK (SDK) 讓開發者可以用統一的界面，存取 Kinect（官方）、OpenNI、OpenNI2 的 Middleware。&lt;/p>
&lt;blockquote>
&lt;p>關於 OpenNI / OpenNI 2 的介紹，可以參考&lt;a href="https://viml.nchc.org.tw/blog/paper_info.PHP?CLASS_ID=1&amp;amp;SUB_ID=1&amp;amp;PAPER_ID=491">這篇文章&lt;/a>。&lt;/p>
&lt;/blockquote></description></item><item><title>使用 Zigfu 的骨架功能</title><link>https://blog.frost.tw/posts/2014/09/13/use-the-zigfu-skeleton-features/</link><pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/09/13/use-the-zigfu-skeleton-features/</guid><description>&lt;p>接續&lt;a href="https://blog.frost.tw/posts/2014/09/13/zigfu-kinect-across-the-platform-sdk/">上一篇&lt;/a>文章的介紹，這一篇文章會針對 Kinect 在遊戲類型應用上最為重要的功能「骨架」來做討論。&lt;/p>
&lt;p>在 Zigfu 中，已經提供了 &lt;code>ZigTrackedUser.Skeleton&lt;/code> 這個物件讓我們可以存取骨架，與前一篇文章不同的地方在於，我們會用 &lt;code>Zig_UpdateUser&lt;/code> 這個方法存取骨架。&lt;/p></description></item><item><title>MRuby in C# - 因 RPG Maker 的慘劇（一）</title><link>https://blog.frost.tw/posts/2014/09/04/mruby-in-csharp-the-tragedy-of-rpg-maker-1/</link><pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/09/04/mruby-in-csharp-the-tragedy-of-rpg-maker-1/</guid><description>&lt;p>最近看到朋友提起 RPG Maker 又勾起我在 Mac 上使用 RPG Maker 的野心，雖然之前用 Wine 順利跑了起來，不過既然能寫 Ruby 當然要用各種奇怪的方式去玩弄。&lt;/p>
&lt;p>結果，當我發現內建的 Library 要做到我想做的事情很困難的時候，腦抽的我決定自己做一個！&lt;/p>
&lt;p>不過，這年頭不跨平台其實還蠻空虛的，所以就從能夠跨平台來做選擇，至於為何會選 Mono 和 C# 大概就是受到 Unity3D 跟 Unreal Engine 4 兩個目前都是非常有名的遊戲引擎影響吧！
（上述兩個引擎都有使用 Mono 來協助實踐跨平台的功能）&lt;/p></description></item><item><title>Rails Girls 4 活動感想</title><link>https://blog.frost.tw/posts/2014/08/31/rails-girls-4-event-impressions/</link><pubDate>Sun, 31 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/08/31/rails-girls-4-event-impressions/</guid><description>&lt;p>好久沒寫部落格了，一些技術類的文章都沒時間寫，草稿也越積越多⋯⋯
不過參加活動的不馬上寫完，很快就會忘記在做什麼事情啊 XDD&lt;/p>
&lt;p>這次 RG4 超幸運被選為教練，然後我又長知識了～&lt;/p>
&lt;p>雖然自己是讀設計學院，但是不管怎樣都不會有同學會朋友這麼認真的學這方面的知識。
其實某種意義上還蠻孤單的，不過對其他人來說畢竟不是必要的，所以也不能抱怨啊 XD&lt;/p>
&lt;p>那麼，就來說說 8/29 跟 8/30 這兩天做了什麼吧！&lt;/p></description></item><item><title>COSCUP 2014 會後心得不能吃</title><link>https://blog.frost.tw/posts/2014/07/20/coscup-after-2014-experience/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/07/20/coscup-after-2014-experience/</guid><description>&lt;p>「當會眾的資歷到了某個程度，就只能交朋友了⋯⋯」&lt;/p>
&lt;p>其實今年我不知道我要幹嘛，可能是超級累的關係所以就只聽了一部分有趣的。
（從人社館跑去活動中心超累的，尤其是你收到中獎通知要跑回來領獎品的那一個瞬間 XDDDD）&lt;/p>
&lt;p>今年 COSCUP 到底在幹嘛呢？&lt;/p>
&lt;p>「推你 SITCON 坑！」「推你 SITCON 坑！」
「推你 SITCON 坑！」「推你 SITCON 坑！」&lt;/p></description></item><item><title>自製 Blogger 佈景的小技巧</title><link>https://blog.frost.tw/posts/2014/06/15/tips-of-make-blogger-theme/</link><pubDate>Sun, 15 Jun 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/06/15/tips-of-make-blogger-theme/</guid><description>&lt;p>據說自從期末開始後，就很久沒有寫網誌了⋯⋯&lt;/p>
&lt;p>就在期末快結束的某一天晚上，高中同學傳訊息問我：「有在忙嗎？」
於是，我就這樣開始拯救快被&lt;!-- raw HTML omitted -->二一&lt;!-- raw HTML omitted -->的好朋友拉 XD&lt;/p>
&lt;p>老師：「阿你們就回去改一改 Blogger 佈景當期末」&lt;/p>
&lt;p>從以前開始，我就一直覺得 Blogger 的佈景超難改，那鬼一般的 XML 總是讓我的網誌東少一塊西少一塊（崩潰
不過為了拯救同學，我只好開始重新面對它⋯⋯
（至於我一直都沒有用 Blogger 當網誌，有很大的原因就是這東西 Orz）&lt;/p></description></item><item><title>2014 新一代設計展心得</title><link>https://blog.frost.tw/posts/2014/05/18/2014-yodex-experience/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/05/18/2014-yodex-experience/</guid><description>&lt;p>咳了一周都還沒好，還好週六那天沒有很嚴重不然幾乎逛不下去。
（看起來感冒問題比例很低，反倒是有類似咳嗽症狀的問題可能性比較高，總之希望趕快好啊⋯⋯）&lt;/p>
&lt;p>今年因為互動老師的作業，早上先去繞了一下多媒體類的作品（雖然畢製做遊戲⋯⋯）
也因此非常感謝我的組員（互動和畢製）分別替我看了大部份的作品，還有陪我先逛了多媒體類的作品。&lt;/p>
&lt;p>雖然兩個類型的照片、觀看數量差不多，不過我這篇文章還是以畢製的遊戲類為主去寫。&lt;/p></description></item><item><title>用 React.js 實作拖曳與元件容器</title><link>https://blog.frost.tw/posts/2014/05/04/reactjs-implementation-of-the-drag-component-containers/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/05/04/reactjs-implementation-of-the-drag-component-containers/</guid><description>&lt;p>「很久很久以前，有一個叫做 OwaBin (芋冰) 的食物，可以讓設計師用拖拉就做出 Launcher 這真是太神奇了！」&lt;/p>
&lt;p>原本想說可以很歡樂的再 HanGee 幫忙設計跟網站，但是畢製的不可逆性質，讓我得把事情先推掉。
（也包括 SITCON 的任務，現在也在培養新人了⋯⋯）&lt;/p>
&lt;p>半個月前討論這個計劃時，我非常有興趣，所以馬上做了一個簡易的測試版。
這篇文章會來說明這個功能。&lt;/p>
&lt;p>預期完成的功能如下：&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>RubyConf TW 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/04/26/rubyconf-tw-after-2014-will-experience/</link><pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/04/26/rubyconf-tw-after-2014-will-experience/</guid><description>&lt;p>接觸 Rails 快三年，今年終於有機會參加 RubyConf 了！
除了 PHP 之外，其實 Ruby 對我來說也算是一個有特別感情的語言，主要是國中時期的 RPG Maker 跟剛開始學習 PHP 的時候還分不出語言，也買了幾本 Ruby 跟 Rails 的書。&lt;/p>
&lt;p>今年的 RubyConf 似乎蠻多新的工作人員，所以第一天有點不順。
（不過對我來說是可以接受的範圍，議程品質非常高，不過我想這也會是許多 Conference 未來會碰到的問題。）&lt;/p>
&lt;p>然後不知道是不是錯覺，我整個覺得 RubyConf 給我一種蠻優雅的感覺 XD
（其他 Conference 各有特色，但是第一次有這種感覺真的蠻有趣的 XD）&lt;/p></description></item><item><title>Unreal Engine 4 collaboration with SVN</title><link>https://blog.frost.tw/posts/2014/04/07/unreal-engine-4-collaboration-with-svn/</link><pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/04/07/unreal-engine-4-collaboration-with-svn/</guid><description>&lt;p>這幾年來 3D 遊戲的門檻隨著 Unity3D 的出現，從原本 Open Source 的 Ogre Engine 等，層次一口氣提高到了「商業運用」的等級，支付一定的費用給引擎公司，也許就可以用到 3A 遊戲等級的引擎。只要有付費，許多問題與麻煩都可以交給引擎公司，相較 Open Source 的形式，某種意義上也是更加容易的製作遊戲（至少不會有問題找不到解法，大絕就是呼叫客服）&lt;/p>
&lt;p>自從 UE3 開放免費下載（抽成形式）後，這次的 UE4 稍微改了模式，月費制加抽成（5%）並且在最近公佈下載與付費的方式。&lt;/p>
&lt;p>而我的同學長久以來就有著要用 Unreal Engine 的怨念，但因為我一直以「在 Mac 上不方便」為理由，讓他乖乖選擇 Unity3D 不過 UE4 來勢洶洶的支援了 Mac 我也不得不認命⋯⋯&lt;/p></description></item><item><title>PaaS 入門指南（四）</title><link>https://blog.frost.tw/posts/2014/04/02/getting-started-paas-4/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/04/02/getting-started-paas-4/</guid><description>&lt;p>終於，要到完結篇了（誤
這篇介紹完 Heroku 之後，就會開始寫進階運用的部分。
（其實已經冒出幾篇，基本上不會針對 PaaS 而是一些在 Heroku 上面的運用做討論。）&lt;/p>
&lt;p>不過，寫這篇之前，其實我很想寫一下 Unreal Engine 4 collaboration with SVN 這篇，因為最近 UE4 推出，雖然台灣地區還沒開放購買（月費約台幣六百，買一次就可以拿到該月版本，可不續費更新）但是同學硬是找到原始碼（其實就在 Github 只不過付費用戶才能看到）&lt;/p>
&lt;p>經過幾番波折，就這樣成功在 Windows / Mac 上跑起來，於是就開始了 UE4 研究之旅。
總之，下一篇大概就是 UE4 的 SVN （各種雷，完全找不到「SVN update」的功能⋯⋯卻可以 commit 啊）&lt;/p></description></item><item><title>Capistrano to Vagrant 自動部署心得</title><link>https://blog.frost.tw/posts/2014/03/24/capistrano-to-vagrant-automated-deployment-experience/</link><pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/03/24/capistrano-to-vagrant-automated-deployment-experience/</guid><description>&lt;p>之前寫過一篇關於 &lt;a href="https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/">Vagrant + Capistrano + GitLab&lt;/a> 的自動化部署介紹。&lt;/p>
&lt;p>不過當時因為一些問題，卡著沒有繼續完成測試。
最近因為某些原因，需要一個 Nightly-like (不一定會每日更新，取決于 commit) 的環境，所以只好硬著頭皮把全部的問題解決了⋯⋯&lt;/p></description></item><item><title>SITCON 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/03/17/sitcon2014/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/03/17/sitcon2014/</guid><description>&lt;p>分心了一整天，趕緊補一下 SITCON 2014 的心得啊（趴地&lt;/p>
&lt;p>今年依舊是工作人員，各種意義上就是還是學生的時候就都奉獻給 SITCON 這樣的感覺拉～
只是今年同時也成為了講師，扣掉 Lightning Talk 之外，這是第一次上台講。&lt;/p>
&lt;p>去年 COSCUP 在台上的時候，整個人是發抖狀態不能好好講完內容（面對可能有快千人的壓迫感可能真的不一樣）
這次一上台就是很淡定，只是速度很快，快到遭到會眾反映 XD&lt;/p>
&lt;p>不過今年超累，所以除了主持之外幾乎沒有去聽其他議程（下午講完就累癱了 XD）
所以只好來補充一下我的 Talk 跟分享一下感想拉～&lt;/p></description></item><item><title>Travis CI 的 Deploy 功能</title><link>https://blog.frost.tw/posts/2014/02/25/travis-ci-the-deploy-features/</link><pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/25/travis-ci-the-deploy-features/</guid><description>&lt;p>最近收到一個 Issue 是關於我製作的 &lt;a href="https://Github.com/elct9620/Heroku-buildpacks-PHP-with-phalcon">Heroku Buildpacks&lt;/a> 有問題，沒辦法使用 Travis CI 的 Deploy 功能。&lt;/p>
&lt;p>因為寫 Test 的習慣養成挺困難的，再加上獨自開發與大多是半遊玩性質的關係，其實幾乎沒有使用 Travis CI 的習慣，不過這次因為這個 Issue 我稍微研究了 Travis CI 的功能以及 Deploy 功能。&lt;/p>
&lt;p>這算是一個很方便的功能，尤其是網站專案來說，如果在 Deploy 後馬上就發生問題，也是非常不方便。那麼，一般 Git 的專案來說，我們通常都是直接進行 Deploy 即使在本機事先做過一次測試，但是總是會有忘記的時候。&lt;/p>
&lt;p>此時，透過持續整合服務的自動 Deploy 功能來協助，就可以在確保所有測試都沒問題的狀況下才進行 Deploy 也比較能夠自動化。&lt;/p></description></item><item><title>學生接案的報價技巧</title><link>https://blog.frost.tw/posts/2014/02/20/the-case-for-student-how-to-set-price/</link><pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/20/the-case-for-student-how-to-set-price/</guid><description>&lt;p>會寫這篇文章是因為昨晚學弟（非系上）問我他現在接了一個案子，該怎麼報價。
然後我就開始問他一些問題，來當作報價的建議依據。&lt;/p>
&lt;p>同時也發現到，其實很多再接案用於「報價」的自我判斷，學弟也沒有什麼概念。我想應該也有不少人會有這方面的問題，所以就打算來寫一篇文章分享一下我的報價技巧。&lt;/p>
&lt;p>不過我已經有一年左右沒有接案了，另外就是這些「技巧」會依照行業、經營方式有所不同，這只是我個人的計算方式。
當然，裡面仍有許多「基本要素」是學生再接案的時候會忽略的，這篇文章另一方面是要提醒各位同學這個問題。&lt;/p>
&lt;p>順帶一提，網路上討論這個主題的人似乎不多，難怪學弟會抓不太到方向。&lt;/p></description></item><item><title>PaaS 入門指南（三）之二</title><link>https://blog.frost.tw/posts/2014/02/17/getting-started-paas-3-2/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/17/getting-started-paas-3-2/</guid><description>&lt;p>據說&lt;a href="https://blog.frost.tw/posts/2014/02/04/getting-started-paas-3">PaaS 入門指南（三）&lt;/a>網址設錯，我要開始寫才發現 XD&lt;/p>
&lt;p>這篇文章會來示範如何用 OpenShift 架設 WordPress 網誌，在此之前要先告知大家。
最近 AppFog 決定改變方針，已經註冊的用戶免費方案降為 512MB 而之後不開放免費方案申請（假設經驗是對的，過幾年 AppFog 的免費用戶大概就會被停了吧 XD 上次是取消網址⋯⋯）&lt;/p>
&lt;p>也因此，之後的文章講完基本運用後，就不會另外提 AppFog 的使用（畢竟我目標再讓大家先免費體驗，然後選擇喜歡的付費嘛～）
當然，我主要還是討論 Heroku 的運用（不過那是進階了，需要有一定基礎知識的人才能夠玩起來～）&lt;/p>
&lt;p>那麼，我們進入正題。&lt;/p></description></item><item><title>概觀響應式網頁設計</title><link>https://blog.frost.tw/posts/2014/02/13/overview-of-responsive-web-design/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/13/overview-of-responsive-web-design/</guid><description>&lt;p>這周都在忙 SITCON 的網站，結果就錯過週二寫 PaaS 入門指南的時間了（剛剛看 GA 還發現大家都已經習慣週二來晃～）
這篇文章其實是順便當寒假作業（雖然老師沒強制，不過剛好可以複習跟檢視我對 RWD 的熟悉度）&lt;/p>
&lt;p>其實我一直對 W3C 標準跟歷史不太熟，所以沒辦法像許多高手根據標準跟歷史來討論這些網頁技術上的問題。
不過還好，我多少算是有經驗跟實作，以下就從我所「知道」的 Responsive Web Design 來談談吧！&lt;/p>
&lt;p>這邊文章大致上會從這些方向去討論：&lt;/p>
&lt;ul>
&lt;li>Responsive Web Design 的過去&lt;/li>
&lt;li>Responsive Web Design 的現在&lt;/li>
&lt;li>Responsive Web Design 的工具&lt;/li>
&lt;li>Responsive Web Design 的運用&lt;/li>
&lt;/ul>
&lt;p>我想又會是篇很長的文章，大家就泡個茶慢慢讀吧 XD&lt;/p></description></item><item><title>PaaS 入門指南（三）</title><link>https://blog.frost.tw/posts/2014/02/04/getting-started-paas-3/</link><pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/04/getting-started-paas-3/</guid><description>&lt;p>過年我就淡定放假不寫文了（被拖走
根據 Google Analytic 統計，週二的這篇文章會讓訪客增長 XD&lt;/p>
&lt;p>上一篇極其混亂的 &lt;a href="https://blog.frost.tw/posts/2014/01/21/getting-started-paas-2">PaaS 入門指南（二）&lt;/a>已經簡易的向大家介紹相關工具的安裝（各種痛苦啊那個，感覺 AppFog 的對 Windows 比較友善⋯⋯）&lt;/p>
&lt;p>這篇我們先休息一下，因為我發現字太多我寫很累看的人好像也很累 XD
先來簡易介紹一下 AppFog / OpenShift 的快速安裝功能。&lt;/p></description></item><item><title>Using Laravel and HHVM on Heroku</title><link>https://blog.frost.tw/posts/2014/01/26/using-laravel-and-hhvm-on-heroku/</link><pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/26/using-laravel-and-hhvm-on-heroku/</guid><description>&lt;p>會寫這篇是前一陣子 HHVM 突然又被大家撈起來討論，看起來應該是有啥新進化吧 XD
那時身為專業的阿宅，一定要馬上裝來玩一下。&lt;/p>
&lt;p>隨著時間的流逝，又有人發現用 HHVM 可以讓 Composer 跑更快一點（超自然啊！）
我又再次回想起這神奇的東西⋯⋯
&lt;!-- raw HTML omitted -->現實是 Composer 跑太慢被 HHVM 斷開魂結&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>當時我就想，既然我都搞了 &lt;a href="https://Github.com/elct9620/Heroku-buildpacks-PHP-with-phalcon">Phalcon on Heroku&lt;/a> 這東西，不如再來搞一個 HHVM 版本吧！&lt;/p>
&lt;p>沒想到&lt;a href="https://Github.com/hhvm/Heroku-buildpack-hhvm">官方&lt;/a>竟然無情的已經做好了，於是我只好轉戰 Laravel 然後冒險就這樣開始了（才沒有 XD&lt;/p>
&lt;blockquote>
&lt;p>PaaS 入門指南還沒斷，不過人生總是需要調味一下，就先讓我寫些別的吧 XD&lt;/p>
&lt;/blockquote></description></item><item><title>PaaS 入門指南（二）</title><link>https://blog.frost.tw/posts/2014/01/21/getting-started-paas-2/</link><pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/21/getting-started-paas-2/</guid><description>&lt;p>在第一篇文章 &lt;a href="https://blog.frost.tw/posts/2014/01/15/getting-started-paas-1/">PaaS 入門指南（一）&lt;/a>已經簡單介紹了 PaaS 的基本概念，還有一些常見的 PaaS 服務。&lt;/p>
&lt;p>這篇文章，則會介紹使用 PaaS 所需的基本技能以及軟體。雖然使用 PaaS 的方式大多在服務提供者的網站上會有簡易的介紹，但是如果想要體驗各式的 PaaS 最好還是能夠熟悉這些工具的基本操作。&lt;/p></description></item><item><title>PaaS 入門指南（一）</title><link>https://blog.frost.tw/posts/2014/01/15/getting-started-paas-1/</link><pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/15/getting-started-paas-1/</guid><description>&lt;p>這一系列的文章是準備寫給對雲端有興趣，或者想嘗試架設網站的人。&lt;/p>
&lt;p>內容的部分，這篇文章會對幾家常見的 PaaS 平台進行簡介。後續會以 Heroku 為主軸繼續介紹，從產生一個 Application 到發佈以及客製化都會一起介紹。文章中也會將我所理解的 PaaS 概念與架構一併說明，讓大家可以更加了解關於 PaaS 的使用，以及優缺點。&lt;/p>
&lt;p>至於這一系列的文章，會以「免費、無負擔」的前提下撰寫，選用以及介紹的 PaaS 可能有付費也可能有免費，但是會讓大家在盡可能不花費的狀況下體驗與使用。&lt;/p>
&lt;p>那麼，正文開始。&lt;/p></description></item><item><title>Unity3D - 元件化的遊戲製作</title><link>https://blog.frost.tw/posts/2014/01/03/unity3d-component-of-game-production/</link><pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/03/unity3d-component-of-game-production/</guid><description>&lt;p>這篇文章一部份是寫給同學看的，在做遊戲中似乎挺常使用到的，而這個「特性」如果能夠理解的話，未來同學在製作遊戲應該也是會順利很多，另一方面就是 SITCON 的投稿，大概就是以這個為主軸來討論。&lt;/p>
&lt;p>依照網路上的說法，這個概念應該是在 Unity3D 熱門之後，才比較被大眾所熟悉。而我個人是在 2013 年的 COSCUP 在半路大的&lt;a href="https://speakerdeck.com/halflucifer/using-lua-to-build-a-component-based-architecture-for-game-apps">演講&lt;/a>第一次獲得「元件化」的關鍵字，這確實也是一個不一樣的概念。&lt;/p>
&lt;p>至於後續如何呢？讓我們一起看下去。
（關於非遊戲的討論，我之後會另外寫文章，這邊以 Unity3D 的 Component 概念為主。）&lt;/p></description></item><item><title>從學生的角度給學生學習程式的建議</title><link>https://blog.frost.tw/posts/2013/12/18/from-the-students-perspective-to-the-students-program-of-study-recommendations/</link><pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/12/18/from-the-students-perspective-to-the-students-program-of-study-recommendations/</guid><description>&lt;p>雖然自己不是什麼高手，也沒什麼有建設性的建議，但是最近老爸公司來了實習生，我在跟實習生的互動過程中，發現了一些學生在學習程式上的一些要注意的部分，所以想來分享一下。&lt;/p>
&lt;p>（先不討論我怎麼會在老爸公司寫扣，還有實習生怎麼出現的這些神秘問題了 XD）&lt;/p>
&lt;hr>
&lt;p>其實已經有很多前輩已經分享過非常多有用的技巧與方法，這邊就單純以我個人的經驗，還有與實習生接觸後，我在教導實習生使用 Rails 和融入老爸公司開發流程的過程。（雖然以前只有我自己寫扣拉，哭哭）&lt;/p></description></item><item><title>在忙，也要寫一下 NKO 2013</title><link>https://blog.frost.tw/posts/2013/11/11/busy-but-also-to-write-about-nko-2013/</link><pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/11/11/busy-but-also-to-write-about-nko-2013/</guid><description>&lt;p>這篇必須是短文 XD&lt;/p>
&lt;p>其實 NKO 2013 結束之後，我依舊還有著不少東西得完成⋯⋯&lt;/p>
&lt;p>Ex. NKO 2013 的作品是學校的一項作業，還得繼續完善。&lt;/p>
&lt;p>廢話不多說，趕緊來講講今年的 NKO 2013 吧 XD&lt;/p></description></item><item><title>用 Vagrant 整合 GitLab 與 Capistrano 做 Staging 環境自動部署</title><link>https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/</link><pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/</guid><description>&lt;p>&lt;!-- raw HTML omitted -->這標題超級長的說（崩潰&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>最近因為有實習生要來，所以把老爸公司設定好 GitLab 和 Gitlba-CI 來作為內部的版本本控制和自動化測試環境。
不過原本規劃的 Staging 環境也是在這檯主機上（當初就很淡定把記憶體和處理器加高，因為我會狂開 VM XD）但是會有 SSH 權限上的問題，原本想利用 Git 的 Hook 之類的來處理，但是感覺似乎不太好。&lt;/p>
&lt;p>剛好這次看到 GitLab / GitLab-CI 的介紹文，我又再次嘗試安裝，過程上順利、簡單很多。
不過上次不順利肯定是我把整個環境裝在 NAS 裡面的關係 XDD&lt;/p>
&lt;p>從我建好 GitLab / GitLab-CI 到設定 Capistrano 到自動部署，其實花費不少時間，而且有很多「差點忘記」的部分，因此決定來寫一篇文章做筆記！&lt;/p></description></item><item><title>HackGen 2013 大同場</title><link>https://blog.frost.tw/posts/2013/10/21/hackgen-2013-ttu/</link><pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/21/hackgen-2013-ttu/</guid><description>&lt;p>在正大場的下一周，大同場也順利舉辦完畢。
我想今年度的 HackGen 應該算是結束了 XD&lt;/p>
&lt;p>（不過似乎有計劃做較小的場次這樣，之後再觀望吧～）&lt;/p>
&lt;p>來稍微說說這次的心得（雖然作業依舊很趕，但是還是要先寫一下以免忘記）&lt;/p></description></item><item><title>HackGen 2013 政大場</title><link>https://blog.frost.tw/posts/2013/10/13/hackgen-2013-nccu/</link><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/13/hackgen-2013-nccu/</guid><description>&lt;p>昨晚莫名分心就沒寫完了（牆角&lt;/p>
&lt;p>在今年 2013 年的 HackGen 主要就是政大、大同這兩場。
在昨天，政大場終於結束了！&lt;/p>
&lt;p>雖然報名情況不如我們最初所期待的熱烈，但是就如同強哥所說，這是一個開始。&lt;/p>
&lt;p>這邊文章會簡單說一下我的心得和感想。&lt;/p></description></item><item><title>PHPConf 2013 會後心得</title><link>https://blog.frost.tw/posts/2013/10/05/phpconf-2013-experience/</link><pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/05/phpconf-2013-experience/</guid><description>&lt;p>仔細想想，從 2011 年的 PHPConf 到現在也已經第三年了⋯⋯&lt;/p>
&lt;p>第一年是會眾，第二年是工作人員，第三年是作者（投稿文章）每年參加 PHPConf 大概是我的例行公事。
在資訊相關的歷程中，陪伴我最長時間的程式語言就是 PHP 一直都有一份無法割捨的感情，即使已經很少用 PHP 開發東西了⋯⋯&lt;/p>
&lt;p>不過，在我學習過這麼多種程式語言（PHP, JavaScript, ActionScript, Lua, Ruby, Java, etc） 之後，其實我認為各種語言大多有它特別的性質，有愛就好，而 PHP 大概就是對於「新入門的網站開發者」有著不錯的親和力。&lt;/p>
&lt;p>那麼，今年的 PHPConf 如何呢？&lt;/p></description></item><item><title>用 Zephir 寫自己的 PHP Extension</title><link>https://blog.frost.tw/posts/2013/10/05/zephir-write-your-own-php-extension/</link><pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/05/zephir-write-your-own-php-extension/</guid><description>&lt;p>前一篇文章說到了 &lt;a href="https://zephir-lang.com/">Zephir&lt;/a> 於是這篇就要來研究一下摟～&lt;/p>
&lt;p>關於這篇文章，會做以下幾件事情：&lt;/p>
&lt;ul>
&lt;li>安裝 &amp;amp; 設定&lt;/li>
&lt;li>寫一個簡易的 Router&lt;/li>
&lt;li>改寫成 Zephir 版本&lt;/li>
&lt;li>安裝 Extension 以及測試&lt;/li>
&lt;/ul>
&lt;p>那麼，廢話不多說，馬上開始吧！&lt;/p></description></item><item><title>V-Play Engine 與 Corona SDK 的簡易比較</title><link>https://blog.frost.tw/posts/2013/09/18/v-play-engine-and-the-corona-sdk-simple-different/</link><pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/09/18/v-play-engine-and-the-corona-sdk-simple-different/</guid><description>&lt;p>原本這篇是想寫關於 &lt;a href="https://v-play.net/">V-Play&lt;/a> Engine 來制作一個簡單的小遊戲，不過後來因為作業上的需求，我有另外去接觸 &lt;a href="https://coronalabs.com/">Corona&lt;/a> SDK 於是就變成了一篇比較文。&lt;/p>
&lt;p>雖然兩者大概都是接觸約一周到兩週的程度，沒辦法做太深入地分析與討論，但是就我自己的感覺來說，最後是選擇了 &lt;a href="https://coronalabs.com/">Corona&lt;/a> SDK 來做為制作遊戲的引擎。&lt;/p>
&lt;p>雖然實際上比較想制作 PC/Mac 平台的遊戲，不過就現況來說遊戲引擎都轉戰移動裝置市場，也只好先暫時如此了⋯⋯&lt;/p></description></item><item><title>Nitrous.io - 網站開發協作平台</title><link>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</link><pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</guid><description>&lt;p>會寫這篇文章，主要是最近收到 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的信，而我意外地想到一個特別的用途，那就是透過線上協作功能教我妹寫 Ruby on Rails。&lt;/p>
&lt;p>註：本文連結都帶有 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的邀請碼，如果不喜歡請直接輸入 Nitrous.io 進入網站註冊&lt;/p>
&lt;hr>
&lt;h3 id="什麼是-nitrousio">什麼是 Nitrous.io&lt;/h3>
&lt;p>這大概要追溯到三、四年前，一個叫做 Action.io 的服務了⋯⋯
那時還是高中生的我，意外的申請了一個叫做 Action.io 的 Beta 計劃，然後開始等待邀請碼。
（根據噗浪訊息，直到今年我才收到 Beta 邀請碼）&lt;/p>
&lt;p>當時的 Action.io 展示了一個功能「線上協作」而引起我的興趣。&lt;/p>
&lt;p>至於線上協作是什麼形式的呢？昨晚上測試的結果是只要啓動「協作模式」就能夠立即得看到其他人的編輯，並且附有聊天室的功能。
不過如果單純是這樣，那麼用最近幾年出現的線上編輯器不是也可以達到嗎？不過，既然有辦法推出這個服務，總是會有他的過人之處，那就是他直接提供了你一個接近 VPS 的環境。（推測是 Amazon EC2）&lt;/p></description></item><item><title>React - Facebook 的 UI 元件 Library</title><link>https://blog.frost.tw/posts/2013/08/29/react-facebook-ui-component-library/</link><pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/08/29/react-facebook-ui-component-library/</guid><description>&lt;p>昨天在 TEDxTaipei 實習的時候說要修正之前 Timer (計時器) 的錯誤，我馬上就想到可以用 Facebook 的 &lt;a href="https://facebook.Github.io/react/">React&lt;/a> 來改寫。&lt;/p>
&lt;p>之前就非常想玩看看，這次完了之後發現確實不錯，可以來推一下 XDD&lt;/p>
&lt;p>註：暑假剛好有機會在 TEDxTaipei 實習，主要處理 WordPress 後端一些 PHP Code 和一些與前端搭配的技術，而計時器在 TEDxTaipei 會自行製作是因為有多了幾個特殊的按鈕的關係。&lt;/p></description></item><item><title>ZyXEL GS1910-24 的 Port Base VLAN 設定</title><link>https://blog.frost.tw/posts/2013/08/17/zyxel-gs191-24-port-base-vlan-setting/</link><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/08/17/zyxel-gs191-24-port-base-vlan-setting/</guid><description>&lt;p>老爸公司的網路線也漸漸的配置完成，也因此需要將 Switch 和 UTM 等設備都設定好。&lt;/p>
&lt;p>在朋友的建議下，決定使用 Port Base 的 VLAN 不過，遭遇的不少困難。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->像是朋友知道有 VLAN 這東西但是 Port Base 的設定完全不熟之類的&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;strong>注意，本篇文章為個人理解，有錯誤或者建議請告知修正&lt;/strong>&lt;/p></description></item><item><title>大三學習規劃</title><link>https://blog.frost.tw/posts/2013/08/15/junior-year-learning-plan/</link><pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/08/15/junior-year-learning-plan/</guid><description>&lt;p>昨晚參加 Golang 小聚後，回到家稍微思考了一下該做什麼⋯⋯&lt;/p>
&lt;p>有時候單純的交流似乎比聽演講不錯，不過各有利弊，但是我也該開始思考之後一年該做些什麼。&lt;/p>
&lt;p>基本上我是個非常「雜食性」的人，所以舉凡設計、程式撰寫、音樂等大多都有一定程度的興趣，也因此很難以分配好足夠的時間去做該做的事情。&lt;/p>
&lt;p>距離畢業其實剩下兩年多，個人對於繼續升學並沒有想法，基本上順其自然即可。&lt;/p>
&lt;p>不過，之後該做什麼才能夠讓未來的路更加依照自身的需求，這就是一個非常重要的問題。&lt;/p></description></item><item><title>當 Mac 碰上 RS232</title><link>https://blog.frost.tw/posts/2013/08/12/when-mac-run-into-rs232/</link><pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/08/12/when-mac-run-into-rs232/</guid><description>&lt;p>最近被&lt;!-- raw HTML omitted -->損友&lt;!-- raw HTML omitted -->推坑，配合老爸公司轉移地點到車站。順便進了一些比較專業的網路設備&lt;!-- raw HTML omitted -->然後就大失血了&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>第一次碰到需要使用 RS232 (COM) 進行管理的設備，雖然備有 Web 界面，但是 Console 界面總是不怕進不去，也多了一分自己好像是網管人員的神秘感（誤&lt;/p>
&lt;p>不過，身為 Mac 使用者，跟&lt;!-- raw HTML omitted -->萬惡的&lt;!-- raw HTML omitted --> Windows 使用者比起來，卻多了許多困難。&lt;/p></description></item><item><title>COSCUP 2013 - Lighting Talk 補充</title><link>https://blog.frost.tw/posts/2013/08/05/coscup-2-13-lighting-talk-additional/</link><pubDate>Mon, 05 Aug 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/08/05/coscup-2-13-lighting-talk-additional/</guid><description>&lt;p>其實我以為我很快就沒東西，沒想到還能超過一分鐘。&lt;/p>
&lt;p>第一次不知道該講什麼，我真的該分享一下怎麼制作的，是個很簡單卻又非常有趣的作品。&lt;/p>
&lt;p>因為 Github 的 API 是允許 Cross-Domain 存取的，也因為這樣，我才能夠順利地從 Github 上把我們 Staff 的個人簡介拉出來，然後透過 Backbone 去呈現。&lt;/p>
&lt;p>我一共用到了這些 JavaScript Libary / Tools&lt;/p>
&lt;ul>
&lt;li>RequireJS (AMD)
&lt;ul>
&lt;li>RequireJS Text Plugin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backbone.js (MVP/MVC)
&lt;ul>
&lt;li>Underscore.js (相依)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>jQuery (DOM操作)&lt;/li>
&lt;li>Mustache.js (Template)&lt;/li>
&lt;li>Markdown.js (Praser)&lt;/li>
&lt;li>Modernizr&lt;/li>
&lt;/ul>
&lt;p>實作也非常簡單，只需要約六七個檔案就能完成。&lt;/p></description></item><item><title>JSDC 2013 會後心得</title><link>https://blog.frost.tw/posts/2013/05/19/jsdc-2013/</link><pubDate>Sun, 19 May 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/05/19/jsdc-2013/</guid><description>&lt;p>今年是第一次參加 JSDC 到底是為什麼大家都以為我會當志功拉（望&lt;/p>
&lt;p>不過這不是重點，是這次我超累的（趴地&lt;/p>
&lt;p>能推測出的原因大概就是：&lt;/p>
&lt;ul>
&lt;li>不是在寒暑假所以睡比較少&lt;/li>
&lt;li>分心+聽演講 Overloading 了（誤&lt;/li>
&lt;/ul>
&lt;p>不過這次收獲也算是蠻多的，而且也開始對參與 Conf 有新的想法了（望&lt;/p></description></item><item><title>2013 新一代設計展參觀心得</title><link>https://blog.frost.tw/posts/2013/05/17/yodex-2013/</link><pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/05/17/yodex-2013/</guid><description>&lt;p>既然身為設計學院的學生，每年新一代展都會是很重要的活動。&lt;/p>
&lt;p>雖然跟 JSDC 時間重疊，還好週五能夠提前一天去參觀，算是不幸中的大幸。&lt;/p>
&lt;p>去年第一次疵參與時，不太知道該怎麼逛，所以收獲很少。這次很認真的拿了不少名片，也看到很多作品，相較去年的參觀情況，已經好上許多。&lt;/p>
&lt;p>這次除了老師要我們寫心得之外，就是和同學去探索目前台灣學生「3D 遊戲製作」的一個情況。
（今天打算寫兩篇文章，另一篇會討論這個問題。）&lt;/p></description></item><item><title>台灣學生在 3D 遊戲開發的挑戰</title><link>https://blog.frost.tw/posts/2013/05/17/student-in-taiwan-3d-game-developments-challenge/</link><pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/05/17/student-in-taiwan-3d-game-developments-challenge/</guid><description>&lt;p>最近為了同學&lt;!-- raw HTML omitted -->畢製的野望&lt;!-- raw HTML omitted -->開始稍微摸索起 3D Game Engine 這一塊。&lt;/p>
&lt;p>原本，我以為會跟過去接觸到大多數的 Open Source 專案一樣，是一個充滿和平與多元的美好世界。&lt;!-- raw HTML omitted -->
但是，看起來我錯了⋯⋯&lt;/p>
&lt;p>3D Game Development 是一個既沒有選擇，也無法安穩過日，一個身處於 Open Source 世界中少數的戰亂之地。&lt;/p>
&lt;p>這篇文章可能會有點帶有偏見以及不完全的觀點，也希望業界的高手可以給予指正。內容都是從我探索 Unity3D 以外的世界與選擇，所得出的結論。&lt;/p></description></item><item><title>使用 Oauth-Plugin 與 Devise 建置 OAuth2 伺服器</title><link>https://blog.frost.tw/posts/2013/04/22/setting-up-oauth2-server-via-rails-oauth-plugin-and-devise/</link><pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/04/22/setting-up-oauth2-server-via-rails-oauth-plugin-and-devise/</guid><description>&lt;p>其實，這是一篇掃雷文（誤&lt;/p>
&lt;p>大約半年前（根據某人開 Issue 的記錄，是 7 個月之前）我也嘗試過安裝 oauth-plugin 來建置 OAuth2 伺服器，但是因為長達好幾小時 &lt;strong>400 Bad Request&lt;/strong> 最後受不了而放棄。&lt;/p>
&lt;p>這次，除了順利挑戰 &lt;strong>Invalid OAuth Request&lt;/strong> 之外，從 400 甚至 401 都挑戰的我，終於戰勝了地雷啊！&lt;/p>
&lt;p>事不宜遲，讓我們開始進行這一連串的大戰吧！&lt;/p></description></item><item><title>SITCON 2013 會後心得</title><link>https://blog.frost.tw/posts/2013/03/21/sitcon-2013/</link><pubDate>Thu, 21 Mar 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/03/21/sitcon-2013/</guid><description>&lt;p>雖然有點晚了，不過真的是很忙啊（趴&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->畢竟老師這學期順利使出作業 Combo 一個接一個做，只好在這個分心已經回不去的時候多加利用時間寫一下了！&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>SITCON - 學生計算機年會&lt;/p>
&lt;p>這算是我第一次參與籌備吧，雖然過去當過幾次其他年會的志工，不過還是第一次全程參與下來。&lt;!-- raw HTML omitted -->
雖然有點可惜，我幾乎沒有聽到議程，但是還是要來說說參與的心得跟經歷。&lt;/p></description></item><item><title>Firefox OS App Days 2013</title><link>https://blog.frost.tw/posts/2013/01/27/firefox-os-app-days-2013/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/01/27/firefox-os-app-days-2013/</guid><description>&lt;p>這次的活動也很不錯啊～&lt;/p>
&lt;p>而且結束後還有與其他參賽者交流的時間，算是很不錯的 XDD&lt;/p>
&lt;p>不過和 Caesar Chi 在聊天時也發現到與之前的 Windows App 開發嘉年華比較起來，在 Open Source 社群 Demo 時似乎比較有趣。&lt;/p>
&lt;p>雖然說各社群應該都會有差異，但是我也覺得在 Windows 發表作品時的氣氛真的超沈重的，就算搞笑好像也都沒有用一樣，一點都沒有大家一起創作，然後一起看看有什麼突發奇想的感覺（趴&lt;/p>
&lt;p>雖然這次開發時間很短，不過整體來說其實是超棒的活動！&lt;/p></description></item><item><title>I am learning</title><link>https://blog.frost.tw/posts/2013/01/15/iam-learning/</link><pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/01/15/iam-learning/</guid><description>&lt;p>其實這篇文章是想偷懶不寫的，不過因為早上在 Twitter 上跟 hlb (布丁) 大大的一小段對話，只好寫了（趴&lt;/p>
&lt;p>「到底別人的團隊到底是怎樣工作的啊？好像跟我的經驗都很不一樣？」&lt;a href="https://minipai.tumblr.com/day/2013/01/15">原文&lt;/a>&lt;/p>
&lt;p>因為這句話，我也回復說「我也很好奇」「在 WebConf Day2 後跟朋友吃飯從 TEDxTaipei 的 Henry 那邊學到的東西」&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->於是就被要求寫一篇了⋯⋯&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>不過，我本來就想寫 - I am learning 這個主題拉～～&lt;/p></description></item><item><title>WebConf 2013 會後心得</title><link>https://blog.frost.tw/posts/2013/01/14/webconf-2013/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/01/14/webconf-2013/</guid><description>&lt;p>「這是一個令我 Amazing 的活動」&lt;/p>
&lt;p>我認為這樣形容 WebConf 的感想最適合，並不是說之前參加過的 COSCUP, PHPConf 不好，而是這場 WebConf 跟我的胃口太合了⋯⋯&lt;/p>
&lt;p>最特別的就是有「設計軌」一個給設計師的議程組合，這是一個很棒的部分，因為一個 Web 絕對不是只有開發者在做，設計師也應該參與其中。&lt;/p>
&lt;p>基於某些理由，兩天我都在 R2 （設計師軌的會議室）聽完全程，雖然另外兩間 R0 / R1 都有讓我在意的議程，但是為了好好搞懂&lt;strong>網頁設計&lt;/strong>這件事情，我都忍下來認真聽 R2 的演講。&lt;/p></description></item><item><title>2012 Windows APP 開發嘉年華</title><link>https://blog.frost.tw/posts/2012/12/31/2012-windows-app-party/</link><pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/12/31/2012-windows-app-party/</guid><description>&lt;p>&lt;strong>其實這次只是去吃的&lt;/strong>&lt;/p>
&lt;p>以上純屬玩笑⋯⋯&lt;/p>
&lt;p>自從上次去過 NKO (Node.js Knockout) 2012 Taiwan 之後，我的同學跟學妹就理解到&lt;!-- raw HTML omitted -->食物很豐盛&lt;!-- raw HTML omitted -->的道理，這次很果斷地就決定參加了⋯⋯&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->你們都不考慮一下我的肝嗎？&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>不過這不是重點，這次的重點是&lt;strong>參加 Hackthon 要做遊戲請用遊戲引擎&lt;/strong>&lt;/p>
&lt;p>詳細情況？&lt;strong>詳見內文&lt;/strong>&lt;/p></description></item><item><title>The Node.js Knockout 2012 Taiwan</title><link>https://blog.frost.tw/posts/2012/11/13/the-node-dot-js-knockout-2012-taiwan/</link><pubDate>Tue, 13 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/11/13/the-node-dot-js-knockout-2012-taiwan/</guid><description>&lt;p>這一次的經驗真的非常特別。&lt;/p>
&lt;p>今年，雖然不是 NKO 的第一次。但對台灣來說，是第一次準備好場地，大家一起「努力寫程式」的活動。&lt;/p>
&lt;p>實際上，我在做出成品之前，我都不敢相信我們能不能做出來？能不能順利上台 Demo 但是，看起來我們還算是有點料，沒有連上台都上不去啊（笑&lt;/p>
&lt;p>隊伍成員大致上就是同學、學妹、網友，是一個 50% 都是 Art (Designer) 的隊伍。
原本想說是不是會來不及做完，因為寫 Code 速度不快等等。但是最後似乎沒有實際上碰到這些問題。&lt;/p>
&lt;p>至於成品是什麼呢？&lt;/p></description></item><item><title>Heroku Buildpacks - 客制化你的 Heroku 環境</title><link>https://blog.frost.tw/posts/2012/11/04/heroku-buildpacks-customize-your-heroku-enviroment/</link><pubDate>Sun, 04 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/11/04/heroku-buildpacks-customize-your-heroku-enviroment/</guid><description>&lt;p>PHPConf 結束後，就很想寫點程式阿（掩面&lt;/p>
&lt;p>雖然這次是志工，不過運氣很好聽到了不少很棒的演講。其中我還是對於像是 PhalconPHP 和 Composer 在雲端環境上的使用。&lt;/p>
&lt;p>先排除一般虛擬主機支援可能性，再來就到了 PaaS 上的問題。因為 PaaS 相對於 IaaS 使用上簡單，也不需要額外的去做設定，很多時候 Deploy 網站還是會先以 PaaS 為主（而且很多 PaaS 有提供免費額度）&lt;/p>
&lt;p>我先針對幾個個人比較關注支援 PHP 環境的 PaaS 進行搜集資料，再繼續確認支援情況。&lt;/p>
&lt;p>AppFog, Heroku, PagodaBox 三個是我主要的確認項目，其中 AppFog 沒辦法找到什麼可靠的資訊，而 PagodaBox 在印象中討論區曾經有討論過關於 Composer 方面的問題，最後是 Heroku 今天的主角，也是讓我「大吃一驚」的 PaaS 服務。&lt;/p></description></item><item><title>KBtalKing Pro 開箱</title><link>https://blog.frost.tw/posts/2012/10/30/kbtalking-pro-open-box/</link><pubDate>Tue, 30 Oct 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/10/30/kbtalking-pro-open-box/</guid><description>&lt;p>等待許久的 KBtalKing Pro 終於在上週二送到。不過當時弦也正在學校，所以發生了一段這樣的事情⋯⋯&lt;/p>
&lt;p>送貨員：「喂，請問是邱先生嗎？」&lt;!-- raw HTML omitted -->
弦也：「恩」&lt;!-- raw HTML omitted -->
送貨員：「這邊有您的包裹，地址是 XXXX 嗎？」&amp;lt;/br /&amp;gt;
弦也：「唉？我最近沒有買東西啊！」&lt;!-- raw HTML omitted -->
送貨員：「上面寫說是鍵盤⋯⋯」&lt;/p>
&lt;p>此時我才反應過來是鍵盤送到了！原本以為要問路，竟然已經找到我家了（汗&lt;!-- raw HTML omitted -->
註：弦也家在鄉下，基本上送貨十個有八個都要問路才能找到⋯⋯&lt;/p></description></item><item><title>另一條道路 —— 使用 Processing</title><link>https://blog.frost.tw/posts/2012/09/22/another-way-using-processing/</link><pubDate>Sat, 22 Sep 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/09/22/another-way-using-processing/</guid><description>&lt;p>新的學期開始，已經第二周了！&lt;/p>
&lt;p>我也順利的成為大學二年級的學生，而全新的課程，也終於擺脫一年級的基礎技巧，轉變為稍微特化專精的課程。雖然我不相許多同學跨兩個組別（系上的特色，讓學生選擇多媒體、動畫、遊戲三組）只主修多媒體，並且加上一門3D動畫以及角色造型。雖然課業壓力相對地減低，但是我也沒有過多的怠慢就是。&lt;/p>
&lt;p>這次，是要來說說 &lt;!-- raw HTML omitted -->Processing&lt;!-- raw HTML omitted --> 這個東西。&lt;/p>
&lt;p>一年級在上數位設計概論時，就從這位老師身上學到很多新的思考方式。這次的動態影像也不例外，讓我更確信除了網頁設計師外，我還能有更不同的選擇「互動媒體設計師」&lt;/p>
&lt;p>當然，我非常喜歡網頁設計。或者說，我喜歡那種透過網路與人互動的感覺。&lt;/p></description></item><item><title>Canon Powershot S100 &amp; iBuddy 隨身AP 開箱</title><link>https://blog.frost.tw/posts/2012/09/04/canon-powershot-s100-and-ibuddy-ap-open-box/</link><pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/09/04/canon-powershot-s100-and-ibuddy-ap-open-box/</guid><description>&lt;p>好久沒寫文章，來篇開箱文（茶）&lt;/p>
&lt;p>不過實際上挺意外的，竟然剛好兩家貨運公司都在同一天送到。&lt;!-- raw HTML omitted -->
雖然說相機其實挺悲劇的，我家太偏僻前一次沒找到，直到今天打我手機才順利找到啊（望&lt;/p>
&lt;p>更巧的是，隨身AP送到之後不久相機緊接著就送來了！&lt;/p>
&lt;p>廢話不多說，趕緊來看看這兩樣新玩具（？&lt;/p></description></item><item><title>改變，從現在開始 - COSCUP 2012</title><link>https://blog.frost.tw/posts/2012/08/19/change-start-now-the-coscup-2012/</link><pubDate>Sun, 19 Aug 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/08/19/change-start-now-the-coscup-2012/</guid><description>&lt;p>COSCUP 開源人年會，第一次知道這個活動是在去年。不過當時報名已經截止了，所以只好寄望於今年的參與，很幸運的，在有限的名額內我順利的報名。&lt;/p>
&lt;p>其實整個議程跟 PHPConf（目前有參與過的 Conference）感覺不一樣，比較不著重在技術，而是比較多的分享跟介紹，或者觀點。當然，技術面的東西也有，如 &lt;a href="https://blog.linux.org.tw/jserv/">jserv&lt;/a> 大大在今天（DAY2）那精彩的「第一次自幹作業系統就上手」令人印象深刻。&lt;/p>
&lt;p>至於這篇文章為什麼要說「改變，從現在開始」呢？&lt;/p>
&lt;p>因為，這個活動&lt;strong>超級勵志&lt;/strong>。&lt;/p></description></item><item><title>Laravel 初次嘗試</title><link>https://blog.frost.tw/posts/2012/07/14/the-laravel-first-try/</link><pubDate>Sat, 14 Jul 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/07/14/the-laravel-first-try/</guid><description>&lt;p>今天下午用 Laravel 試寫了一下留言板。雖然之前看過文件，但是沒有認真去讀，這次認真用一次之後，感想就是很讚～&lt;/p>
&lt;p>一方面是跟 Rails 的設計真的都很類似，又有 Cli 可以使用，光這兩點就省下很多功夫。&lt;/p>
&lt;p>總而言之，我要推一下這個 PHP Framework 拉！除了 Slim Framework 之外，這款是我有實際去用過的第三款，用起來也很不錯（蓋章）&lt;/p></description></item><item><title>自暑假開始後</title><link>https://blog.frost.tw/posts/2012/07/03/form-the-summer-vacation-start/</link><pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/07/03/form-the-summer-vacation-start/</guid><description>&lt;p>每年的寒、暑假基本上都是我閉關修煉的時間。&lt;/p>
&lt;p>畢竟時間長，又不用上課，不練等還有啥事可做嗎？（口袋空空，就一台電腦跟鄉間小路，不是散步就是上網咩……）&lt;/p>
&lt;p>算一算，自暑假開始已經過了半個月左右（也許更長，畢竟期末考周五天只有兩天去考試，而且還是考一科就回家 XDD）&lt;/p>
&lt;p>稍微回顧一下，這個暑假（前段）說做了不少事情也不是，沒做什麼好像也不是（抓頭）&lt;/p></description></item><item><title>人生RPG - 19等</title><link>https://blog.frost.tw/posts/2012/06/17/life-rpg-level-19/</link><pubDate>Sun, 17 Jun 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/06/17/life-rpg-level-19/</guid><description>&lt;p>唉，昨天（6/16）我生日耶！&lt;/p>
&lt;p>先說說生日當天感想，一早就被老爸挖起來，從高中畢業的暑假就是這樣，然後跟老爸一同奔波，就為了幫忙老爸創業上順利些。&lt;/p>
&lt;p>實際上，一切都很正常。&lt;/p>
&lt;p>老爸在一樣的便利商店停下，然後看看今天便利商店又打算拿出什麼折扣。&lt;/p>
&lt;p>而我，則依照自從有了3G早上收收信的習慣，用手機打開信箱。&lt;/p>
&lt;p>&lt;strong>「唉，今天我生日耶？」&lt;/strong> 這時候我才反應過來，收到來自國外某個論壇寄的生日祝賀信。
然後，我隨即打開 Facebook APP 想確認這件事情，可惜 3G 訊號斷了，老爸買了咖啡（因為買一送一 $38 變成 $19）然後就這樣一如既往的一週工作六天，到了公司。&lt;/p></description></item><item><title>Rails - Ajax and Backbone.JS</title><link>https://blog.frost.tw/posts/2012/05/27/rails-ajax-and-backbone-dot-js/</link><pubDate>Sun, 27 May 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/05/27/rails-ajax-and-backbone-dot-js/</guid><description>&lt;p>好像有一段時間沒寫網誌了！&lt;/p>
&lt;p>上週在 &lt;a href="https://codeschool.com">Code School&lt;/a> 週末免費最後的二十多小時才發現有免費課程，趕緊選了一個進行後，覺得不錯，於是跟老爸討論後決定購買會員資格。&lt;/p>
&lt;p>經過一週的苦戰，總算是將十三個課程都全不上過一次。
（不過只看投影片跟進行練習題，沒有看影片，因為有點花時間，所以只能之後慢慢補完）&lt;/p>
&lt;p>既然經過如此密集的訓練，功力想必大增，於是今天就來小試身手嘗試了 Rails 的 Ajax 與 Backbone.JS 的搭配。&lt;/p></description></item><item><title>目標與慾望</title><link>https://blog.frost.tw/posts/2012/05/17/goals-and-desires/</link><pubDate>Thu, 17 May 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/05/17/goals-and-desires/</guid><description>&lt;p>雖然已經十一點了，但是我還是想先寫完這篇文章啊！&lt;/p>
&lt;p>最近的 Diablo 3 (暗黑破壞神三) 非常熱門，原本其實我也只是想玩看看，不過後來還是當作耳邊風。&lt;/p>
&lt;p>但，昨天看著許多同學、網友都在討論，難免還是想要玩看看。從同學那邊拿到體驗序號後，我就開始下載、安裝。&lt;/p>
&lt;p>雖然亞洲伺服器在很晚才開放，不過我還是玩了一會……&lt;/p>
&lt;p>真的，很好玩！&lt;/p></description></item><item><title>我對興趣的看法</title><link>https://blog.frost.tw/posts/2012/05/11/the-idea-which-i-think-of-interest/</link><pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/05/11/the-idea-which-i-think-of-interest/</guid><description>&lt;p>其實這是有感而發的一篇文章，我想應該是不會有什麼內容，頂多就是某人分享他那神奇喜好（？）的由來。&lt;/p>
&lt;p>最近像是升上大二要選擇分組（多媒體、動畫、遊戲）還有妹妹要選學校這些事情，我又開始想了一些東西，本篇文章就是把東西釋放（？）出來讓腦子舒服點而已～&lt;/p></description></item><item><title>The CSS3 Transition</title><link>https://blog.frost.tw/posts/2012/05/08/the-css3-transition/</link><pubDate>Tue, 08 May 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/05/08/the-css3-transition/</guid><description>&lt;p>好久沒寫，今天來分享一下應該是我本業的網頁設計相關文章 XDD&lt;/p>
&lt;p>前幾天在 Google Reader 上看到 &lt;a href="https://zespia.tw/">Zespia&lt;/a> 換了新佈景，原本的佈景也是目前這個網誌用的 &lt;a href="https://zespia.tw/Octopress-Theme-Slash/index_tw.html">Slash&lt;/a> 不過因為使用者越來越多，所以站長決定換新佈景～&lt;/p>
&lt;p>接著，我看到那中間的 &amp;ldquo;Z&amp;rdquo; 字 Logo 那透明度緩緩的恢復的效果非常的有興趣，於是，我開始了調查……&lt;/p></description></item><item><title>網站開發之路 - 反思</title><link>https://blog.frost.tw/posts/2012/04/03/the-web-develop-way-reflection/</link><pubDate>Tue, 03 Apr 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/04/03/the-web-develop-way-reflection/</guid><description>&lt;p>每當心情不是很好，或是毫無動力時。我就會開始東想西想。&lt;/p>
&lt;p>雖然孔子一天都是反省三次，不過我做不來。但是，一個月反省一次還是勉強可以的。&lt;/p>
&lt;p>那，這篇文章就是來思考一下我到底在幹嘛。&lt;!-- raw HTML omitted -->
（總覺得我開始搞不清楚我是碼農還是設計師了……）&lt;/p></description></item><item><title>網站開發之路 - Vim (2)</title><link>https://blog.frost.tw/posts/2012/04/01/the-web-develop-way-vim-2/</link><pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/04/01/the-web-develop-way-vim-2/</guid><description>&lt;p>自開始使用 Vim 後應該有一週左右了！不過我似乎不怎麼勤勞，沒有練習太多。&lt;/p>
&lt;p>但，也不能說是完全沒有練習，至少依靠了 &lt;a href="https://www.vimgolf.com/">VimGolf&lt;/a> 這個網站，我也多少又增加了一些操作技巧的知識。&lt;/p>
&lt;p>真希望能夠儘快熟練使用啊！&lt;/p></description></item><item><title>網站開發之路 - Vim(1)</title><link>https://blog.frost.tw/posts/2012/03/26/the-web-develope-way-vim-1/</link><pubDate>Mon, 26 Mar 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/03/26/the-web-develope-way-vim-1/</guid><description>&lt;p>作為起始，我決定先把 Vim 練好。&lt;/p>
&lt;p>理由，很簡單。&lt;/p>
&lt;blockquote>
&lt;p>相較於 IDE 來說，使用 VIM 可以盡量避免離開 Terminal 的操作。
基於這點，我覺得可以改善我常常用 Ctrl + Tab 切換視窗來回操作的問題。&lt;/p>
&lt;/blockquote></description></item><item><title>我的網站開發之路</title><link>https://blog.frost.tw/posts/2012/03/25/my-web-develop-way/</link><pubDate>Sun, 25 Mar 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/03/25/my-web-develop-way/</guid><description>&lt;p>最近，總感覺發生了許多事。&lt;/p>
&lt;p>比較值得注意的大概就是我開始學習 Rails 了吧！&lt;!-- raw HTML omitted -->
過去有很長的一段時間在 PHP 上面，至少也有五、六年了！&lt;!-- raw HTML omitted -->
這段時間，雖然也知道有 Java, Ruby, Perl 等等可以用來開發網站的語言，但是我就唯獨喜愛著 PHP 這一個老朋友，畢竟，從小到大陪我長大的就是他。&lt;/p>
&lt;p>隨著時間增長，我可以說是越來越喜歡製作網站。在學習程式語言到一個程度，我開始思考我希望前進的方向。到底是設計還是程式呢？&lt;/p></description></item><item><title>製作一個 Hubot 的噗浪 Adapter</title><link>https://blog.frost.tw/posts/2012/03/18/create-a-hubot-plurk-adapter/</link><pubDate>Sun, 18 Mar 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/03/18/create-a-hubot-plurk-adapter/</guid><description>&lt;h2 id="前言">###前言&lt;/h2>
&lt;p>我似乎非常喜歡搞前言這套，所以請大家聽我慢慢說完吧！&lt;/p>
&lt;p>大約是三、四個月前的事情，網友向我邀文，我就告訴他最近 HuBot 更新後，將 Adapter 分離出來，以 Module 的形式載入，我想之後的更新會很棒吧！&lt;/p>
&lt;p>不過，我卻拖到前幾天，我才心血來潮的在一天飆出機器人（原因不明，而且還被很多地方卡到陰）&lt;/p>
&lt;p>這就是，故事的開始（好，請不要打我！）&lt;/p>
&lt;p>（本文以 Deploy 到 Heroku 為最終目標）&lt;/p></description></item><item><title>三天做一個論壇 - Part 1</title><link>https://blog.frost.tw/posts/2012/01/25/create-a-forum-in-3-day-part1/</link><pubDate>Wed, 25 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/01/25/create-a-forum-in-3-day-part1/</guid><description>&lt;h2 id="前言">###前言&lt;/h2>
&lt;p>上次挑戰三十分鐘完成留言板雖然不幸（？）失敗，不過這次我成功的在三天的限制內完成了（簡易）論壇。&lt;/p>
&lt;p>不過，大概也是時間放的比較寬鬆，所以也比較順利在時間內完成。這次跟上次留言板一樣，是使用 PHP + MongoDB 進行開發。&lt;/p></description></item><item><title>我的第一個 Backbone.js - TODO List (無儲存功能)</title><link>https://blog.frost.tw/posts/2012/01/08/my-first-backbonejs-the-todo-list-without-store/</link><pubDate>Sun, 08 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/01/08/my-first-backbonejs-the-todo-list-without-store/</guid><description>&lt;h3 id="del湊字數的del-前言">&lt;!-- raw HTML omitted -->湊字數的&lt;!-- raw HTML omitted --> 前言&lt;/h3>
&lt;hr>
&lt;p>盧了好久，終於開始實做 Backbone.js 拉！之前聽演講時知道這很威，但是實做成功之後就深刻體會，這東西超威的！！（果然是要湊字數）&lt;/p>
&lt;p>因為是做個紀錄，所以我就不浪費時間從啥建立目錄什麼的去做摟～&lt;!-- raw HTML omitted -->
（如果你很懶，可以從文章最後的 Github 裡面的 Develop Branch 下載我做好的基礎結構）&lt;/p></description></item><item><title>三十分鐘做一個留言板 Part 1</title><link>https://blog.frost.tw/posts/2012/01/03/create-a-guestbook-in-30-mintues-part-1/</link><pubDate>Tue, 03 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/01/03/create-a-guestbook-in-30-mintues-part-1/</guid><description>&lt;h3 id="前言">前言&lt;/h3>
&lt;hr>
&lt;p>其實我自己也不確定是不是三十分鐘完成，畢竟弦也在製作時花了數倍的時間做 Debug 和架構的動作，不過如果再做一次，我想就有信心三十分鐘完成的！&lt;/p></description></item><item><title>三十分鐘做一個留言板 Part 2</title><link>https://blog.frost.tw/posts/2012/01/03/create-a-guestbook-in-30-minutes-part-2/</link><pubDate>Tue, 03 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2012/01/03/create-a-guestbook-in-30-minutes-part-2/</guid><description>&lt;h3 id="前言del廢話del">前言（&lt;!-- raw HTML omitted -->廢話&lt;!-- raw HTML omitted -->）&lt;/h3>
&lt;hr>
&lt;p>又到了快樂的 Part 2 摟！（&lt;!-- raw HTML omitted -->相隔時間可能只有幾小時而已&lt;!-- raw HTML omitted -->）這樣馬拉松寫文章還真是刺激，不過各位不用跟我一樣馬拉松式的把他做完阿！！&lt;/p></description></item><item><title>在PHPFog上架設WordPress(中文版)</title><link>https://blog.frost.tw/posts/2011/12/13/let-wordpress-on-phpfog/</link><pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2011/12/13/let-wordpress-on-phpfog/</guid><description>&lt;h2 id="前言">###前言&lt;/h2>
&lt;p>你還在默默的找免空嗎？別再耗費精力啦！&lt;!-- raw HTML omitted -->
在PHPFog上安裝一個WordPress是非常簡單又容易的，趕緊申請一個帳號，開始你的「雲端網誌」吧！&lt;/p></description></item><item><title>Hello Octopress</title><link>https://blog.frost.tw/posts/2011/11/27/hello-octopress/</link><pubDate>Sun, 27 Nov 2011 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2011/11/27/hello-octopress/</guid><description>第一次使用 Octopress 發佈再 Heroku 上。 這次的網誌也是以 Revolution 命名的，想必大家很清楚，這也是大學時期用的網誌。 往後會記錄以下的文章： 程式語言 網頁設計 APP開發 不</description></item></channel></rss>