<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deis on 弦而時習之</title><link>https://blog.frost.tw/tags/Deis/</link><description>Recent content in Deis on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Wed, 03 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/Deis/index.xml" rel="self" type="application/rss+xml"/><item><title>Deis 架構分析（二）</title><link>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</guid><description>&lt;p>延續&lt;a href="https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/">上一篇&lt;/a>的內容，這篇文章要先來討論比較好懂的 &lt;code>Router&lt;/code> 部分。&lt;/p>
&lt;p>首先，在 Deis 的設計裡面，基本上所有的服務都是包成一個 Image 作為 Continaer 在 CoreOS 運行的。就這點來看，其實是非常符合 Mircoservice 架構的設計。同時我們也可以很輕鬆地將這些服務獨立出來使用，這篇文章討論的 &lt;code>Router&lt;/code> 除了原本的用途外，也很適合用來學習透過 etcd 部署自動化更新設定檔的環境。&lt;/p>
&lt;p>Deis 的原始碼都放在一起，其中 &lt;a href="https://github.com/deis/deis/tree/master/router">Router&lt;/a> 部分是裡面的一個子目錄，那麼就讓我們開始了解運行的架構吧！&lt;/p></description></item><item><title>Deis 架構分析（一）</title><link>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</guid><description>&lt;p>最近隨著 Container 技術的成熟，以及 CoreOS 等工具的出現。開始有一些 PaaS 的工具出現，而 &lt;a href="https://deis.io">Deis&lt;/a> 就是其中一個。&lt;/p>
&lt;p>Deis 本身是受到 &lt;a href="https://heroku.com">Heroku&lt;/a> 所啟發的開源 PaaS 專案，透過 Deis 可以輕鬆的建構 Heroku-like 的 PaaS 環境，若是有能夠管理伺服器的人員，其實可以考慮以這種方式部屬網站。相對 Heroku 來說，基本的 CoreOS Cluster 只要三台機器，以 Linode 2GB 的方案來看，甚至還比 Heroku 單個 2x dyno 還便宜呢！&lt;/p>
&lt;p>關於 Deis 的架構，在官方的&lt;a href="https://docs.deis.io/en/latest/understanding_deis/architecture/">文件&lt;/a>已經有做出說明，所以這系列的文章著重在閱讀原始碼以及探討關於 Deis 是如何實踐 Heroku-like 的 PaaS 環境。&lt;/p>
&lt;blockquote>
&lt;p>我本身是 Heroku 的重度使用者，因為透過 git 管理以及豐富的 Addon 在開發時其實是非常方便的。
不過有時候還是會受到一些限制，這時候 Deis 就提供了很大的幫助。不過這類 PaaS 工具其實還不能說非常成熟，使用上還是會有不少問題，透過了解底層的機制來建構一個自己的版本，在某些情境反而更加容易控制跟維護。&lt;/p>
&lt;/blockquote></description></item></channel></rss>