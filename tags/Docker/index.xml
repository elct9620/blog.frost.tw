<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 弦而時習之</title><link>https://blog.frost.tw/tags/Docker/</link><description>Recent content in Docker on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Sun, 20 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/Docker/index.xml" rel="self" type="application/rss+xml"/><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （二）</title><link>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/10/20/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it-Part-2/</guid><description>&lt;p>寫完&lt;a href="https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/">上篇&lt;/a>後就開始員工旅遊、鐵人賽（&lt;a href="https://ithelp.ithome.com.tw/users/20065771/ironman/2734">從讀遊戲原始碼學做連線遊戲&lt;/a>）反而一直都沒有時間把下篇寫完，離 COSCUP 都已經過了一個多月自己都忘記還剩什麼沒有寫在文章裡面。&lt;/p>
&lt;p>中間在鐵人賽的部分花了一些時間把目前理解到關於 Unlight 的一些基本設計整理出來，後面則是實作。至於近期也已經開始在搭建 HTML5 版本的底層設計，還有 mruby 的&lt;a href="https://github.com/elct9620/mruby.wasm">整合&lt;/a>（因為想提供 Mod 功能到遊戲中）等等東西都在進行中，十一月還要飛日本一趟參加 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a>，可以說是完全都閒不下來。&lt;/p>
&lt;p>總之，讓我們在來看看 COSCUP 這場演講的後續吧 XD&lt;/p></description></item><item><title>COSCUP 2019 - 演講後談復活的頁遊 - Unlight （一）</title><link>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/09/03/COSCUP-2019-Talk-about-the-browser-game-Unlight-which-I-revived-it/</guid><description>&lt;p>在 &lt;a href="https://coscup.org/2019/">COSCUP&lt;/a> 分享了這兩週左右（8/3 ~ 8/17）把一款決定開放原始碼的網頁遊戲，從無法啟動到恢復伺服器開始運作的一些經驗跟大家分享。
不過看起來還是有很多人沒有機會來聽，雖然之後因為會把一部分重心放在這款遊戲上，所以應該還是有不少機會，但還是簡單的來彙整一下今天講的東西。&lt;/p>
&lt;p>上一篇&lt;a href="https://blog.frost.tw/posts/2019/08/04/Fast-review-the-Unlight-game-s-source-code/">快速閱讀 Unlight 原始碼&lt;/a>大致上有提到了我在當時看到原始碼的看法跟概觀。有興趣的話可以搭配&lt;a href="https://speakerdeck.com/elct9620/2019-coscup-fu-huo-ge-browser-game-unlight-kai-yuan-shi-jian">演講簡報&lt;/a>一起讀這篇文章。&lt;/p>
&lt;p>另外，這次整個遊戲運作起來除了我自己本身對 Ruby / ActionScript 有一定的了解外，也要感謝一下我們這個團隊（&lt;a href="https://unlight.app">Open Unlight&lt;/a>）的初期成員 Poka 和舞鶴，給我硬體上的支援跟對其他玩家的客服支援，不然有時候真的很難同時處理這些事情。&lt;/p></description></item><item><title>如何在沒有任何設定下產生 Rails 的 Docker Image</title><link>https://blog.frost.tw/posts/2019/03/20/The-zero-configure-dockerfile-for-rails/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/03/20/The-zero-configure-dockerfile-for-rails/</guid><description>&lt;p>前陣子看到 &lt;a href="https://thoughtbot.com/">Throughbot&lt;/a> 這間在 Ruby 圈 算是蠻有名的公司做了一個叫做 &lt;a href="https://github.com/thoughtbot/suspenders">Suspenders&lt;/a> 的 Gem 主要是對 Rails 擴充，簡單說就是基於原本的 &lt;code>rails new&lt;/code> 做了一個替代品，而這個替代品會自動幫你先做好一些原本要手動做的事情。&lt;/p>
&lt;p>像是安裝好常用的 Gem、套版之類的，想了一下覺得&lt;a href="https://5xruby.tw">五倍&lt;/a>其實也很需要，不少新專案也都是從我這邊經手初始化的，有一個這樣的工具會省下不少時間。&lt;/p>
&lt;p>所以 &lt;a href="https://github.com/5xRuby/bankai">Bankai&lt;/a> （卍解） 這個 Gem 就樣做出來了，裡面基本上就是設置好在五倍大多數時候用的標配 Ex. GitLab CI 設定、RSpec 等等&lt;/p>
&lt;p>但是又發現好像不太夠用，有些時候有 Docker 會方便很多，但是 Bankai 現在做不到！&lt;/p></description></item><item><title>Heroku Cedar 14 - 用 Docker 客製化環境</title><link>https://blog.frost.tw/posts/2015/06/16/heroku-cedar-14-docker-customized-environment/</link><pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2015/06/16/heroku-cedar-14-docker-customized-environment/</guid><description>&lt;p>最近 Heroku 推出了 &lt;a href="https://blog.Heroku.com/archives/2015/5/5/introducing_heroku_Docker_release_build_deploy_heroku_apps_with_docker">Docker 支援&lt;/a>，也因此我馬上就去試玩了這個功能。&lt;/p>
&lt;p>這篇文章會簡單介紹 Heroku Docker 的運作，以及可以運用的方式。&lt;/p>
&lt;p>文章大致上會涵蓋這些內容：&lt;/p>
&lt;ul>
&lt;li>Heroku Docker Plugin 的運作&lt;/li>
&lt;li>建構客製化環境的 Dockerfile&lt;/li>
&lt;li>利用 Docker 製作 Buildpacks&lt;/li>
&lt;/ul></description></item><item><title>Container Summit 2014：未來的雲端</title><link>https://blog.frost.tw/posts/2014/12/12/container-summit-2014-the-future-of-the-cloud/</link><pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2014/12/12/container-summit-2014-the-future-of-the-cloud/</guid><description>&lt;p>其實原本沒有打算參加的，不過最後還是禁不起誘惑選擇參加這場活動。&lt;/p>
&lt;p>主要是因為有兩場議程是我希望在近期解決的問題，因此現場聽講肯定會是一個比較好的方法。&lt;/p>
&lt;p>&lt;img src="https://user-image.logdown.io/user/52/blog/52/post/245946/FyIvUNQnSRa5aNaLWzK3_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-12%20%E4%B8%8B%E5%8D%8811.26.55.png" alt="螢幕快照 2014-12-12 下午11.26.55.png">&lt;/p>
&lt;p>實際上，我其實算是蠻早接觸 Docker 的使用者，不過當時除了建建 Container 之外也不能做些什麼，因此很自然的就沒有多加在意了（現在使用起來發現 Docker 多了不少功能和改進⋯⋯）&lt;/p>
&lt;p>之後也有 Docker.Taipei 的活動，不過也沒有深入接觸，算是蠻可惜的⋯⋯&lt;/p>
&lt;p>不過，這次活動結束之後我認為善用 Docker 應該會成為一個很有利的技術。&lt;/p></description></item></channel></rss>