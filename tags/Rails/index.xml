<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rails on 弦而時習之</title><link>https://blog.frost.tw/tags/Rails/</link><description>Recent content in Rails on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Thu, 20 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/Rails/index.xml" rel="self" type="application/rss+xml"/><item><title>撰寫一個合適的 RSpec 測試</title><link>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</guid><description>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p></description></item><item><title>關於 Rails 中的 Form Object / Presenter 這些物件該怎麼用（一）</title><link>https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/</guid><description>&lt;p>前陣子在 Review 新專案中同事的程式碼時，發現同事對像是 Service Object / Form Object 這類物件不太有概念。不過這個新專案因為是接手其他公司的專案，所以有不少地方要微調。至少那個值得吐槽的「因為 Controller 程式碼太長不知道放哪裡，就都丟去 Service Object 好了！」的神奇用法，完全沒有幫助改善程式碼。&lt;/p>
&lt;p>也因為這個機會，我用了一點時間跟專案的同事分享了一下我對這些物件的看法。畢竟當出我也是搞不太懂，不過隨著了解物件導向和 Ruby 的語言特性，從這些角度切入後，就比較能理解該怎麼使用。&lt;/p></description></item><item><title>如何在沒有任何設定下產生 Rails 的 Docker Image</title><link>https://blog.frost.tw/posts/2019/03/20/The-zero-configure-dockerfile-for-rails/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/03/20/The-zero-configure-dockerfile-for-rails/</guid><description>&lt;p>前陣子看到 &lt;a href="https://thoughtbot.com/">Throughbot&lt;/a> 這間在 Ruby 圈 算是蠻有名的公司做了一個叫做 &lt;a href="https://github.com/thoughtbot/suspenders">Suspenders&lt;/a> 的 Gem 主要是對 Rails 擴充，簡單說就是基於原本的 &lt;code>rails new&lt;/code> 做了一個替代品，而這個替代品會自動幫你先做好一些原本要手動做的事情。&lt;/p>
&lt;p>像是安裝好常用的 Gem、套版之類的，想了一下覺得&lt;a href="https://5xruby.tw">五倍&lt;/a>其實也很需要，不少新專案也都是從我這邊經手初始化的，有一個這樣的工具會省下不少時間。&lt;/p>
&lt;p>所以 &lt;a href="https://github.com/5xRuby/bankai">Bankai&lt;/a> （卍解） 這個 Gem 就樣做出來了，裡面基本上就是設置好在五倍大多數時候用的標配 Ex. GitLab CI 設定、RSpec 等等&lt;/p>
&lt;p>但是又發現好像不太夠用，有些時候有 Docker 會方便很多，但是 Bankai 現在做不到！&lt;/p></description></item><item><title>Rails 串接 ProxmoxVE API 自動化教學用虛擬機分配</title><link>https://blog.frost.tw/posts/2019/02/19/Automatic-VM-allocate-using-Proxmox-VE-and-Rails/</link><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/02/19/Automatic-VM-allocate-using-Proxmox-VE-and-Rails/</guid><description>&lt;p>之前有一段時間因為用 KVM 手動管理&lt;a href="https://5xruby.tw">五倍&lt;/a>的虛擬機花上不少時間，評估之後我們就調整成 ProxmoxVE 來管理，至少在大多數的情況有 GUI 是很方便的。&lt;/p>
&lt;p>不過使用的權限還是限制在有權限管理機器的人身上，最近剛好有不少新同事加入，想讓他們練習部署伺服器。&lt;/p>
&lt;p>所以就有了這樣的問題：&lt;/p>
&lt;p>&lt;strong>可以讓同事自己申請虛擬機來練習嗎？&lt;/strong>&lt;/p></description></item><item><title>用 Redux 跟 GraphQL 玩 Rails 5.1</title><link>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2017/05/01/Play-with-Rails-5-1-using-Redux-and-GraphQL/</guid><description>&lt;p>上週五在處理網址續費的時候，發現幫老爸公司管理的網址已經多到一個程度。所以就決定把手邊可以轉移的服務都往 Gandi 丟過去。畢竟粗略估算可以達到 Grid B 的費率（實際上只有九五折）不過考量到有 API 能夠管理，以及一些自動化的手段，雖然相對還是稍微貴了一點，但是省去後續不少麻煩確實是有利的。&lt;/p>
&lt;p>也因為這樣，就打算以串 Gandi 的 API 來練手一下，原本是想做完管理 Domain 的部分，不過沒想到在實作一些技術面上的東西花了不少時間，只做完簡單的價格查詢。&lt;/p></description></item><item><title>Rails Girls 4 活動感想</title><link>https://blog.frost.tw/posts/2014/08/31/rails-girls-4-event-impressions/</link><pubDate>Sun, 31 Aug 2014 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2014/08/31/rails-girls-4-event-impressions/</guid><description>&lt;p>好久沒寫部落格了，一些技術類的文章都沒時間寫，草稿也越積越多⋯⋯
不過參加活動的不馬上寫完，很快就會忘記在做什麼事情啊 XDD&lt;/p>
&lt;p>這次 RG4 超幸運被選為教練，然後我又長知識了～&lt;/p>
&lt;p>雖然自己是讀設計學院，但是不管怎樣都不會有同學會朋友這麼認真的學這方面的知識。
其實某種意義上還蠻孤單的，不過對其他人來說畢竟不是必要的，所以也不能抱怨啊 XD&lt;/p>
&lt;p>那麼，就來說說 8/29 跟 8/30 這兩天做了什麼吧！&lt;/p></description></item><item><title>Capistrano to Vagrant 自動部署心得</title><link>https://blog.frost.tw/posts/2014/03/24/capistrano-to-vagrant-automated-deployment-experience/</link><pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2014/03/24/capistrano-to-vagrant-automated-deployment-experience/</guid><description>&lt;p>之前寫過一篇關於 &lt;a href="https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/">Vagrant + Capistrano + GitLab&lt;/a> 的自動化部署介紹。&lt;/p>
&lt;p>不過當時因為一些問題，卡著沒有繼續完成測試。
最近因為某些原因，需要一個 Nightly-like (不一定會每日更新，取決于 commit) 的環境，所以只好硬著頭皮把全部的問題解決了⋯⋯&lt;/p></description></item><item><title>從學生的角度給學生學習程式的建議</title><link>https://blog.frost.tw/posts/2013/12/18/from-the-students-perspective-to-the-students-program-of-study-recommendations/</link><pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2013/12/18/from-the-students-perspective-to-the-students-program-of-study-recommendations/</guid><description>&lt;p>雖然自己不是什麼高手，也沒什麼有建設性的建議，但是最近老爸公司來了實習生，我在跟實習生的互動過程中，發現了一些學生在學習程式上的一些要注意的部分，所以想來分享一下。&lt;/p>
&lt;p>（先不討論我怎麼會在老爸公司寫扣，還有實習生怎麼出現的這些神秘問題了 XD）&lt;/p>
&lt;hr>
&lt;p>其實已經有很多前輩已經分享過非常多有用的技巧與方法，這邊就單純以我個人的經驗，還有與實習生接觸後，我在教導實習生使用 Rails 和融入老爸公司開發流程的過程。（雖然以前只有我自己寫扣拉，哭哭）&lt;/p></description></item><item><title>用 Vagrant 整合 GitLab 與 Capistrano 做 Staging 環境自動部署</title><link>https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/</link><pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/</guid><description>&lt;p>&lt;!-- raw HTML omitted -->這標題超級長的說（崩潰&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>最近因為有實習生要來，所以把老爸公司設定好 GitLab 和 Gitlba-CI 來作為內部的版本本控制和自動化測試環境。
不過原本規劃的 Staging 環境也是在這檯主機上（當初就很淡定把記憶體和處理器加高，因為我會狂開 VM XD）但是會有 SSH 權限上的問題，原本想利用 Git 的 Hook 之類的來處理，但是感覺似乎不太好。&lt;/p>
&lt;p>剛好這次看到 GitLab / GitLab-CI 的介紹文，我又再次嘗試安裝，過程上順利、簡單很多。
不過上次不順利肯定是我把整個環境裝在 NAS 裡面的關係 XDD&lt;/p>
&lt;p>從我建好 GitLab / GitLab-CI 到設定 Capistrano 到自動部署，其實花費不少時間，而且有很多「差點忘記」的部分，因此決定來寫一篇文章做筆記！&lt;/p></description></item><item><title>Nitrous.io - 網站開發協作平台</title><link>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</link><pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</guid><description>&lt;p>會寫這篇文章，主要是最近收到 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的信，而我意外地想到一個特別的用途，那就是透過線上協作功能教我妹寫 Ruby on Rails。&lt;/p>
&lt;p>註：本文連結都帶有 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的邀請碼，如果不喜歡請直接輸入 Nitrous.io 進入網站註冊&lt;/p>
&lt;hr>
&lt;h3 id="什麼是-nitrousio">什麼是 Nitrous.io&lt;/h3>
&lt;p>這大概要追溯到三、四年前，一個叫做 Action.io 的服務了⋯⋯
那時還是高中生的我，意外的申請了一個叫做 Action.io 的 Beta 計劃，然後開始等待邀請碼。
（根據噗浪訊息，直到今年我才收到 Beta 邀請碼）&lt;/p>
&lt;p>當時的 Action.io 展示了一個功能「線上協作」而引起我的興趣。&lt;/p>
&lt;p>至於線上協作是什麼形式的呢？昨晚上測試的結果是只要啓動「協作模式」就能夠立即得看到其他人的編輯，並且附有聊天室的功能。
不過如果單純是這樣，那麼用最近幾年出現的線上編輯器不是也可以達到嗎？不過，既然有辦法推出這個服務，總是會有他的過人之處，那就是他直接提供了你一個接近 VPS 的環境。（推測是 Amazon EC2）&lt;/p></description></item></channel></rss>