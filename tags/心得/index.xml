<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>心得 on 弦而時習之</title><link>https://blog.frost.tw/tags/%E5%BF%83%E5%BE%97/</link><description>Recent content in 心得 on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 23 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/%E5%BF%83%E5%BE%97/index.xml" rel="self" type="application/rss+xml"/><item><title>TGONext: 規劃高併發服務</title><link>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/02/23/TGONext-The-plan-for-high-concurrency/</guid><description>&lt;p>昨天是 &lt;a href="https://next.tgonetworks.org/">TGONext&lt;/a> 的第一次聚會，在這個活動中我們會向台灣的一些高階主管學習。在開場結束後我們的導師 &lt;a href="https://blog.gcos.me/">Ant&lt;/a> 讓我們投票選出幾個想在這半年的時間內討論的題目。基本上我們預定討論四個主題，而「高併發」是我們的第一個主題。&lt;/p></description></item><item><title>撰寫一個合適的 RSpec 測試</title><link>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2020/02/20/Write-a-suitable-RSpec-test/</guid><description>&lt;p>包括我自己在內，寫測試有時候是一個非常不想面對的工作。也有很多剛入門的工程師覺得很難去分辨該怎麼去寫測試，在今天跟同事說明完一些技巧後就決定來寫一下這篇分享一下我自己的經驗。&lt;/p></description></item><item><title>Ruby World Conference 2019 見聞</title><link>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/11/18/Ruby-World-Conference-2019-Experience/</guid><description>&lt;p>今年把在六月到八月做的一個小專案拿去投稿 &lt;a href="https://2019.rubyworld-conf.org/en/">Ruby World Conference&lt;/a> 意外的獲得了 15 分鐘的時間，於是又展開了一次日本出差之旅，剛好彌補一下今年因為客戶專案需要趕上線而無法參加 &lt;a href="https://rubykaigi.org/">RubyKaigi&lt;/a> 的遺憾。&lt;/p>
&lt;p>跟 RubyKaigi 不太一樣的地方是 Ruby World Conference 雖然叫做「World Conference」但是除了台上的講者之外，幾乎都是日本人（而且是稍微有年紀的大叔）去參加的。&lt;/p></description></item><item><title>RubyConf Taiwan 2019 會後感想、議程概覽</title><link>https://blog.frost.tw/posts/2019/07/29/My-experience-after-RubyConf-Taiwan-2019/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/07/29/My-experience-after-RubyConf-Taiwan-2019/</guid><description>&lt;p>跟前幾年一樣基本上就是工作人員，這幾年參加研討會也都比較沒有在仔細聽了，所以大多是邊顧邊寫點程式。&lt;/p>
&lt;p>比較不一樣的大概是今年更累了，從週四下午場佈到 Pre Party 然後兩天的活動、Official Party 最後到今年嘗試的 After Hack 幾乎是四天左右的連續接力，每天早上醒來都要先懷疑自己是否能撐過這一天。&lt;/p></description></item><item><title>關於 Rails 中的 Form Object / Presenter 這些物件該怎麼用（一）</title><link>https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/05/28/How-to-use-Form-Object-and-others-for-Rails/</guid><description>&lt;p>前陣子在 Review 新專案中同事的程式碼時，發現同事對像是 Service Object / Form Object 這類物件不太有概念。不過這個新專案因為是接手其他公司的專案，所以有不少地方要微調。至少那個值得吐槽的「因為 Controller 程式碼太長不知道放哪裡，就都丟去 Service Object 好了！」的神奇用法，完全沒有幫助改善程式碼。&lt;/p>
&lt;p>也因為這個機會，我用了一點時間跟專案的同事分享了一下我對這些物件的看法。畢竟當出我也是搞不太懂，不過隨著了解物件導向和 Ruby 的語言特性，從這些角度切入後，就比較能理解該怎麼使用。&lt;/p></description></item><item><title>利用 Ruby 的 Lambda 做條件判斷</title><link>https://blog.frost.tw/posts/2019/05/20/Use-Ruby-s-Lambda-as-case-when-condition/</link><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/05/20/Use-Ruby-s-Lambda-as-case-when-condition/</guid><description>&lt;p>週末在思考一些 Ruby 特性可以應用的小技巧時，想到龍哥大概跟我講了三次以上的一個特性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">other&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">fn&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1"># =&amp;gt; false&lt;/span>
&lt;span class="n">fn&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1"># =&amp;gt; true&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>剛好最近工作的專案上有個問題，似乎挺適合用這個技巧。&lt;/p></description></item><item><title>我在 Ruby 埋了一個陷阱 - Signal 的應用</title><link>https://blog.frost.tw/posts/2019/03/12/I-make-a-trap-in-the-Ruby-the-usage-of-Signal/</link><pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/03/12/I-make-a-trap-in-the-Ruby-the-usage-of-Signal/</guid><description>&lt;p>在 Ruby 之中，其實隱藏了很多非常實用的標準函式庫，而 Signal 就是其中一個。&lt;/p>
&lt;p>我們在寫 Ruby 大多數時候都是 Ruby on Rails 框架的應用，但是你們有想過當我們在一些 Gem 運行的時候，使用 Ctrl + C 為什麼不會出現錯誤嗎？&lt;/p>
&lt;p>例如我們常常用到的 &lt;code>irb&lt;/code> 和 &lt;code>pry&lt;/code> 為什麼按下 Ctrl + C 的時候不是直接中斷，卻還能繼續運作？&lt;/p></description></item><item><title>探索 Ruby 的 each 方法（一）</title><link>https://blog.frost.tw/posts/2019/02/13/Deep-into-ruby-s-each-method-Part-1/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2019/02/13/Deep-into-ruby-s-each-method-Part-1/</guid><description>&lt;p>原本是想討論 Enumerable 這個 Module 的機制跟運作原理，不過越寫越發現光是一篇文章很難講明白。&lt;/p>
&lt;p>所以就一邊查資料跟 Ruby 原始碼，慢慢的把 Enumerable / Enumerator 這兩個讓 &lt;code>#each&lt;/code> 運作起來的機制討論清楚。&lt;/p>
&lt;p>在 Ruby 裡面我們已經很熟悉使用 &lt;code>#each&lt;/code> 來對陣列相關的物件進行操作，不過在大部分的語言我們都需要透過迴圈的方式來取出陣列的元素，那麼 &lt;code>#each&lt;/code> 這個方法到底是怎麼讓我們用這麼方便的機制來操作陣列的呢？&lt;/p></description></item><item><title>用 Ruby 來尋找區網中的 Airplay、Chromecast</title><link>https://blog.frost.tw/posts/2018/12/25/Use-Ruby-to-find-the-Airplay-or-Chromecast-device/</link><pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/12/25/Use-Ruby-to-find-the-Airplay-or-Chromecast-device/</guid><description>&lt;p>從雲端開始熱門起來後，為了能能讓提供不同服務的伺服器能夠被自動的偵測，我們在許多雲端相關的工具都會看到 Service Discovery 這個名詞。&lt;/p>
&lt;p>不過，除了雲端上的服務能夠透過這樣的機制互相「發現」對方，我們也可以在區網中用類似的方法找到「提供服務」的裝置。&lt;/p>
&lt;p>這就要從 mDNS (Multicast DNS) 和 DNS-SD (DNS-based Service Discovery) 開始談起。&lt;/p></description></item><item><title>為什麼要學習 Bootstrap 呢？</title><link>https://blog.frost.tw/posts/2018/11/27/Why-we-choose-the-Bootstrap/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/11/27/Why-we-choose-the-Bootstrap/</guid><description>&lt;p>最近在工作上或者跟有在做網站開發的朋友聊天，都剛好會討論到 &lt;a href="https://getbootstrap.com/">Bootstrap&lt;/a> 這個 CSS 框架。&lt;/p>
&lt;p>在業界，我想大部分的公司也大多會以 Bootstrap 為基礎來開發網站，而這幾年網路上可以買到的版型也多以 Bootstrap 為主。&lt;/p>
&lt;p>從這些跡象看起來，會使用 Bootstrap 很重要，中間的過程跟原因是什麼呢？&lt;/p></description></item><item><title>轉職工程師：尋找自己的價值</title><link>https://blog.frost.tw/posts/2018/11/06/Become-a-programmer-Find-your-own-value/</link><pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/11/06/Become-a-programmer-Find-your-own-value/</guid><description>&lt;p>這系列的文章已經稍微討論過我自己在學習寫程式過程中的&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">心態&lt;/a>、&lt;a href="https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/">方法&lt;/a>跟&lt;a href="https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/">困難&lt;/a>，最後就來討論最後一個我認為很重要的問題。&lt;/p>
&lt;p>不論學了什麼，或者有多麽厲害的技術，作為一個工程師我們的價值在哪裡？&lt;/p></description></item><item><title>轉職工程師：為什麼馬上就遇到瓶頸？</title><link>https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/</link><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/</guid><description>&lt;p>前面已經討論了&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">起步的心態&lt;/a>跟&lt;a href="https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/">起步的方法&lt;/a>兩個問題，好不容易開始寫程式了，卻發現⋯⋯&lt;/p>
&lt;p>&lt;strong>照著教學做，但是沒有教學就完全不會&lt;/strong>&lt;/p>
&lt;p>不管是去上更多的課，還是看更多的教學，怎麼樣都無法擺脫這個問題。這到底是什麼原因呢？&lt;/p></description></item><item><title>轉職工程師：要學什麼才好？</title><link>https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/</guid><description>&lt;p>上一篇文章&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">輸在起跑點&lt;/a>已經稍微討論過心態上的問題，所以馬上就是要怎麼開始的問題。&lt;/p>
&lt;p>大部分的人不論之前有沒有經驗，一定會冒出「要學什麼語言？」「某某語言很熱門是不是應該去學？」之類的問題。&lt;/p>
&lt;p>很多時候，我認為這不是真正的問題。&lt;/p></description></item><item><title>轉職工程師：輸在起跑點</title><link>https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/</guid><description>&lt;p>工作到現在差不多兩年多，因為公司業務的關係偶爾也會跟同事討論在學習當工程師或者寫程式上的經驗。所以打算寫一個系列的文章，跟大家分享一下我從學程式到成為一個工程師的過程，是怎麼樣的。&lt;/p>
&lt;p>這是第一篇，我想用「輸在起跑點」來當開始。&lt;/p></description></item><item><title>怎麼選第一份工作？</title><link>https://blog.frost.tw/posts/2018/09/10/How-to-choose-your-first-job/</link><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/09/10/How-to-choose-your-first-job/</guid><description>&lt;p>從退伍到工作差不多過了兩年，這段時間有不少經驗我想已經足夠跟大家分享。這篇算是一個前導的文章，想來跟大家分享「第一份工作」的重要性。&lt;/p>
&lt;blockquote>
&lt;p>重點是技能成長那段，討論薪水的地方太長可以跳過喔 XD&lt;/p>
&lt;/blockquote></description></item><item><title>如何在國外演講</title><link>https://blog.frost.tw/posts/2018/06/19/How-do-I-prepare-a-speech/</link><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/06/19/How-do-I-prepare-a-speech/</guid><description>&lt;p>今年在 &lt;a href="https://rubykaigi.org/2018">RubyKaigi&lt;/a> 有一場 Lightning Talk 分享，在後台準備跟等待上場的時候發現一件事情。&lt;/p>
&lt;p>&lt;strong>前面的人都邊發抖邊講&lt;/strong>&lt;/p>
&lt;p>所以這篇文章來分享一下我的方法跟心得。&lt;/p></description></item><item><title>RubyKaigi 2018 會後心得</title><link>https://blog.frost.tw/posts/2018/06/12/The-RubyKaigi-2018-Experience/</link><pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/06/12/The-RubyKaigi-2018-Experience/</guid><description>&lt;p>今年的 RubyKaigi 比去年提早不少，作為 Ruby 開發者最大的盛會，今年也不意外的延續去年探討 Ruby 3 的可能性跟更多 Ruby 的深度應用。也因次，不意外的讓大家都聽的似懂非懂，而且還讓我感覺一年比一年的難度更高。&lt;/p>
&lt;p>總之，來看看今年的 RubyKaigi 吧！&lt;/p></description></item><item><title>關於我怎麼準備人生第一次的履歷和面試</title><link>https://blog.frost.tw/posts/2018/05/14/About-my-first-time-interview-and-resume/</link><pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/14/About-my-first-time-interview-and-resume/</guid><description>&lt;p>最近又到了畢業的季節，今年比較不一樣的大概是我有稍微幫幾個學弟妹看了一下履歷。還有公司今年暑期實習生的履歷，我也都看了一遍。&lt;/p>
&lt;p>看完之後就發現，跟當初退伍前準備的情況不一樣，我們肯定搞錯重點了 XD&lt;/p>
&lt;p>總之，這不是一篇雞湯文，是雞精文！&lt;/p></description></item><item><title>RubyElixirConfTW 2018 會後感想</title><link>https://blog.frost.tw/posts/2018/05/01/The-RubyElixirConfTW-2018-Experience/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/05/01/The-RubyElixirConfTW-2018-Experience/</guid><description>&lt;p>Ruby Conference Taiwan 到今年已經是第七年了，印象中我大概是從 2013 年左右開始參加了，應該也有四五次。今年也加入了 Elixir 一起合辦，因為是&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>的員工，所以也當了兩年的工作人員。&lt;/p>
&lt;p>那麼，就看看今年有什麼新鮮的事情吧！&lt;/p></description></item><item><title>如何在 2018 年被詐騙</title><link>https://blog.frost.tw/posts/2018/04/24/How-to-be-scammed-in-2018/</link><pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/04/24/How-to-be-scammed-in-2018/</guid><description>&lt;p>這是關於某天晚上接到詐騙電話的分析，因為過程中太多細節的東西讓人掉入陷阱，跟同事聊過之後覺得還是寫一篇文章記錄會比較好，至少不會有人又踩到這樣的坑。&lt;/p>
&lt;p>這篇文章重點也很簡單，&lt;strong>「不要以為你不會被騙」&lt;/strong>&lt;/p></description></item><item><title>在 2018 年我所知道的區塊鏈</title><link>https://blog.frost.tw/posts/2018/04/02/The-blockchain-I-know-about-in-2018/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/04/02/The-blockchain-I-know-about-in-2018/</guid><description>&lt;p>上週同事突然在公司的聊天群組中討論起區塊鏈到底是不是屬於分散式系統（Distributed System）因為去年年底爆紅的關係，我也稍微了解了一下區塊鏈的運作，就被同事說會不會晚上就有文章出來了。&lt;/p>
&lt;p>雖然不是當天晚上就在寫，不過了解區塊鏈的運作倒是很有幫助我們冷靜下來對應這個新名詞。&lt;/p></description></item><item><title>自由的 Ruby 類別（二）</title><link>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/</link><pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2018/03/23/The-ruby-s-object-is-free-Part-2/</guid><description>&lt;p>&lt;a href="https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/">上一篇文章&lt;/a>已經討論過關於 Ruby 中的類別是怎樣運作的，這篇文章則會來討論如何拓展 Ruby 類別。&lt;/p>
&lt;p>大部分的人寫 Ruby 有很大的原因是因為 Rails 但是上面像是 &lt;code>has_many&lt;/code> 跟 &lt;code>before_action&lt;/code> 這些可以直接在類別上做的事情，很明顯不是 Ruby 內建的，到底是怎麼運作的呢？&lt;/p></description></item><item><title>Stripe 的 Idempotency Key 設計機制</title><link>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/30/The-design-of-Stripe-s-Idempotency-Keys/</guid><description>&lt;p>週末看到一篇 Stripe 工程師所寫的文章，是一篇關於 Idempotency Key （幂等鍵）的設計機制。因為是一篇非常棒的文章，而且裡面的概念除了可以應用在 API 設計之外，很多程式設計上需要解決的問題都可以透過這個概念來處理。&lt;/p>
&lt;p>原文非常的長而且很詳細，這篇文章只會做簡單的重點整理。&lt;/p>
&lt;p>有興趣的話可以打開&lt;a href="https://brandur.org/idempotency-keys">原文&lt;/a>來讀，是一篇很有用的文章。&lt;/p>
&lt;blockquote>
&lt;p>作者是很厲害的工程師，部落格上的文章都是非常精實的技術文。&lt;/p>
&lt;/blockquote></description></item><item><title>自由的 Ruby 類別（一）</title><link>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/</link><pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/22/The-ruby-s-class-is-free-Part-1/</guid><description>&lt;p>以前還在讀書的時候，常常會思考所謂的「自由」是什麼，想著以後一定要過著自由的生活。不過現實就是到了社會，依舊還是有許多限制讓你無法自由自在。&lt;/p>
&lt;p>不過，在 Ruby 中的類別卻是非常自由的。&lt;/p>
&lt;p>有稍微接觸過 Ruby 的人應該都知道幾個特性：&lt;/p>
&lt;ul>
&lt;li>物件導向語言&lt;/li>
&lt;li>一切都是物件&lt;/li>
&lt;/ul></description></item><item><title>在 RubyKaigi 2017 年後的反思</title><link>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/</link><pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2017/10/09/The-RubyKaigi-2017-let-me-reflection/</guid><description>&lt;p>在這幾個月，感覺到自己好像快要突破這一階段的瓶頸，所以做了一些調整試試看能不能順利的突破，同時也到了每年公司參與 RubyKaigi 的時期。&lt;/p>
&lt;p>要說的話，今年的 RubyKaigi 整體的方向對我來說很不一樣，因為有不少關於 RubyKaigi 底層的議程被提出來，這在台灣舉辦研討會需要照顧到不同客群的人總會需要有一些取捨。&lt;/p>
&lt;p>不過，對日本——Ruby 的發源地來說，因為有不同類型的研討會互補，反而可以在不同的研討會上，著重不同的情境來討論。&lt;/p></description></item><item><title>Afte PHPConf 2016</title><link>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/</link><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/10/30/Afte-PHPConf-2016/</guid><description>&lt;p>PHPConf 是退伍後參加的第三個研討會。雖然現在已經沒有什麼在寫 PHP 了，不過寫了好幾年的語言還是會想關注一下最近的狀況。&lt;/p>
&lt;p>今年其實沒有聽到很多議程，只聽了三場議程而已。
大部分的時間都用在跟講師聊天，不過另一方面也感受到這幾年很多活動都已經不是以前認識的人去參加。這大概就是對我們這群人來說，一個研討會的內容能帶給我們的東西已經不夠了。&lt;/p>
&lt;p>雖然以前會覺得自己還能夠一直參加，不過實際上當研討會分享的東西大多能靠自己學會跟吸收的時候，就沒有那麼重要。有機會的話，去做分享也是繼續參與的一個階段，能力可及的話我也會盡可能多做分享。&lt;/p></description></item><item><title>在 RubyKaigi 2016 後的新視野</title><link>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/</link><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/09/17/the-new-vision-after-rubykaigi2016/</guid><description>&lt;p>八月份退伍後，馬上就加入了&lt;a href="https://5xruby.tw">五倍紅寶石&lt;/a>。而隨之而來的，剛好是在九月份為期九天的員工旅遊，一個非常充實的員工旅遊。&lt;/p>
&lt;p>實際上，我們只有三天左右在日本遊玩。原本的行程會穿插著與日本 Ruby 社群的交流，以及三天的 RubyKaigi 行程。&lt;/p>
&lt;p>這次的旅遊算是增長了不少見識，讓我想到高中快畢業時第一次知道了 COSCUP 之後瘋狂地參加各種語言的研討會，幾乎一年每個月都在跑研討會。印象沒錯的話，大概是 2013 年才參與到 RubyConf 也因為參加了 RubyConf 的活動，退伍前後蠻多工作機會都是來自 Ruby 圈的，算是整個程式經歷中給我幫助最多的社群了吧。&lt;/p></description></item><item><title>使用 GitLab CI 整合 SonarQube</title><link>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/</link><pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/06/12/Working-with-Gitlab-CI-and-Sonarqube/</guid><description>&lt;p>之前都在偷懶沒有寫網誌，剛好這次端午連假比較長。
所以想做測試跟實驗的部分都做完了，就來寫一篇關於 GitLab CI 整合的經驗分享。&lt;/p>
&lt;p>文章中大致上會涵蓋這些部分：&lt;/p>
&lt;ul>
&lt;li>GitLab CI 基本使用&lt;/li>
&lt;li>Rancher建置環境&lt;/li>
&lt;li>SonarQube 基本使用&lt;/li>
&lt;li>GitLab CI 整合環境&lt;/li>
&lt;/ul>
&lt;p>文章會以我在建構 CI 環境的過程中來講解，一些安裝跟配置的部分會直接跳過。&lt;/p></description></item><item><title>從入伍後讀的一些書</title><link>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/04/12/the-book-i-read-from-my-military-service/</guid><description>&lt;p>入伍之後一直擔心自己的技術會退步，所以其實有好幾個月的時間都很焦慮。
不過運氣不錯的是，所處的單位算是不錯的，現在的區隊長管理方式也讓我有不少時間可以充分利用。&lt;/p>
&lt;p>這邊就簡單介紹一下到目前約八個月多所讀的書，大部分時間都是利用睡前跟午睡時間去讀的，一次大約十到二十分鐘，反而因為軍隊規律的生活變成每天讀書的習慣，意外讀了不少。&lt;/p></description></item><item><title>Deis 架構分析（一）</title><link>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</guid><description>&lt;p>最近隨著 Container 技術的成熟，以及 CoreOS 等工具的出現。開始有一些 PaaS 的工具出現，而 &lt;a href="https://deis.io">Deis&lt;/a> 就是其中一個。&lt;/p>
&lt;p>Deis 本身是受到 &lt;a href="https://heroku.com">Heroku&lt;/a> 所啟發的開源 PaaS 專案，透過 Deis 可以輕鬆的建構 Heroku-like 的 PaaS 環境，若是有能夠管理伺服器的人員，其實可以考慮以這種方式部屬網站。相對 Heroku 來說，基本的 CoreOS Cluster 只要三台機器，以 Linode 2GB 的方案來看，甚至還比 Heroku 單個 2x dyno 還便宜呢！&lt;/p>
&lt;p>關於 Deis 的架構，在官方的&lt;a href="https://docs.deis.io/en/latest/understanding_deis/architecture/">文件&lt;/a>已經有做出說明，所以這系列的文章著重在閱讀原始碼以及探討關於 Deis 是如何實踐 Heroku-like 的 PaaS 環境。&lt;/p>
&lt;blockquote>
&lt;p>我本身是 Heroku 的重度使用者，因為透過 git 管理以及豐富的 Addon 在開發時其實是非常方便的。
不過有時候還是會受到一些限制，這時候 Deis 就提供了很大的幫助。不過這類 PaaS 工具其實還不能說非常成熟，使用上還是會有不少問題，透過了解底層的機制來建構一個自己的版本，在某些情境反而更加容易控制跟維護。&lt;/p>
&lt;/blockquote></description></item><item><title>在 TpGS 2016 展出後的計劃</title><link>https://blog.frost.tw/posts/2016/01/30/the-plan-after-tpgs-2016/</link><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/01/30/the-plan-after-tpgs-2016/</guid><description>&lt;p>去當國軍也快半年了，遊戲的專案幾乎沒什麼進展。
還一直覺得自己在退步，在多媒體、資訊這些變換快速的產業，要當國軍真的是很吃虧啊 XD&lt;/p>
&lt;p>這次鼓起勇氣，去挑戰去年不敢嘗試看看的台北電玩展。
雖然不是面對大眾的 B2C 展區，畢竟我們的目標是去找合作機會跟拓展人脈。
不過這次的展出也算是收穫良多，至少有機會跟一些前輩好好聊天，也碰到許多不一樣的獨立遊戲開發者。
雖然廠商方面大多是提供開發者服務為面向的，但是至少也了解到不少關於亞洲地區業界的狀況。&lt;/p>
&lt;p>今年我們團隊 &lt;a href="https://basaltic.tw">Basaltic Studio&lt;/a> 做了兩件事：&lt;/p>
&lt;ol>
&lt;li>參加 TpGS 2016&lt;/li>
&lt;li>在 Steam 釋出作品&lt;/li>
&lt;/ol>
&lt;p>釋出作品也是也是一個很大的挑戰，這邊就針對今年的計畫好好談談吧！&lt;/p></description></item><item><title>2015 新一代感想</title><link>https://blog.frost.tw/posts/2015/05/06/2015-yodex-impressions/</link><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/05/06/2015-yodex-impressions/</guid><description>&lt;p>參加完新一代就差不多是要等畢業了（茶&lt;/p>
&lt;p>文章開始之前，一定要先靠北一下新一代，呼籲大家在該死的投票時不要因為去參加新一代&lt;strong>很方便&lt;/strong>就不選自己辦校外展，辦校外展雖然比較累但是至少還可以學個策展的經驗，也不會被人規劃超小的場地繳根本沒有減半一樣的場地費，還不用把門票錢送給人家，也不用因為贊助商獎項很多變成當人家充場面的工具人，傻傻等那只有 8% 比例的獎項頒完。&lt;/p>
&lt;blockquote>
&lt;p>不過你們沒被陰過，不懂這感覺。沒關係，參加一次就懂了！反正是最後一次麻⋯⋯
是說評審的評分標準，最好還是送個不會入圍的 DEMO 去，自己另外曝光還比較賺喔～～&lt;/p>
&lt;/blockquote>
&lt;p>看到這行就是我要開始寫了拉 XD&lt;/p></description></item><item><title>mRuby on Web</title><link>https://blog.frost.tw/posts/2015/04/10/mruby-on-web/</link><pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/04/10/mruby-on-web/</guid><description>&lt;p>忙裡偷閒玩了一下 Emscripten 將 mRuby 拉到 Web 上面運行。&lt;/p>
&lt;p>最初是看到 &lt;a href="https://Github.com/xxuejie/webruby">WebRuby&lt;/a> 這個專案的應用 &lt;a href="https://joshnuss.github.io/mruby-web-irb/">Webirb&lt;/a> 才決定要挑戰將 mruby 丟到 Web 上面跑。&lt;/p>
&lt;blockquote>
&lt;p>其實這個過程中 WebRuby 給我很多參考方向，才讓我得以順利完成 mruby on Web 的挑戰。&lt;/p>
&lt;/blockquote></description></item><item><title>在 SITCON 2015 之後</title><link>https://blog.frost.tw/posts/2015/03/08/after-the-sitcon-2015/</link><pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/03/08/after-the-sitcon-2015/</guid><description>&lt;p>昨天（03/07）是 SITCON 2015 也是我在 SITCON 擔任工作人員的最後一年。
明年就要畢業了，算是終於退休了⋯⋯（大概會被自動升級成顧問）&lt;/p>
&lt;p>這篇文章應該不會寫太長，我還要去填坑 XD&lt;/p></description></item><item><title>Open Frameworks 與 MRuby</title><link>https://blog.frost.tw/posts/2015/02/18/open-frameworks-and-mruby/</link><pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/02/18/open-frameworks-and-mruby/</guid><description>&lt;p>自從畢製開始與同學開發遊戲後，我就開始喜歡嘗試運用一些工具如 HTML5、Mono、Processing 等來製作一些屬於自己的「遊戲框架」&lt;/p>
&lt;p>自從上次嘗試使用 Mono 與 MRuby 結合後，這次在與朋友的閒聊中回想起了 Open Frameworks 這套工具。
Open Frameworks 基本上被稱為是 C++ 版本的 Processing 就各方面來說比 Processing 改進不少，至少就我這幾天的體驗來看，以我目前的實力已經可以純熟運用了！&lt;/p>
&lt;blockquote>
&lt;p>過去曾有一段時間嘗試玩過，但是因為沒有 Project Generator 輔助建構專案，再加上與 C++ 其實不是那麼的熟悉，因而放棄。這次透過 Unreal Engine 的經驗，以及上次 MRuby 的整合讓我順利的開始使用 Open Frameworks。&lt;/p>
&lt;/blockquote>
&lt;p>這篇文章主要會分享我使用 Open Frameworks 開啟一個 Ruby 檔案，並且執行裡面的方法在介面中繪製圖像的做法。
目前我認為這個方法其實還不太完善，不過作為初次的嘗試可以算是一個不錯的成果。&lt;/p></description></item><item><title>React.js + Parse 實做簡易留言板</title><link>https://blog.frost.tw/posts/2015/02/18/reactjs-parse-doing-simple-message-board/</link><pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/02/18/reactjs-parse-doing-simple-message-board/</guid><description>&lt;p>前一陣子 SITCON 文創組冬季訓練最後一天，我安排了這個課程給我們的新成員。
雖然 SITCON 文創組看似是個需要「技術」的團隊，不過現實上我們倒是花很多時間在思考跟設計上，沒辦法找到設計相關科系的新成員稍稍遺憾。&lt;/p>
&lt;p>不過因為有製作網站的需求，因此安排了這個課程，透過學習 React.js 以及結合 Parse 去熟悉一些基本的前端技巧。&lt;/p>
&lt;p>注意事項：&lt;/p>
&lt;ol>
&lt;li>文中的範例全部都以 CoffeeScript 撰寫&lt;/li>
&lt;li>本文不會提及 Browserify 的配置與應用（當天有介紹過，練習時是使用我配置好的 gulp task）&lt;/li>
&lt;li>這是在不考慮 UI/UX 以及美術的前提下製作的&lt;/li>
&lt;li>文中不會解釋太多 React.js / Flux 的基本概念（請上官網 or ReactJS.tw 社團學習）&lt;/li>
&lt;/ol>
&lt;p>那麼，就開始吧！&lt;/p></description></item><item><title>將遊戲場景帶入網頁</title><link>https://blog.frost.tw/posts/2015/01/13/bring-the-games-scene-into-webpage/</link><pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2015/01/13/bring-the-games-scene-into-webpage/</guid><description>&lt;p>昨晚公開了畢業製作的官網「&lt;a href="https://www.make.moe">遠古神話 - The Lost Mythologies&lt;/a>」並且使用了「全景攝影技術」在網站上。&lt;/p>
&lt;blockquote>
&lt;p>喜歡我們的話請到&lt;a href="https://www.facebook.com/Basaltic.Studio?fref=nf">粉絲專頁&lt;/a>幫我們按個讚 XD&lt;/p>
&lt;/blockquote>
&lt;p>沒想到反應還蠻熱烈的，雖然官網目前也只有全景預覽以及 LOGO 而已，不過似乎造成了一點點話題。&lt;/p>
&lt;p>那麼，這個效果到底是如何做出來的呢？這篇文章就會簡單的說明。&lt;/p>
&lt;p>主要的目標大致上有：&lt;/p>
&lt;ul>
&lt;li>順暢的瀏覽&lt;/li>
&lt;li>清晰的畫面&lt;/li>
&lt;li>全景圖片的製作&lt;/li>
&lt;/ul></description></item><item><title>Container Summit 2014：未來的雲端</title><link>https://blog.frost.tw/posts/2014/12/12/container-summit-2014-the-future-of-the-cloud/</link><pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/12/12/container-summit-2014-the-future-of-the-cloud/</guid><description>&lt;p>其實原本沒有打算參加的，不過最後還是禁不起誘惑選擇參加這場活動。&lt;/p>
&lt;p>主要是因為有兩場議程是我希望在近期解決的問題，因此現場聽講肯定會是一個比較好的方法。&lt;/p>
&lt;p>&lt;img src="https://user-image.logdown.io/user/52/blog/52/post/245946/FyIvUNQnSRa5aNaLWzK3_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-12%20%E4%B8%8B%E5%8D%8811.26.55.png" alt="螢幕快照 2014-12-12 下午11.26.55.png">&lt;/p>
&lt;p>實際上，我其實算是蠻早接觸 Docker 的使用者，不過當時除了建建 Container 之外也不能做些什麼，因此很自然的就沒有多加在意了（現在使用起來發現 Docker 多了不少功能和改進⋯⋯）&lt;/p>
&lt;p>之後也有 Docker.Taipei 的活動，不過也沒有深入接觸，算是蠻可惜的⋯⋯&lt;/p>
&lt;p>不過，這次活動結束之後我認為善用 Docker 應該會成為一個很有利的技術。&lt;/p></description></item><item><title>TGDF 2014：重燃的遊戲夢</title><link>https://blog.frost.tw/posts/2014/12/07/tgdf-2014-i-want-to-make-a-game-again/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/12/07/tgdf-2014-i-want-to-make-a-game-again/</guid><description>&lt;p>心得文沒有趁熱寫果然很容易忘記，這次來嘗試使用炫砲的標題來開始這篇文章。&lt;/p>
&lt;p>這次會參加 TGDF（台北遊戲開發者論壇）其實是因為到了大三確定要做遊戲，卻每次都因為這類活動都在上課日，礙於請假問題而沒有去參加（組員都不太喜歡請假）現在大四課比較少，就跟老師請個假去參加了！&lt;/p>
&lt;p>雖然是擔任志工，不過基本上規劃還算不錯，人力需求非常的低有蠻多時間可以去聽演講。&lt;/p>
&lt;p>關於這部分，一方面是餐飲的部分由參加者自行處理，另一方面是協辦單位也有提供人力支援。再加上場地永遠只會有兩道門可以進出，讓志工人數的需求減少到非常低。&lt;/p>
&lt;p>那麼，就來看看今年的議程吧！&lt;/p></description></item><item><title>PHPConf 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/10/19/after-phpconf-2014-experience/</link><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/10/19/after-phpconf-2014-experience/</guid><description>&lt;p>這次參加 PHPConf 不是以會眾的身份，而是以講師的身份參加。回想起來，三年前左右因為朋友的推薦參加了 COSCUP 接著得知了 PHPConf 然後就開始陸陸續續的參加各種社群的活動。&lt;/p>
&lt;p>三年前左右，剛好是我升上大學的時候。那時其實已經經歷過好幾次的瓶頸，光靠自學其實是很難學好一項技能的。除了老師之外，我想就是社群這種平行交流的地方可以獲取「書本」跟「文字資料」以外的知識，很多東西真的要靠交談、人與人之間的友情，才能夠得到一些「特別的經驗」或者「特別的方法」&lt;/p>
&lt;p>當了三年多的聽眾，我在這短短的時間內透過每一個 Conference 獲得了各種不同的技能與技巧，在今年的 PHPConf 我了解到我已經從一個「接收者」變成一個「分享者」的角色，正好也是在我即將從大學畢業的這個階段。&lt;/p>
&lt;p>正因為我是受到「社群的恩惠」而成長，所以我想在之後我還是會繼續投入社群的活動。以一個工作人員，或者是講師的角色來做這件事情，即使不是每一個人都能透過這種方式成長，但是在未來，讓 Conference 繼續經營下去、舉辦的更好，都有可能多幫助到一個像我這樣受到社群滋潤而成長的人，這也是我從 SITCON 擔任工作人員的經驗，還有從 COSCUP、PHPConf、RubyConf、JSDC、WebConf 這些活動所體會到的。&lt;/p>
&lt;p>總而言之，我會盡可能以工作人員的身份來參與未來幾年的社群活動，是時候該回饋給社群了 XD&lt;/p>
&lt;p>那麼，來談談今年 PHPConf 的議程吧！&lt;/p></description></item><item><title>JSDC 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/10/13/after-jsdc-2014-experience/</link><pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/10/13/after-jsdc-2014-experience/</guid><description>&lt;p>總覺得因為大四忙著畢業製作反而沒有太多時間寫文章，不過參加 Conference 總是會習慣寫篇心得記錄一下今年發生的事情，反而讓網誌充滿了心得啊 XDD&lt;/p>
&lt;blockquote>
&lt;p>我快要變成寫心得高手拉！！&lt;/p>
&lt;/blockquote>
&lt;p>今年的 JSDC 有很大的轉變，其實我覺得這是一件「非常有勇氣」的事情。自從我接觸社群、Conference 到現在也有四年多，正好在這段時間台灣的社群活動也越來越熱烈，從剛開始一年只會參加兩三次活動，到今年我平均一周大概就有一天會到臺北。就可以看到社群的發展，以及許多人熱血的在付出。&lt;/p>
&lt;p>不過，從規模、參與者、活動品質個個面相來看，社群也開始面臨一些需要轉變的問題。跟三、四年前不同，我們也很多地方已經無法用過去小規模的方式去舉辦，而國外講者的比例也逐漸地增加，某一方面而言是這些活動已經有一定的知名度，已經逐漸無法用過去的方式來舉辦（這也是最近我們 SITCON 籌備團隊少數幾位組長開始在爭辯的問題，我們該何去何從、該如何改變以繼續發展下去等等⋯⋯）&lt;/p>
&lt;p>所以，就這一點而言我認為 JSDC &lt;strong>非常勇敢的&lt;/strong>幫大家做一次嘗試，嘗試用國際等級的票價、嘗試讓議程更加的國際化（除了 JSDC 之外，我只有在 RubyConf 碰過這麼多國外講者）、嘗試讓活動的品質提高。&lt;/p>
&lt;p>簡單來說，要踩雷的話，總有一個人先去踩看看，這個人就是 JSDC 的籌備團隊。&lt;/p></description></item><item><title>MRuby in C# - 因 RPG Maker 的慘劇（二）</title><link>https://blog.frost.tw/posts/2014/09/28/mruby-in-csharp-the-tragedy-of-rpg-maker-2/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/09/28/mruby-in-csharp-the-tragedy-of-rpg-maker-2/</guid><description>&lt;p>前一篇文章討論了關於 C# 執行一段 Ruby 程式碼並且取得執行結果（字串）的做法。
不過，光是這樣在 C# 使用 MRuby 的意義並不大，我們需要結合 Ruby 的 DSL 特性，讓自製的 RPG Maker 可以更加簡單的被用於製作遊戲（最終目的）&lt;/p>
&lt;p>也因此，我們需要能夠讓 C# 中的一些 API 可以在 Ruby 中被呼叫以及使用。
那麼，能夠從 C# 定義 Ruby 的 Module / Class 和 Method 就非常的重要，因為如果無法這樣做，那麼就無法讓 Ruby 執行 C# 的程式碼。&lt;/p></description></item><item><title>MRuby in C# - 因 RPG Maker 的慘劇（一）</title><link>https://blog.frost.tw/posts/2014/09/04/mruby-in-csharp-the-tragedy-of-rpg-maker-1/</link><pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/09/04/mruby-in-csharp-the-tragedy-of-rpg-maker-1/</guid><description>&lt;p>最近看到朋友提起 RPG Maker 又勾起我在 Mac 上使用 RPG Maker 的野心，雖然之前用 Wine 順利跑了起來，不過既然能寫 Ruby 當然要用各種奇怪的方式去玩弄。&lt;/p>
&lt;p>結果，當我發現內建的 Library 要做到我想做的事情很困難的時候，腦抽的我決定自己做一個！&lt;/p>
&lt;p>不過，這年頭不跨平台其實還蠻空虛的，所以就從能夠跨平台來做選擇，至於為何會選 Mono 和 C# 大概就是受到 Unity3D 跟 Unreal Engine 4 兩個目前都是非常有名的遊戲引擎影響吧！
（上述兩個引擎都有使用 Mono 來協助實踐跨平台的功能）&lt;/p></description></item><item><title>Rails Girls 4 活動感想</title><link>https://blog.frost.tw/posts/2014/08/31/rails-girls-4-event-impressions/</link><pubDate>Sun, 31 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/08/31/rails-girls-4-event-impressions/</guid><description>&lt;p>好久沒寫部落格了，一些技術類的文章都沒時間寫，草稿也越積越多⋯⋯
不過參加活動的不馬上寫完，很快就會忘記在做什麼事情啊 XDD&lt;/p>
&lt;p>這次 RG4 超幸運被選為教練，然後我又長知識了～&lt;/p>
&lt;p>雖然自己是讀設計學院，但是不管怎樣都不會有同學會朋友這麼認真的學這方面的知識。
其實某種意義上還蠻孤單的，不過對其他人來說畢竟不是必要的，所以也不能抱怨啊 XD&lt;/p>
&lt;p>那麼，就來說說 8/29 跟 8/30 這兩天做了什麼吧！&lt;/p></description></item><item><title>COSCUP 2014 會後心得不能吃</title><link>https://blog.frost.tw/posts/2014/07/20/coscup-after-2014-experience/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/07/20/coscup-after-2014-experience/</guid><description>&lt;p>「當會眾的資歷到了某個程度，就只能交朋友了⋯⋯」&lt;/p>
&lt;p>其實今年我不知道我要幹嘛，可能是超級累的關係所以就只聽了一部分有趣的。
（從人社館跑去活動中心超累的，尤其是你收到中獎通知要跑回來領獎品的那一個瞬間 XDDDD）&lt;/p>
&lt;p>今年 COSCUP 到底在幹嘛呢？&lt;/p>
&lt;p>「推你 SITCON 坑！」「推你 SITCON 坑！」
「推你 SITCON 坑！」「推你 SITCON 坑！」&lt;/p></description></item><item><title>自製 Blogger 佈景的小技巧</title><link>https://blog.frost.tw/posts/2014/06/15/tips-of-make-blogger-theme/</link><pubDate>Sun, 15 Jun 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/06/15/tips-of-make-blogger-theme/</guid><description>&lt;p>據說自從期末開始後，就很久沒有寫網誌了⋯⋯&lt;/p>
&lt;p>就在期末快結束的某一天晚上，高中同學傳訊息問我：「有在忙嗎？」
於是，我就這樣開始拯救快被&lt;!-- raw HTML omitted -->二一&lt;!-- raw HTML omitted -->的好朋友拉 XD&lt;/p>
&lt;p>老師：「阿你們就回去改一改 Blogger 佈景當期末」&lt;/p>
&lt;p>從以前開始，我就一直覺得 Blogger 的佈景超難改，那鬼一般的 XML 總是讓我的網誌東少一塊西少一塊（崩潰
不過為了拯救同學，我只好開始重新面對它⋯⋯
（至於我一直都沒有用 Blogger 當網誌，有很大的原因就是這東西 Orz）&lt;/p></description></item><item><title>2014 新一代設計展心得</title><link>https://blog.frost.tw/posts/2014/05/18/2014-yodex-experience/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/05/18/2014-yodex-experience/</guid><description>&lt;p>咳了一周都還沒好，還好週六那天沒有很嚴重不然幾乎逛不下去。
（看起來感冒問題比例很低，反倒是有類似咳嗽症狀的問題可能性比較高，總之希望趕快好啊⋯⋯）&lt;/p>
&lt;p>今年因為互動老師的作業，早上先去繞了一下多媒體類的作品（雖然畢製做遊戲⋯⋯）
也因此非常感謝我的組員（互動和畢製）分別替我看了大部份的作品，還有陪我先逛了多媒體類的作品。&lt;/p>
&lt;p>雖然兩個類型的照片、觀看數量差不多，不過我這篇文章還是以畢製的遊戲類為主去寫。&lt;/p></description></item><item><title>用 React.js 實作拖曳與元件容器</title><link>https://blog.frost.tw/posts/2014/05/04/reactjs-implementation-of-the-drag-component-containers/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/05/04/reactjs-implementation-of-the-drag-component-containers/</guid><description>&lt;p>「很久很久以前，有一個叫做 OwaBin (芋冰) 的食物，可以讓設計師用拖拉就做出 Launcher 這真是太神奇了！」&lt;/p>
&lt;p>原本想說可以很歡樂的再 HanGee 幫忙設計跟網站，但是畢製的不可逆性質，讓我得把事情先推掉。
（也包括 SITCON 的任務，現在也在培養新人了⋯⋯）&lt;/p>
&lt;p>半個月前討論這個計劃時，我非常有興趣，所以馬上做了一個簡易的測試版。
這篇文章會來說明這個功能。&lt;/p>
&lt;p>預期完成的功能如下：&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>RubyConf TW 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/04/26/rubyconf-tw-after-2014-will-experience/</link><pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/04/26/rubyconf-tw-after-2014-will-experience/</guid><description>&lt;p>接觸 Rails 快三年，今年終於有機會參加 RubyConf 了！
除了 PHP 之外，其實 Ruby 對我來說也算是一個有特別感情的語言，主要是國中時期的 RPG Maker 跟剛開始學習 PHP 的時候還分不出語言，也買了幾本 Ruby 跟 Rails 的書。&lt;/p>
&lt;p>今年的 RubyConf 似乎蠻多新的工作人員，所以第一天有點不順。
（不過對我來說是可以接受的範圍，議程品質非常高，不過我想這也會是許多 Conference 未來會碰到的問題。）&lt;/p>
&lt;p>然後不知道是不是錯覺，我整個覺得 RubyConf 給我一種蠻優雅的感覺 XD
（其他 Conference 各有特色，但是第一次有這種感覺真的蠻有趣的 XD）&lt;/p></description></item><item><title>Unreal Engine 4 collaboration with SVN</title><link>https://blog.frost.tw/posts/2014/04/07/unreal-engine-4-collaboration-with-svn/</link><pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/04/07/unreal-engine-4-collaboration-with-svn/</guid><description>&lt;p>這幾年來 3D 遊戲的門檻隨著 Unity3D 的出現，從原本 Open Source 的 Ogre Engine 等，層次一口氣提高到了「商業運用」的等級，支付一定的費用給引擎公司，也許就可以用到 3A 遊戲等級的引擎。只要有付費，許多問題與麻煩都可以交給引擎公司，相較 Open Source 的形式，某種意義上也是更加容易的製作遊戲（至少不會有問題找不到解法，大絕就是呼叫客服）&lt;/p>
&lt;p>自從 UE3 開放免費下載（抽成形式）後，這次的 UE4 稍微改了模式，月費制加抽成（5%）並且在最近公佈下載與付費的方式。&lt;/p>
&lt;p>而我的同學長久以來就有著要用 Unreal Engine 的怨念，但因為我一直以「在 Mac 上不方便」為理由，讓他乖乖選擇 Unity3D 不過 UE4 來勢洶洶的支援了 Mac 我也不得不認命⋯⋯&lt;/p></description></item><item><title>Capistrano to Vagrant 自動部署心得</title><link>https://blog.frost.tw/posts/2014/03/24/capistrano-to-vagrant-automated-deployment-experience/</link><pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/03/24/capistrano-to-vagrant-automated-deployment-experience/</guid><description>&lt;p>之前寫過一篇關於 &lt;a href="https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/">Vagrant + Capistrano + GitLab&lt;/a> 的自動化部署介紹。&lt;/p>
&lt;p>不過當時因為一些問題，卡著沒有繼續完成測試。
最近因為某些原因，需要一個 Nightly-like (不一定會每日更新，取決于 commit) 的環境，所以只好硬著頭皮把全部的問題解決了⋯⋯&lt;/p></description></item><item><title>SITCON 2014 會後心得</title><link>https://blog.frost.tw/posts/2014/03/17/sitcon2014/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/03/17/sitcon2014/</guid><description>&lt;p>分心了一整天，趕緊補一下 SITCON 2014 的心得啊（趴地&lt;/p>
&lt;p>今年依舊是工作人員，各種意義上就是還是學生的時候就都奉獻給 SITCON 這樣的感覺拉～
只是今年同時也成為了講師，扣掉 Lightning Talk 之外，這是第一次上台講。&lt;/p>
&lt;p>去年 COSCUP 在台上的時候，整個人是發抖狀態不能好好講完內容（面對可能有快千人的壓迫感可能真的不一樣）
這次一上台就是很淡定，只是速度很快，快到遭到會眾反映 XD&lt;/p>
&lt;p>不過今年超累，所以除了主持之外幾乎沒有去聽其他議程（下午講完就累癱了 XD）
所以只好來補充一下我的 Talk 跟分享一下感想拉～&lt;/p></description></item><item><title>學生接案的報價技巧</title><link>https://blog.frost.tw/posts/2014/02/20/the-case-for-student-how-to-set-price/</link><pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/20/the-case-for-student-how-to-set-price/</guid><description>&lt;p>會寫這篇文章是因為昨晚學弟（非系上）問我他現在接了一個案子，該怎麼報價。
然後我就開始問他一些問題，來當作報價的建議依據。&lt;/p>
&lt;p>同時也發現到，其實很多再接案用於「報價」的自我判斷，學弟也沒有什麼概念。我想應該也有不少人會有這方面的問題，所以就打算來寫一篇文章分享一下我的報價技巧。&lt;/p>
&lt;p>不過我已經有一年左右沒有接案了，另外就是這些「技巧」會依照行業、經營方式有所不同，這只是我個人的計算方式。
當然，裡面仍有許多「基本要素」是學生再接案的時候會忽略的，這篇文章另一方面是要提醒各位同學這個問題。&lt;/p>
&lt;p>順帶一提，網路上討論這個主題的人似乎不多，難怪學弟會抓不太到方向。&lt;/p></description></item><item><title>Using Laravel and HHVM on Heroku</title><link>https://blog.frost.tw/posts/2014/01/26/using-laravel-and-hhvm-on-heroku/</link><pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/26/using-laravel-and-hhvm-on-heroku/</guid><description>&lt;p>會寫這篇是前一陣子 HHVM 突然又被大家撈起來討論，看起來應該是有啥新進化吧 XD
那時身為專業的阿宅，一定要馬上裝來玩一下。&lt;/p>
&lt;p>隨著時間的流逝，又有人發現用 HHVM 可以讓 Composer 跑更快一點（超自然啊！）
我又再次回想起這神奇的東西⋯⋯
&lt;!-- raw HTML omitted -->現實是 Composer 跑太慢被 HHVM 斷開魂結&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>當時我就想，既然我都搞了 &lt;a href="https://Github.com/elct9620/Heroku-buildpacks-PHP-with-phalcon">Phalcon on Heroku&lt;/a> 這東西，不如再來搞一個 HHVM 版本吧！&lt;/p>
&lt;p>沒想到&lt;a href="https://Github.com/hhvm/Heroku-buildpack-hhvm">官方&lt;/a>竟然無情的已經做好了，於是我只好轉戰 Laravel 然後冒險就這樣開始了（才沒有 XD&lt;/p>
&lt;blockquote>
&lt;p>PaaS 入門指南還沒斷，不過人生總是需要調味一下，就先讓我寫些別的吧 XD&lt;/p>
&lt;/blockquote></description></item><item><title>Unity3D - 元件化的遊戲製作</title><link>https://blog.frost.tw/posts/2014/01/03/unity3d-component-of-game-production/</link><pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/03/unity3d-component-of-game-production/</guid><description>&lt;p>這篇文章一部份是寫給同學看的，在做遊戲中似乎挺常使用到的，而這個「特性」如果能夠理解的話，未來同學在製作遊戲應該也是會順利很多，另一方面就是 SITCON 的投稿，大概就是以這個為主軸來討論。&lt;/p>
&lt;p>依照網路上的說法，這個概念應該是在 Unity3D 熱門之後，才比較被大眾所熟悉。而我個人是在 2013 年的 COSCUP 在半路大的&lt;a href="https://speakerdeck.com/halflucifer/using-lua-to-build-a-component-based-architecture-for-game-apps">演講&lt;/a>第一次獲得「元件化」的關鍵字，這確實也是一個不一樣的概念。&lt;/p>
&lt;p>至於後續如何呢？讓我們一起看下去。
（關於非遊戲的討論，我之後會另外寫文章，這邊以 Unity3D 的 Component 概念為主。）&lt;/p></description></item><item><title>用 Vagrant 整合 GitLab 與 Capistrano 做 Staging 環境自動部署</title><link>https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/</link><pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/11/03/vagrant-integrated-gitlab-with-capistrano-create-staging-environment-automatically-deployed/</guid><description>&lt;p>&lt;!-- raw HTML omitted -->這標題超級長的說（崩潰&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>最近因為有實習生要來，所以把老爸公司設定好 GitLab 和 Gitlba-CI 來作為內部的版本本控制和自動化測試環境。
不過原本規劃的 Staging 環境也是在這檯主機上（當初就很淡定把記憶體和處理器加高，因為我會狂開 VM XD）但是會有 SSH 權限上的問題，原本想利用 Git 的 Hook 之類的來處理，但是感覺似乎不太好。&lt;/p>
&lt;p>剛好這次看到 GitLab / GitLab-CI 的介紹文，我又再次嘗試安裝，過程上順利、簡單很多。
不過上次不順利肯定是我把整個環境裝在 NAS 裡面的關係 XDD&lt;/p>
&lt;p>從我建好 GitLab / GitLab-CI 到設定 Capistrano 到自動部署，其實花費不少時間，而且有很多「差點忘記」的部分，因此決定來寫一篇文章做筆記！&lt;/p></description></item><item><title>HackGen 2013 大同場</title><link>https://blog.frost.tw/posts/2013/10/21/hackgen-2013-ttu/</link><pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/21/hackgen-2013-ttu/</guid><description>&lt;p>在正大場的下一周，大同場也順利舉辦完畢。
我想今年度的 HackGen 應該算是結束了 XD&lt;/p>
&lt;p>（不過似乎有計劃做較小的場次這樣，之後再觀望吧～）&lt;/p>
&lt;p>來稍微說說這次的心得（雖然作業依舊很趕，但是還是要先寫一下以免忘記）&lt;/p></description></item><item><title>HackGen 2013 政大場</title><link>https://blog.frost.tw/posts/2013/10/13/hackgen-2013-nccu/</link><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/13/hackgen-2013-nccu/</guid><description>&lt;p>昨晚莫名分心就沒寫完了（牆角&lt;/p>
&lt;p>在今年 2013 年的 HackGen 主要就是政大、大同這兩場。
在昨天，政大場終於結束了！&lt;/p>
&lt;p>雖然報名情況不如我們最初所期待的熱烈，但是就如同強哥所說，這是一個開始。&lt;/p>
&lt;p>這邊文章會簡單說一下我的心得和感想。&lt;/p></description></item><item><title>PHPConf 2013 會後心得</title><link>https://blog.frost.tw/posts/2013/10/05/phpconf-2013-experience/</link><pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/10/05/phpconf-2013-experience/</guid><description>&lt;p>仔細想想，從 2011 年的 PHPConf 到現在也已經第三年了⋯⋯&lt;/p>
&lt;p>第一年是會眾，第二年是工作人員，第三年是作者（投稿文章）每年參加 PHPConf 大概是我的例行公事。
在資訊相關的歷程中，陪伴我最長時間的程式語言就是 PHP 一直都有一份無法割捨的感情，即使已經很少用 PHP 開發東西了⋯⋯&lt;/p>
&lt;p>不過，在我學習過這麼多種程式語言（PHP, JavaScript, ActionScript, Lua, Ruby, Java, etc） 之後，其實我認為各種語言大多有它特別的性質，有愛就好，而 PHP 大概就是對於「新入門的網站開發者」有著不錯的親和力。&lt;/p>
&lt;p>那麼，今年的 PHPConf 如何呢？&lt;/p></description></item><item><title>V-Play Engine 與 Corona SDK 的簡易比較</title><link>https://blog.frost.tw/posts/2013/09/18/v-play-engine-and-the-corona-sdk-simple-different/</link><pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/09/18/v-play-engine-and-the-corona-sdk-simple-different/</guid><description>&lt;p>原本這篇是想寫關於 &lt;a href="https://v-play.net/">V-Play&lt;/a> Engine 來制作一個簡單的小遊戲，不過後來因為作業上的需求，我有另外去接觸 &lt;a href="https://coronalabs.com/">Corona&lt;/a> SDK 於是就變成了一篇比較文。&lt;/p>
&lt;p>雖然兩者大概都是接觸約一周到兩週的程度，沒辦法做太深入地分析與討論，但是就我自己的感覺來說，最後是選擇了 &lt;a href="https://coronalabs.com/">Corona&lt;/a> SDK 來做為制作遊戲的引擎。&lt;/p>
&lt;p>雖然實際上比較想制作 PC/Mac 平台的遊戲，不過就現況來說遊戲引擎都轉戰移動裝置市場，也只好先暫時如此了⋯⋯&lt;/p></description></item></channel></rss>