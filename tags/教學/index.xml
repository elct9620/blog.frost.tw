<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>教學 on 弦而時習之</title><link>https://blog.frost.tw/tags/%E6%95%99%E5%AD%B8/</link><description>Recent content in 教學 on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Mon, 28 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/%E6%95%99%E5%AD%B8/index.xml" rel="self" type="application/rss+xml"/><item><title>部署你的第一個 Ruby on Rails 網站（八）</title><link>https://blog.frost.tw/posts/2018/05/28/Getting-started-deploy-your-Ruby-on-Rails-Part-8/</link><pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/05/28/Getting-started-deploy-your-Ruby-on-Rails-Part-8/</guid><description>&lt;p>前面幾篇文章已經把所有關於 Ruby 和資料庫都設定完成，最後一個階段就是要把 Nginx 設定好，並且讓 Let&amp;rsquo;s Encrypt 可以正確的被設定，讓網站支援 SSL 功能。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（七）</title><link>https://blog.frost.tw/posts/2018/05/20/Getting-started-deploy-your-Ruby-on-Rails-Part-7/</link><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/05/20/Getting-started-deploy-your-Ruby-on-Rails-Part-7/</guid><description>&lt;p>現在伺服器還沒辦法下載到 Ruby on Rails 專案的原始碼用來部署，這一篇會介紹該如何把原始碼下載回來，並且在伺服器上將相關的 Ruby Gem 都安裝好。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（六）</title><link>https://blog.frost.tw/posts/2018/05/07/Getting-started-deploy-your-Ruby-on-Rails-Part-6/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/05/07/Getting-started-deploy-your-Ruby-on-Rails-Part-6/</guid><description>&lt;p>經過前面五篇的教學，我們距離將 Ruby on Rails 部署到伺服器上越來越接近了。上一階段我們在本機段將部署的設定做完之後，這一篇文章會回到伺服器將部署所需的設定補齊，讓 Capistrano 可以正確的將程式碼部署到伺服器。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（五）</title><link>https://blog.frost.tw/posts/2018/04/15/Getting-started-deploy-your-Ruby-on-Rails-Part-5/</link><pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/04/15/Getting-started-deploy-your-Ruby-on-Rails-Part-5/</guid><description>&lt;p>到&lt;a href="https://blog.frost.tw/posts/2018/04/10/Getting-started-deploy-your-Ruby-on-Rails-Part-4/">第四篇&lt;/a>為止，我們已經有了可以運行 Ruby on Rails 的環境，不過到底該怎麼在伺服器上跑起來呢？&lt;/p>
&lt;p>絕對不是&lt;strong>把程式碼複製到伺服器&lt;/strong>這種簡單的做法，或者說這樣的做法在更新上是很沒有效率的！&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（四）</title><link>https://blog.frost.tw/posts/2018/04/10/Getting-started-deploy-your-Ruby-on-Rails-Part-4/</link><pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/04/10/Getting-started-deploy-your-Ruby-on-Rails-Part-4/</guid><description>&lt;p>從&lt;a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">第一篇&lt;/a>到&lt;a href="https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/">第二篇&lt;/a>的說明，加上&lt;a href="https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/">第三篇&lt;/a>我想大家已經對編譯自己的環境稍為熟悉。&lt;/p>
&lt;p>為了要可以用 Passenger 作為網站伺服器，我們需要自行編譯 Nginx 讓他可以使用 Passenger 模組。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（三）</title><link>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/</link><pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/03/27/Getting-started-deploy-your-Ruby-on-Rails-Part-3/</guid><description>&lt;p>經過&lt;a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">第一篇&lt;/a>和&lt;a href="https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/">第二篇&lt;/a>的說明，我想大家現在應該都有辦法順利的透過 SSH 進入自己的伺服器。&lt;/p>
&lt;p>在第二篇的最後，我們針對 Ruby 環境預先做了準備，接下來就是安裝 Ruby 環境的時候了！&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（二）</title><link>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/</link><pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/03/23/Getting-started-deploy-your-Ruby-on-Rails-Part-2/</guid><description>&lt;p>延續&lt;a href="https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/">上一篇&lt;/a>文章的內容，我們需要先在伺服器上進行設定，讓伺服器可以正確的安裝 Ruby 環境。如此一來，我們才能夠將 Ruby on Rails 部署到伺服器上面。&lt;/p>
&lt;p>為了完成這些前置作業，我們還需要針對伺服器的設定進行完善的準備才行。&lt;/p></description></item><item><title>部署你的第一個 Ruby on Rails 網站（一）</title><link>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/</link><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/03/20/Getting-started-deploy-your-Ruby-on-Rails-Part-1/</guid><description>&lt;p>最近在公司發現其實不少同事都還沒有實際部署過一台伺服器的經驗，在有人負責 DevOps 的情況下，也許真的不太需要。又或者因為還是初級工程師的關係，沒有那個權限可以去安裝一次伺服器。甚至其實一直都使用著 Heroku 或者 AWS CodeDeploy 等服務的便利性，而沒有嘗試自己安裝一次。&lt;/p>
&lt;p>不管是基於甚麼原因，總之先來安裝一次吧！&lt;/p></description></item><item><title>Nitrous.io - 網站開發協作平台</title><link>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</link><pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</guid><description>&lt;p>會寫這篇文章，主要是最近收到 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的信，而我意外地想到一個特別的用途，那就是透過線上協作功能教我妹寫 Ruby on Rails。&lt;/p>
&lt;p>註：本文連結都帶有 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的邀請碼，如果不喜歡請直接輸入 Nitrous.io 進入網站註冊&lt;/p>
&lt;hr>
&lt;h3 id="什麼是-nitrousio">什麼是 Nitrous.io&lt;/h3>
&lt;p>這大概要追溯到三、四年前，一個叫做 Action.io 的服務了⋯⋯
那時還是高中生的我，意外的申請了一個叫做 Action.io 的 Beta 計劃，然後開始等待邀請碼。
（根據噗浪訊息，直到今年我才收到 Beta 邀請碼）&lt;/p>
&lt;p>當時的 Action.io 展示了一個功能「線上協作」而引起我的興趣。&lt;/p>
&lt;p>至於線上協作是什麼形式的呢？昨晚上測試的結果是只要啓動「協作模式」就能夠立即得看到其他人的編輯，並且附有聊天室的功能。
不過如果單純是這樣，那麼用最近幾年出現的線上編輯器不是也可以達到嗎？不過，既然有辦法推出這個服務，總是會有他的過人之處，那就是他直接提供了你一個接近 VPS 的環境。（推測是 Amazon EC2）&lt;/p></description></item></channel></rss>