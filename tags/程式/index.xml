<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程式 on 弦而時習之</title><link>https://blog.frost.tw/tags/%E7%A8%8B%E5%BC%8F/</link><description>Recent content in 程式 on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>contact@frost.tw (蒼時弦也)</managingEditor><webMaster>contact@frost.tw (蒼時弦也)</webMaster><lastBuildDate>Wed, 13 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/%E7%A8%8B%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>探索 Ruby 的 each 方法（一）</title><link>https://blog.frost.tw/posts/2019/02/13/Deep-into-ruby-s-each-method-Part-1/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2019/02/13/Deep-into-ruby-s-each-method-Part-1/</guid><description>&lt;p>原本是想討論 Enumerable 這個 Module 的機制跟運作原理，不過越寫越發現光是一篇文章很難講明白。&lt;/p>
&lt;p>所以就一邊查資料跟 Ruby 原始碼，慢慢的把 Enumerable / Enumerator 這兩個讓 &lt;code>#each&lt;/code> 運作起來的機制討論清楚。&lt;/p>
&lt;p>在 Ruby 裡面我們已經很熟悉使用 &lt;code>#each&lt;/code> 來對陣列相關的物件進行操作，不過在大部分的語言我們都需要透過迴圈的方式來取出陣列的元素，那麼 &lt;code>#each&lt;/code> 這個方法到底是怎麼讓我們用這麼方便的機制來操作陣列的呢？&lt;/p></description></item><item><title>轉職工程師：尋找自己的價值</title><link>https://blog.frost.tw/posts/2018/11/06/Become-a-programmer-Find-your-own-value/</link><pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/11/06/Become-a-programmer-Find-your-own-value/</guid><description>&lt;p>這系列的文章已經稍微討論過我自己在學習寫程式過程中的&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">心態&lt;/a>、&lt;a href="https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/">方法&lt;/a>跟&lt;a href="https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/">困難&lt;/a>，最後就來討論最後一個我認為很重要的問題。&lt;/p>
&lt;p>不論學了什麼，或者有多麽厲害的技術，作為一個工程師我們的價值在哪裡？&lt;/p></description></item><item><title>轉職工程師：為什麼馬上就遇到瓶頸？</title><link>https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/</link><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/10/23/Become-a-programmer-Why-is-bottleneck-coming-very-soon/</guid><description>&lt;p>前面已經討論了&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">起步的心態&lt;/a>跟&lt;a href="https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/">起步的方法&lt;/a>兩個問題，好不容易開始寫程式了，卻發現⋯⋯&lt;/p>
&lt;p>&lt;strong>照著教學做，但是沒有教學就完全不會&lt;/strong>&lt;/p>
&lt;p>不管是去上更多的課，還是看更多的教學，怎麼樣都無法擺脫這個問題。這到底是什麼原因呢？&lt;/p></description></item><item><title>轉職工程師：要學什麼才好？</title><link>https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/10/02/Become-a-programmer-how-to-start/</guid><description>&lt;p>上一篇文章&lt;a href="https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/">輸在起跑點&lt;/a>已經稍微討論過心態上的問題，所以馬上就是要怎麼開始的問題。&lt;/p>
&lt;p>大部分的人不論之前有沒有經驗，一定會冒出「要學什麼語言？」「某某語言很熱門是不是應該去學？」之類的問題。&lt;/p>
&lt;p>很多時候，我認為這不是真正的問題。&lt;/p></description></item><item><title>轉職工程師：輸在起跑點</title><link>https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/09/25/Become-a-programmer-lose-at-the-starting-line/</guid><description>&lt;p>工作到現在差不多兩年多，因為公司業務的關係偶爾也會跟同事討論在學習當工程師或者寫程式上的經驗。所以打算寫一個系列的文章，跟大家分享一下我從學程式到成為一個工程師的過程，是怎麼樣的。&lt;/p>
&lt;p>這是第一篇，我想用「輸在起跑點」來當開始。&lt;/p></description></item><item><title>怎麼選第一份工作？</title><link>https://blog.frost.tw/posts/2018/09/10/How-to-choose-your-first-job/</link><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2018/09/10/How-to-choose-your-first-job/</guid><description>&lt;p>從退伍到工作差不多過了兩年，這段時間有不少經驗我想已經足夠跟大家分享。這篇算是一個前導的文章，想來跟大家分享「第一份工作」的重要性。&lt;/p>
&lt;blockquote>
&lt;p>重點是技能成長那段，討論薪水的地方太長可以跳過喔 XD&lt;/p>
&lt;/blockquote></description></item><item><title>Unity3D - 元件化的遊戲製作</title><link>https://blog.frost.tw/posts/2014/01/03/unity3d-component-of-game-production/</link><pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2014/01/03/unity3d-component-of-game-production/</guid><description>&lt;p>這篇文章一部份是寫給同學看的，在做遊戲中似乎挺常使用到的，而這個「特性」如果能夠理解的話，未來同學在製作遊戲應該也是會順利很多，另一方面就是 SITCON 的投稿，大概就是以這個為主軸來討論。&lt;/p>
&lt;p>依照網路上的說法，這個概念應該是在 Unity3D 熱門之後，才比較被大眾所熟悉。而我個人是在 2013 年的 COSCUP 在半路大的&lt;a href="https://speakerdeck.com/halflucifer/using-lua-to-build-a-component-based-architecture-for-game-apps">演講&lt;/a>第一次獲得「元件化」的關鍵字，這確實也是一個不一樣的概念。&lt;/p>
&lt;p>至於後續如何呢？讓我們一起看下去。
（關於非遊戲的討論，我之後會另外寫文章，這邊以 Unity3D 的 Component 概念為主。）&lt;/p></description></item><item><title>從學生的角度給學生學習程式的建議</title><link>https://blog.frost.tw/posts/2013/12/18/from-the-students-perspective-to-the-students-program-of-study-recommendations/</link><pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate><author>contact@frost.tw (蒼時弦也)</author><guid>https://blog.frost.tw/posts/2013/12/18/from-the-students-perspective-to-the-students-program-of-study-recommendations/</guid><description>&lt;p>雖然自己不是什麼高手，也沒什麼有建設性的建議，但是最近老爸公司來了實習生，我在跟實習生的互動過程中，發現了一些學生在學習程式上的一些要注意的部分，所以想來分享一下。&lt;/p>
&lt;p>（先不討論我怎麼會在老爸公司寫扣，還有實習生怎麼出現的這些神秘問題了 XD）&lt;/p>
&lt;hr>
&lt;p>其實已經有很多前輩已經分享過非常多有用的技巧與方法，這邊就單純以我個人的經驗，還有與實習生接觸後，我在教導實習生使用 Rails 和融入老爸公司開發流程的過程。（雖然以前只有我自己寫扣拉，哭哭）&lt;/p></description></item></channel></rss>