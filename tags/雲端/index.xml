<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>雲端 on 弦而時習之</title><link>https://blog.frost.tw/tags/%E9%9B%B2%E7%AB%AF/</link><description>Recent content in 雲端 on 弦而時習之</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Wed, 03 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frost.tw/tags/%E9%9B%B2%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Deis 架構分析（二）</title><link>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/02/03/how-deis-architecture-design-part-2/</guid><description>&lt;p>延續&lt;a href="https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/">上一篇&lt;/a>的內容，這篇文章要先來討論比較好懂的 &lt;code>Router&lt;/code> 部分。&lt;/p>
&lt;p>首先，在 Deis 的設計裡面，基本上所有的服務都是包成一個 Image 作為 Continaer 在 CoreOS 運行的。就這點來看，其實是非常符合 Mircoservice 架構的設計。同時我們也可以很輕鬆地將這些服務獨立出來使用，這篇文章討論的 &lt;code>Router&lt;/code> 除了原本的用途外，也很適合用來學習透過 etcd 部署自動化更新設定檔的環境。&lt;/p>
&lt;p>Deis 的原始碼都放在一起，其中 &lt;a href="https://github.com/deis/deis/tree/master/router">Router&lt;/a> 部分是裡面的一個子目錄，那麼就讓我們開始了解運行的架構吧！&lt;/p></description></item><item><title>Deis 架構分析（一）</title><link>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2016/01/31/how-deis-architecture-design-part-1/</guid><description>&lt;p>最近隨著 Container 技術的成熟，以及 CoreOS 等工具的出現。開始有一些 PaaS 的工具出現，而 &lt;a href="https://deis.io">Deis&lt;/a> 就是其中一個。&lt;/p>
&lt;p>Deis 本身是受到 &lt;a href="https://heroku.com">Heroku&lt;/a> 所啟發的開源 PaaS 專案，透過 Deis 可以輕鬆的建構 Heroku-like 的 PaaS 環境，若是有能夠管理伺服器的人員，其實可以考慮以這種方式部屬網站。相對 Heroku 來說，基本的 CoreOS Cluster 只要三台機器，以 Linode 2GB 的方案來看，甚至還比 Heroku 單個 2x dyno 還便宜呢！&lt;/p>
&lt;p>關於 Deis 的架構，在官方的&lt;a href="https://docs.deis.io/en/latest/understanding_deis/architecture/">文件&lt;/a>已經有做出說明，所以這系列的文章著重在閱讀原始碼以及探討關於 Deis 是如何實踐 Heroku-like 的 PaaS 環境。&lt;/p>
&lt;blockquote>
&lt;p>我本身是 Heroku 的重度使用者，因為透過 git 管理以及豐富的 Addon 在開發時其實是非常方便的。
不過有時候還是會受到一些限制，這時候 Deis 就提供了很大的幫助。不過這類 PaaS 工具其實還不能說非常成熟，使用上還是會有不少問題，透過了解底層的機制來建構一個自己的版本，在某些情境反而更加容易控制跟維護。&lt;/p>
&lt;/blockquote></description></item><item><title>PaaS 入門指南（四）</title><link>https://blog.frost.tw/posts/2014/04/02/getting-started-paas-4/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/04/02/getting-started-paas-4/</guid><description>&lt;p>終於，要到完結篇了（誤
這篇介紹完 Heroku 之後，就會開始寫進階運用的部分。
（其實已經冒出幾篇，基本上不會針對 PaaS 而是一些在 Heroku 上面的運用做討論。）&lt;/p>
&lt;p>不過，寫這篇之前，其實我很想寫一下 Unreal Engine 4 collaboration with SVN 這篇，因為最近 UE4 推出，雖然台灣地區還沒開放購買（月費約台幣六百，買一次就可以拿到該月版本，可不續費更新）但是同學硬是找到原始碼（其實就在 Github 只不過付費用戶才能看到）&lt;/p>
&lt;p>經過幾番波折，就這樣成功在 Windows / Mac 上跑起來，於是就開始了 UE4 研究之旅。
總之，下一篇大概就是 UE4 的 SVN （各種雷，完全找不到「SVN update」的功能⋯⋯卻可以 commit 啊）&lt;/p></description></item><item><title>PaaS 入門指南（三）之二</title><link>https://blog.frost.tw/posts/2014/02/17/getting-started-paas-3-2/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/17/getting-started-paas-3-2/</guid><description>&lt;p>據說&lt;a href="https://blog.frost.tw/posts/2014/02/04/getting-started-paas-3">PaaS 入門指南（三）&lt;/a>網址設錯，我要開始寫才發現 XD&lt;/p>
&lt;p>這篇文章會來示範如何用 OpenShift 架設 WordPress 網誌，在此之前要先告知大家。
最近 AppFog 決定改變方針，已經註冊的用戶免費方案降為 512MB 而之後不開放免費方案申請（假設經驗是對的，過幾年 AppFog 的免費用戶大概就會被停了吧 XD 上次是取消網址⋯⋯）&lt;/p>
&lt;p>也因此，之後的文章講完基本運用後，就不會另外提 AppFog 的使用（畢竟我目標再讓大家先免費體驗，然後選擇喜歡的付費嘛～）
當然，我主要還是討論 Heroku 的運用（不過那是進階了，需要有一定基礎知識的人才能夠玩起來～）&lt;/p>
&lt;p>那麼，我們進入正題。&lt;/p></description></item><item><title>PaaS 入門指南（三）</title><link>https://blog.frost.tw/posts/2014/02/04/getting-started-paas-3/</link><pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/02/04/getting-started-paas-3/</guid><description>&lt;p>過年我就淡定放假不寫文了（被拖走
根據 Google Analytic 統計，週二的這篇文章會讓訪客增長 XD&lt;/p>
&lt;p>上一篇極其混亂的 &lt;a href="https://blog.frost.tw/posts/2014/01/21/getting-started-paas-2">PaaS 入門指南（二）&lt;/a>已經簡易的向大家介紹相關工具的安裝（各種痛苦啊那個，感覺 AppFog 的對 Windows 比較友善⋯⋯）&lt;/p>
&lt;p>這篇我們先休息一下，因為我發現字太多我寫很累看的人好像也很累 XD
先來簡易介紹一下 AppFog / OpenShift 的快速安裝功能。&lt;/p></description></item><item><title>PaaS 入門指南（二）</title><link>https://blog.frost.tw/posts/2014/01/21/getting-started-paas-2/</link><pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/21/getting-started-paas-2/</guid><description>&lt;p>在第一篇文章 &lt;a href="https://blog.frost.tw/posts/2014/01/15/getting-started-paas-1/">PaaS 入門指南（一）&lt;/a>已經簡單介紹了 PaaS 的基本概念，還有一些常見的 PaaS 服務。&lt;/p>
&lt;p>這篇文章，則會介紹使用 PaaS 所需的基本技能以及軟體。雖然使用 PaaS 的方式大多在服務提供者的網站上會有簡易的介紹，但是如果想要體驗各式的 PaaS 最好還是能夠熟悉這些工具的基本操作。&lt;/p></description></item><item><title>PaaS 入門指南（一）</title><link>https://blog.frost.tw/posts/2014/01/15/getting-started-paas-1/</link><pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2014/01/15/getting-started-paas-1/</guid><description>&lt;p>這一系列的文章是準備寫給對雲端有興趣，或者想嘗試架設網站的人。&lt;/p>
&lt;p>內容的部分，這篇文章會對幾家常見的 PaaS 平台進行簡介。後續會以 Heroku 為主軸繼續介紹，從產生一個 Application 到發佈以及客製化都會一起介紹。文章中也會將我所理解的 PaaS 概念與架構一併說明，讓大家可以更加了解關於 PaaS 的使用，以及優缺點。&lt;/p>
&lt;p>至於這一系列的文章，會以「免費、無負擔」的前提下撰寫，選用以及介紹的 PaaS 可能有付費也可能有免費，但是會讓大家在盡可能不花費的狀況下體驗與使用。&lt;/p>
&lt;p>那麼，正文開始。&lt;/p></description></item><item><title>Nitrous.io - 網站開發協作平台</title><link>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</link><pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.frost.tw/posts/2013/09/08/nitrousio-website-development-collaboration-platform/</guid><description>&lt;p>會寫這篇文章，主要是最近收到 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的信，而我意外地想到一個特別的用途，那就是透過線上協作功能教我妹寫 Ruby on Rails。&lt;/p>
&lt;p>註：本文連結都帶有 &lt;a href="https://www.nitrous.io/join/kVSxoqwlyLw">Nitrous.io&lt;/a> 的邀請碼，如果不喜歡請直接輸入 Nitrous.io 進入網站註冊&lt;/p>
&lt;hr>
&lt;h3 id="什麼是-nitrousio">什麼是 Nitrous.io&lt;/h3>
&lt;p>這大概要追溯到三、四年前，一個叫做 Action.io 的服務了⋯⋯
那時還是高中生的我，意外的申請了一個叫做 Action.io 的 Beta 計劃，然後開始等待邀請碼。
（根據噗浪訊息，直到今年我才收到 Beta 邀請碼）&lt;/p>
&lt;p>當時的 Action.io 展示了一個功能「線上協作」而引起我的興趣。&lt;/p>
&lt;p>至於線上協作是什麼形式的呢？昨晚上測試的結果是只要啓動「協作模式」就能夠立即得看到其他人的編輯，並且附有聊天室的功能。
不過如果單純是這樣，那麼用最近幾年出現的線上編輯器不是也可以達到嗎？不過，既然有辦法推出這個服務，總是會有他的過人之處，那就是他直接提供了你一個接近 VPS 的環境。（推測是 Amazon EC2）&lt;/p></description></item></channel></rss>